#include "usb.h"
#include "usb_device.h"
#include "usb_device_class.h"
#include <usb_device_config.h>
#include "usb_device_audio.h"
#include "usb_device_ch9.h"
#include "fsl_device_registers.h"
#include <usb_device_descriptor.h>
#if (defined(FSL_FEATURE_SOC_SYSMPU_COUNT) && (FSL_FEATURE_SOC_SYSMPU_COUNT > 0U))
#include "fsl_sysmpu.h"
#endif /* FSL_FEATURE_SOC_SYSMPU_COUNT */

#if ((defined FSL_FEATURE_SOC_USBPHY_COUNT) && (FSL_FEATURE_SOC_USBPHY_COUNT > 0U))
#include "usb_phy.h"
#endif

#include "peripherals.h"
#include "usb_device_${idLowerSnakeCase}$.h"

/*******************************************************************************
 * Definitions
 ******************************************************************************/
${<code>
// Audio streaming and control parameters
var AUDIO_FORMAT_BITS_VALUE = "";
var AUDIO_FORMAT_CHANNELS_VALUE = "";
var AUDIO_FORMAT_SIZE_VALUE = "";
var USB_AUDIO_GENERATOR_STREAM_ENDPOINT_VALUE = "";
var USB_INTERFACE_AUDIO_CONTROL_INDEX_VALUE = "USB_" + idSnakeCase + "_INDEX";
// Class specific callback function names
var USB_AudioControl_Callback_Name = "USB_Device" + idCamelCase + "Callback";
var USB_AudioControlInit_Callback_Name = "USB_Device" + idCamelCase + "Init";
// Audio generator global variable
var USB_AudioGenerator_Name = "USB_" + idCamelCase + "AudioGenerator";
// Callback functions for interface settings
var USB_AudioStreaming_SetInterface_Callback_Name = "";
var USB_AudioControl_SetInterface_Callback_Name = "USB_Device" + idCamelCase + "SetInterface";
var USB_AudioControl_SetConfiguration_Callback_Name = "USB_Device" + idCamelCase + "SetConfiguration";
var USB_AudioControl_BusReset_Callback_Name = "USB_Device" + idCamelCase + "BusReset";
var interfaceAudioControlHandle = idLowerCamelCase + "Handle";
// Audio version global variable
var AudioVersion20 = interfaceProtocol == CONST.AUDIO_PROTOCOL_IPV20;

/* Loops for finding the ID of required parameters - audio stream specific settings */
dataInterfaces.forEach(function(interface) {
    if ((interface.interfaceClass == CONST.USB_CLASS_AUDIO) && (interface.interfaceSubClass == CONST.AUDIO_SUBCLASS_AUDIOSTREAM)) {
        USB_AudioStreaming_SetInterface_Callback_Name = "USB_Device" + interface.idCamelCase + "SetInterface";
        interface.endpointsSettings.forEach(function (setting, index) {
            if (setting.audioStreamSpecificSettings || setting.audio20StreamSpecificSettings) {
                AUDIO_FORMAT_BITS_VALUE = "USB_" + interface.idSnakeCase + "_" + setting.idSnakeCase + "_BIT_RESOLUTION";
                AUDIO_FORMAT_CHANNELS_VALUE = "USB_" + interface.idSnakeCase + "_" + setting.idSnakeCase + "_NUMBER_OF_CHANNEL";
                if (setting.audio20StreamSpecificSettings){
                    AUDIO_FORMAT_SIZE_VALUE = "USB_" + interface.idSnakeCase + "_" + setting.idSnakeCase + "_SUBSLOT_SIZE";
                }
                else{
                    AUDIO_FORMAT_SIZE_VALUE = "USB_" + interface.idSnakeCase + "_" + setting.idSnakeCase + "_SUBFRAME_SIZE";
                }
                setting.endpoints.forEach(function (endpoint) {
                    if ((endpoint.typeSnakeCase == "ISOCHRONOUS") && (endpoint.endpointUsage == "USB_ENDPOINT_ISOCHRONOUS_DATA") && (endpoint.directionSnakeCase == "IN")) {
                        USB_AUDIO_GENERATOR_STREAM_ENDPOINT_VALUE = "USB_" + endpoint.idSnakeCase;
                    }                    
                });
            }    
        });
    }
});

if(USB_AUDIO_GENERATOR_STREAM_ENDPOINT_VALUE == "")
{
scriptApi.logError("No endpoint suitable for USB audio generator stream, Audio_stream_setting in Audio_streaming interface requires input isochronous endpoint with usage:data .");
}
if(USB_INTERFACE_AUDIO_CONTROL_INDEX_VALUE == "")
{
scriptApi.logError("No interface suitable for USB audio generator control, audio generator control interface is required to have Subclass:Audio Control.");
}
</code>}$

/* Audio data format */
/* Definition of audio generator demo application parameters based on the generated USB descriptor definition */
#define AUDIO_FORMAT_BITS (${AUDIO_FORMAT_BITS_VALUE}$)
#define AUDIO_FORMAT_CHANNELS (${AUDIO_FORMAT_CHANNELS_VALUE}$)
#define AUDIO_FORMAT_SIZE (${AUDIO_FORMAT_SIZE_VALUE}$)
#define USB_AUDIO_STREAM_ENDPOINT (${USB_AUDIO_GENERATOR_STREAM_ENDPOINT_VALUE}$)

#define HS_ISO_IN_ENDP_PACKET_SIZE (AUDIO_SAMPLING_RATE_KHZ * AUDIO_FORMAT_CHANNELS * AUDIO_FORMAT_SIZE)
#define FS_ISO_IN_ENDP_PACKET_SIZE (AUDIO_SAMPLING_RATE_KHZ * AUDIO_FORMAT_CHANNELS * AUDIO_FORMAT_SIZE)
#define USB_AUDIO_GENERATOR_CONFIGURE_INDEX USB_COMPOSITE_CONFIGURATION_INDEX
#define USB_AUDIO_GENERATOR_INTERFACE_COUNT USB_COMPOSITE_INTERFACE_COUNT

#if defined(USB_DEVICE_CONFIG_EHCI) && (USB_DEVICE_CONFIG_EHCI > 0U) || \\
    (defined(USB_DEVICE_CONFIG_LPCIP3511HS) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))
#define AUDIO_ENDPOINT_MAX_PACKET_SIZE \\
    (FS_ISO_IN_ENDP_PACKET_SIZE > HS_ISO_IN_ENDP_PACKET_SIZE ? FS_ISO_IN_ENDP_PACKET_SIZE : HS_ISO_IN_ENDP_PACKET_SIZE)
#endif

#if defined(USB_DEVICE_CONFIG_KHCI) && (USB_DEVICE_CONFIG_KHCI > 0U)
#define AUDIO_ENDPOINT_MAX_PACKET_SIZE (FS_ISO_IN_ENDP_PACKET_SIZE)
#endif

#if defined(USB_DEVICE_CONFIG_LPCIP3511FS) && (USB_DEVICE_CONFIG_LPCIP3511FS > 0U)
#define AUDIO_ENDPOINT_MAX_PACKET_SIZE (FS_ISO_IN_ENDP_PACKET_SIZE)
#endif
/*******************************************************************************
 * Variables
 ******************************************************************************/
USB_DMA_NONINIT_DATA_ALIGN(USB_DATA_ALIGN_SIZE) 
uint8_t s_wavBuff[AUDIO_ENDPOINT_MAX_PACKET_SIZE];
uint32_t audioPosition = 0U;
extern const unsigned char wavData[];
extern const uint16_t wavSize;

static usb_device_composite_struct_t *s_UsbDeviceComposite;

/* Default value of audio generator device struct */
usb_audio_generator_struct_t ${USB_AudioGenerator_Name}$ = {
    .copyProtect = 0x01U,
    .curMute = 0x01U,
    .curVolume = {0x00U, 0x80U},
    .minVolume = {0x00U, 0x80U},
    .maxVolume = {0xFFU, 0x7FU},
    .resVolume = {0x01U, 0x00U},
    .curBass = 0x00U,
    .minBass = 0x80U,
    .maxBass = 0x7FU,
    .resBass = 0x01U,
    .curMid = 0x00U,
    .minMid = 0x80U,
    .maxMid = 0x7FU,
    .resMid = 0x01U,
    .curTreble = 0x01U,
    .minTreble = 0x80U,
    .maxTreble = 0x7FU,
    .resTreble = 0x01U,
    .curAutomaticGain = 0x01U,
    .curDelay = {0x00U, 0x40U},
    .minDelay = {0x00U, 0x00U},
    .maxDelay = {0xFFU, 0xFFU},
    .resDelay = {0x00U, 0x01U},
    .curLoudness = 0x01U,
    .curSamplingFrequency = {0x00U, 0x00U, 0x01U},
    .minSamplingFrequency = {0x00U, 0x00U, 0x01U},
    .maxSamplingFrequency = {0x00U, 0x00U, 0x01U},
    .resSamplingFrequency = {0x00U, 0x00U, 0x01U},${<code>
if(AudioVersion20){ </code>}$
    .curMute20 = 0U,
    .curClockValid = 1U,
    .curVolume20 = {0x00U, 0x1FU},
    .curSampleFrequency = 8000U, /* This should be changed to 8000 if sampling rate is 8k */
    .freqControlRange = {1U, 8000U, 8000U, 0U},
    .volumeControlRange = {1U, 0x8001U, 0x7FFFU, 1U},${<code>
} </code>}$
};
/* Local pointer to USB device audio generator structure */
static usb_audio_generator_struct_t* s_UsbDeviceAudioGenerator = &${USB_AudioGenerator_Name}$;

/*******************************************************************************
* Code
******************************************************************************/
void USB_AudioRecorderGetBuffer(uint8_t *buffer, uint32_t size)
{
    uint8_t k;
    /* copy audio wav data from flash to buffer */
    for (k = 0U; k < size; k++)
    {
        if (audioPosition > (wavSize - 1U))
        {
            audioPosition = 0U;
        }
        *(buffer + k) = wavData[audioPosition];
        audioPosition++;
    }
}

/*!
 * @brief Audio class specific request function.
 *
 * This function handles the Audio class specific requests.
 *
 * @param handle		  The Audio class handle.
 * @param event 		  The Audio class event type.
 * @param param 		  The parameter of the class specific request.
 *
 * @return A USB error code or kStatus_USB_Success.
 */
static usb_status_t USB_DeviceAudioRequest(class_handle_t handle, uint32_t event, void *param)
{
    usb_device_control_request_struct_t *request = (usb_device_control_request_struct_t *)param;
    usb_status_t error = kStatus_USB_Success;

    switch (event)
    {
        case USB_DEVICE_AUDIO_FU_GET_CUR_MUTE_CONTROL:${<code>
if(AudioVersion20){ </code>}$
            request->buffer = (uint8_t *)&s_UsbDeviceAudioGenerator->curMute20;
            request->length = sizeof(s_UsbDeviceAudioGenerator->curMute20);${<code>
}else{</code>}$
            request->buffer = &s_UsbDeviceAudioGenerator->curMute;
            request->length = sizeof(s_UsbDeviceAudioGenerator->curMute);${<code>
}</code>}$          
            break;
        case USB_DEVICE_AUDIO_FU_GET_CUR_VOLUME_CONTROL:${<code>
if(AudioVersion20){ </code>}$
            request->buffer = (uint8_t *)&s_UsbDeviceAudioGenerator->curVolume20;
            request->length = sizeof(s_UsbDeviceAudioGenerator->curVolume20);${<code>
}else{</code>}$
            request->buffer = s_UsbDeviceAudioGenerator->curVolume;
            request->length = sizeof(s_UsbDeviceAudioGenerator->curVolume);${<code>
}</code>}$           
            break;
        case USB_DEVICE_AUDIO_FU_GET_CUR_BASS_CONTROL:
            request->buffer = &s_UsbDeviceAudioGenerator->curBass;
            request->length = sizeof(s_UsbDeviceAudioGenerator->curBass);
            break;
        case USB_DEVICE_AUDIO_FU_GET_CUR_MID_CONTROL:
            request->buffer = &s_UsbDeviceAudioGenerator->curMid;
            request->length = sizeof(s_UsbDeviceAudioGenerator->curMid);
            break;
        case USB_DEVICE_AUDIO_FU_GET_CUR_TREBLE_CONTROL:
            request->buffer = &s_UsbDeviceAudioGenerator->curTreble;
            request->length = sizeof(s_UsbDeviceAudioGenerator->curTreble);
            break;
        case USB_DEVICE_AUDIO_FU_GET_CUR_AUTOMATIC_GAIN_CONTROL:
            request->buffer = &s_UsbDeviceAudioGenerator->curAutomaticGain;
            request->length = sizeof(s_UsbDeviceAudioGenerator->curAutomaticGain);
            break;
        case USB_DEVICE_AUDIO_FU_GET_CUR_DELAY_CONTROL:
            request->buffer = s_UsbDeviceAudioGenerator->curDelay;
            request->length = sizeof(s_UsbDeviceAudioGenerator->curDelay);
            break;
        case USB_DEVICE_AUDIO_FU_GET_MIN_VOLUME_CONTROL:
            request->buffer = s_UsbDeviceAudioGenerator->minVolume;
            request->length = sizeof(s_UsbDeviceAudioGenerator->minVolume);
            break;
        case USB_DEVICE_AUDIO_FU_GET_MIN_BASS_CONTROL:
            request->buffer = &s_UsbDeviceAudioGenerator->minBass;
            request->length = sizeof(s_UsbDeviceAudioGenerator->minBass);
            break;
        case USB_DEVICE_AUDIO_FU_GET_MIN_MID_CONTROL:
            request->buffer = &s_UsbDeviceAudioGenerator->minMid;
            request->length = sizeof(s_UsbDeviceAudioGenerator->minMid);
            break;
        case USB_DEVICE_AUDIO_FU_GET_MIN_TREBLE_CONTROL:
            request->buffer = &s_UsbDeviceAudioGenerator->minTreble;
            request->length = sizeof(s_UsbDeviceAudioGenerator->minTreble);
            break;
        case USB_DEVICE_AUDIO_FU_GET_MIN_DELAY_CONTROL:
            request->buffer = s_UsbDeviceAudioGenerator->minDelay;
            request->length = sizeof(s_UsbDeviceAudioGenerator->minDelay);
            break;
        case USB_DEVICE_AUDIO_FU_GET_MAX_VOLUME_CONTROL:
            request->buffer = s_UsbDeviceAudioGenerator->maxVolume;
            request->length = sizeof(s_UsbDeviceAudioGenerator->maxVolume);
            break;
        case USB_DEVICE_AUDIO_FU_GET_MAX_BASS_CONTROL:
            request->buffer = &s_UsbDeviceAudioGenerator->maxBass;
            request->length = sizeof(s_UsbDeviceAudioGenerator->maxBass);
            break;
        case USB_DEVICE_AUDIO_FU_GET_MAX_MID_CONTROL:
            request->buffer = &s_UsbDeviceAudioGenerator->maxMid;
            request->length = sizeof(s_UsbDeviceAudioGenerator->maxMid);
            break;
        case USB_DEVICE_AUDIO_FU_GET_MAX_TREBLE_CONTROL:
            request->buffer = &s_UsbDeviceAudioGenerator->maxTreble;
            request->length = sizeof(s_UsbDeviceAudioGenerator->maxTreble);
            break;
        case USB_DEVICE_AUDIO_FU_GET_MAX_DELAY_CONTROL:
            request->buffer = s_UsbDeviceAudioGenerator->maxDelay;
            request->length = sizeof(s_UsbDeviceAudioGenerator->maxDelay);
            break;
        case USB_DEVICE_AUDIO_FU_GET_RES_VOLUME_CONTROL:
            request->buffer = s_UsbDeviceAudioGenerator->resVolume;
            request->length = sizeof(s_UsbDeviceAudioGenerator->resVolume);
            break;
        case USB_DEVICE_AUDIO_FU_GET_RES_BASS_CONTROL:
            request->buffer = &s_UsbDeviceAudioGenerator->resBass;
            request->length = sizeof(s_UsbDeviceAudioGenerator->resBass);
            break;
        case USB_DEVICE_AUDIO_FU_GET_RES_MID_CONTROL:
            request->buffer = &s_UsbDeviceAudioGenerator->resMid;
            request->length = sizeof(s_UsbDeviceAudioGenerator->resMid);
            break;
        case USB_DEVICE_AUDIO_FU_GET_RES_TREBLE_CONTROL:
            request->buffer = &s_UsbDeviceAudioGenerator->resTreble;
            request->length = sizeof(s_UsbDeviceAudioGenerator->resTreble);
            break;
        case USB_DEVICE_AUDIO_FU_GET_RES_DELAY_CONTROL:
            request->buffer = s_UsbDeviceAudioGenerator->resDelay;
            request->length = sizeof(s_UsbDeviceAudioGenerator->resDelay);
            break;${<code>
if(AudioVersion20){ </code>}$
        case USB_DEVICE_AUDIO_CS_GET_CUR_SAMPLING_FREQ_CONTROL:
            request->buffer = (uint8_t *)&s_UsbDeviceAudioGenerator->curSampleFrequency;
            request->length = sizeof(s_UsbDeviceAudioGenerator->curSampleFrequency);
            break;
        case USB_DEVICE_AUDIO_CS_SET_CUR_SAMPLING_FREQ_CONTROL:
            if (request->isSetup == 1U)
            {
                request->buffer = (uint8_t *)&s_UsbDeviceAudioGenerator->curSampleFrequency;
            }
            break;
        case USB_DEVICE_AUDIO_CS_GET_CUR_CLOCK_VALID_CONTROL:
            request->buffer = &s_UsbDeviceAudioGenerator->curClockValid;
            request->length = sizeof(s_UsbDeviceAudioGenerator->curClockValid);
            break;
        case USB_DEVICE_AUDIO_CS_SET_CUR_CLOCK_VALID_CONTROL:
            if (request->isSetup == 1U)
            {
                request->buffer = &s_UsbDeviceAudioGenerator->curClockValid;
            }
            break;
        case USB_DEVICE_AUDIO_CS_GET_RANGE_SAMPLING_FREQ_CONTROL:
            request->buffer = (uint8_t *)&s_UsbDeviceAudioGenerator->freqControlRange;
            request->length = sizeof(s_UsbDeviceAudioGenerator->freqControlRange);
            break;
        case USB_DEVICE_AUDIO_FU_GET_RANGE_VOLUME_CONTROL:
            request->buffer = (uint8_t *)&s_UsbDeviceAudioGenerator->volumeControlRange;
            request->length = sizeof(s_UsbDeviceAudioGenerator->volumeControlRange);
            break;${<code>
}else{</code>}$
        case USB_DEVICE_AUDIO_EP_GET_CUR_SAMPLING_FREQ_CONTROL:
            request->buffer = s_UsbDeviceAudioGenerator->curSamplingFrequency;
            request->length = sizeof(s_UsbDeviceAudioGenerator->curSamplingFrequency);
            break;
        case USB_DEVICE_AUDIO_EP_GET_MIN_SAMPLING_FREQ_CONTROL:
            request->buffer = s_UsbDeviceAudioGenerator->minSamplingFrequency;
            request->length = sizeof(s_UsbDeviceAudioGenerator->minSamplingFrequency);
            break;
        case USB_DEVICE_AUDIO_EP_GET_MAX_SAMPLING_FREQ_CONTROL:
            request->buffer = s_UsbDeviceAudioGenerator->maxSamplingFrequency;
            request->length = sizeof(s_UsbDeviceAudioGenerator->maxSamplingFrequency);
            break;
        case USB_DEVICE_AUDIO_EP_GET_RES_SAMPLING_FREQ_CONTROL:
            request->buffer = s_UsbDeviceAudioGenerator->resSamplingFrequency;
            request->length = sizeof(s_UsbDeviceAudioGenerator->resSamplingFrequency);
            break;
        case USB_DEVICE_AUDIO_EP_SET_CUR_SAMPLING_FREQ_CONTROL:
            if (request->isSetup == 1U)
            {
                request->buffer = s_UsbDeviceAudioGenerator->curSamplingFrequency;
            }
            break;
        case USB_DEVICE_AUDIO_EP_SET_RES_SAMPLING_FREQ_CONTROL:
            if (request->isSetup == 1U)
            {
                request->buffer = s_UsbDeviceAudioGenerator->resSamplingFrequency;
            }
            break;
        case USB_DEVICE_AUDIO_EP_SET_MAX_SAMPLING_FREQ_CONTROL:
            if (request->isSetup == 1U)
            {
                request->buffer = s_UsbDeviceAudioGenerator->maxSamplingFrequency;
            }
            break;
        case USB_DEVICE_AUDIO_EP_SET_MIN_SAMPLING_FREQ_CONTROL:
            if (request->isSetup == 1U)
            {
                request->buffer = s_UsbDeviceAudioGenerator->minSamplingFrequency;
            }
            break;${<code>
}</code>}$
        case USB_DEVICE_AUDIO_FU_SET_CUR_VOLUME_CONTROL:${<code>
if(AudioVersion20){ </code>}$
            if (request->isSetup == 1U)
            {
                request->buffer = s_UsbDeviceAudioGenerator->curVolume20;
            }
            else
            {
                uint16_t volume = (uint16_t)((uint16_t)s_UsbDeviceAudioGenerator->curVolume20[1] << 8U);
                volume |= (uint8_t)(s_UsbDeviceAudioGenerator->curVolume20[0]);
            }${<code>
}else{</code>}$
            if (request->isSetup == 1U)
            {
                request->buffer = s_UsbDeviceAudioGenerator->curVolume;
            }
            else
            {
                uint16_t volume = (uint16_t)((uint16_t)s_UsbDeviceAudioGenerator->curVolume[1] << 8U);
                volume |= (uint8_t)(s_UsbDeviceAudioGenerator->curVolume[0]);
            }${<code>
}</code>}$
            break;
        case USB_DEVICE_AUDIO_FU_SET_CUR_MUTE_CONTROL:
            if (request->isSetup == 1U)
            {
                request->buffer = &s_UsbDeviceAudioGenerator->curMute;
            }
            else
            {
            }
            break;
        case USB_DEVICE_AUDIO_FU_SET_CUR_BASS_CONTROL:
            if (request->isSetup == 1U)
            {
                request->buffer = &s_UsbDeviceAudioGenerator->curBass;
            }
            break;
        case USB_DEVICE_AUDIO_FU_SET_CUR_MID_CONTROL:
            if (request->isSetup == 1U)
            {
                request->buffer = &s_UsbDeviceAudioGenerator->curMid;
            }
            break;
        case USB_DEVICE_AUDIO_FU_SET_CUR_TREBLE_CONTROL:
            if (request->isSetup == 1U)
            {
                request->buffer = &s_UsbDeviceAudioGenerator->curTreble;
            }
            break;
        case USB_DEVICE_AUDIO_FU_SET_CUR_AUTOMATIC_GAIN_CONTROL:
            if (request->isSetup == 1U)
            {
                request->buffer = &s_UsbDeviceAudioGenerator->curAutomaticGain;
            }
            break;
        case USB_DEVICE_AUDIO_FU_SET_CUR_DELAY_CONTROL:
            if (request->isSetup == 1U)
            {
                request->buffer = s_UsbDeviceAudioGenerator->curDelay;
            }
            break;
        case USB_DEVICE_AUDIO_FU_SET_MIN_VOLUME_CONTROL:
            if (request->isSetup == 1U)
            {
                request->buffer = s_UsbDeviceAudioGenerator->minVolume;
            }
            break;
        case USB_DEVICE_AUDIO_FU_SET_MIN_BASS_CONTROL:
            if (request->isSetup == 1U)
            {
                request->buffer = &s_UsbDeviceAudioGenerator->minBass;
            }
            break;
        case USB_DEVICE_AUDIO_FU_SET_MIN_MID_CONTROL:
            if (request->isSetup == 1U)
            {
                request->buffer = &s_UsbDeviceAudioGenerator->minMid;
            }
            break;
        case USB_DEVICE_AUDIO_FU_SET_MIN_TREBLE_CONTROL:
            if (request->isSetup == 1U)
            {
                request->buffer = &s_UsbDeviceAudioGenerator->minTreble;
            }
            break;
        case USB_DEVICE_AUDIO_FU_SET_MIN_DELAY_CONTROL:
            if (request->isSetup == 1U)
            {
                request->buffer = s_UsbDeviceAudioGenerator->minDelay;
            }
            break;
        case USB_DEVICE_AUDIO_FU_SET_MAX_VOLUME_CONTROL:
            if (request->isSetup == 1U)
            {
                request->buffer = s_UsbDeviceAudioGenerator->maxVolume;
            }
            break;
        case USB_DEVICE_AUDIO_FU_SET_MAX_BASS_CONTROL:
            if (request->isSetup == 1U)
            {
                request->buffer = &s_UsbDeviceAudioGenerator->maxBass;
            }
            break;
        case USB_DEVICE_AUDIO_FU_SET_MAX_MID_CONTROL:
            if (request->isSetup == 1U)
            {
                request->buffer = &s_UsbDeviceAudioGenerator->maxMid;
            }
            break;
        case USB_DEVICE_AUDIO_FU_SET_MAX_TREBLE_CONTROL:
            if (request->isSetup == 1U)
            {
                request->buffer = &s_UsbDeviceAudioGenerator->maxTreble;
            }
            break;
        case USB_DEVICE_AUDIO_FU_SET_MAX_DELAY_CONTROL:

            if (request->isSetup == 1U)
            {
                request->buffer = s_UsbDeviceAudioGenerator->maxDelay;
            }
            break;
        case USB_DEVICE_AUDIO_FU_SET_RES_VOLUME_CONTROL:
            if (request->isSetup == 1U)
            {
                request->buffer = s_UsbDeviceAudioGenerator->resVolume;
            }
            break;
        case USB_DEVICE_AUDIO_FU_SET_RES_BASS_CONTROL:
            if (request->isSetup == 1U)
            {
                request->buffer = &s_UsbDeviceAudioGenerator->resBass;
            }
            break;
        case USB_DEVICE_AUDIO_FU_SET_RES_MID_CONTROL:
            if (request->isSetup == 1U)
            {
                request->buffer = &s_UsbDeviceAudioGenerator->resMid;
            }
            break;
        case USB_DEVICE_AUDIO_FU_SET_RES_TREBLE_CONTROL:
            if (request->isSetup == 1U)
            {
                request->buffer = &s_UsbDeviceAudioGenerator->resTreble;
            }
            break;
        case USB_DEVICE_AUDIO_FU_SET_RES_DELAY_CONTROL:
            if (request->isSetup == 1U)
            {
                request->buffer = s_UsbDeviceAudioGenerator->resDelay;
            }
            break;
        default:
            error = kStatus_USB_InvalidRequest;
            break;
    }
    return error;
}

/*!
 * @brief Audio class specific callback function.
 *
 * This function handles the Audio class specific requests.
 *
 * @param handle		  The Audio class handle.
 * @param event 		  The Audio class event type.
 * @param param 		  The parameter of the class specific request.
 *
 * @return A USB error code or kStatus_USB_Success.
 */
usb_status_t ${USB_AudioControl_Callback_Name}$(class_handle_t handle, uint32_t event, void *param)
{
    usb_status_t error = kStatus_USB_Error;
    usb_device_endpoint_callback_message_struct_t *ep_cb_param;
    ep_cb_param = (usb_device_endpoint_callback_message_struct_t *)param;

    switch (event)
    {
        case kUSB_DeviceAudioEventStreamSendResponse:
            if ((s_UsbDeviceComposite->attach) &&
                (ep_cb_param->length == ((USB_SPEED_HIGH == s_UsbDeviceComposite->speed) ? HS_ISO_IN_ENDP_PACKET_SIZE :
                                                                                      FS_ISO_IN_ENDP_PACKET_SIZE)))
            {
                USB_AudioRecorderGetBuffer(s_wavBuff, (USB_SPEED_HIGH == s_UsbDeviceComposite->speed) ?
                                                          HS_ISO_IN_ENDP_PACKET_SIZE :
                                                          FS_ISO_IN_ENDP_PACKET_SIZE);
                error = USB_DeviceAudioSend(handle, USB_AUDIO_STREAM_ENDPOINT, s_wavBuff,
                                            (USB_SPEED_HIGH == s_UsbDeviceComposite->speed) ? HS_ISO_IN_ENDP_PACKET_SIZE :
                                                                                         FS_ISO_IN_ENDP_PACKET_SIZE);
            }
            break;

        default:
            if (param && (event > 0xFFU))
            {
                error = USB_DeviceAudioRequest(handle, event, param);
            }
            break;
    }
    return error;
}

/*!
 * @brief Set configuration event callback function of the audio control interface. 
 *
 * Empty implementation of the control configuration set (kUSB_DeviceEventSetConfiguration event).
 *
 * @return None.
 */
usb_status_t ${USB_AudioControl_SetConfiguration_Callback_Name}$(class_handle_t handle, uint8_t configuration_index) {
	return kStatus_USB_Success;
}

/*!
 * @brief Set interface event callback function of the audio control interface. 
 *
 * Empty implementation of the audio control interface set - there are not any alternate interfaces defined.
 *
 * @return None.
 */
usb_status_t ${USB_AudioControl_SetInterface_Callback_Name}$(class_handle_t handle, uint8_t alternateSetting) {
    return kStatus_USB_Success;
}

/*!
 * @brief Set interface event callback function of the audio streaming 
 *
 * Set interface event callbacks implementation of the audio streaming kUSB_DeviceEventSetInterface event.
 *
 * @return None.
 */
usb_status_t ${USB_AudioStreaming_SetInterface_Callback_Name}$(class_handle_t handle, uint8_t alternateSetting) {
    if (s_UsbDeviceComposite->currentInterfaceAlternateSetting[${USB_INTERFACE_AUDIO_CONTROL_INDEX_VALUE}$] != alternateSetting)
    {
        if (alternateSetting == 1U)
        {
             USB_AudioRecorderGetBuffer(s_wavBuff, (USB_SPEED_HIGH == s_UsbDeviceComposite->speed) ?
                                                                  HS_ISO_IN_ENDP_PACKET_SIZE :
                                                                  FS_ISO_IN_ENDP_PACKET_SIZE);
            USB_DeviceAudioSend(s_UsbDeviceComposite->${interfaceAudioControlHandle}$, USB_AUDIO_STREAM_ENDPOINT, s_wavBuff,
                                            (USB_SPEED_HIGH == s_UsbDeviceComposite->speed) ? HS_ISO_IN_ENDP_PACKET_SIZE :
                                                                                              FS_ISO_IN_ENDP_PACKET_SIZE);                                                                                         
        }
    }
    return kStatus_USB_Success;
}

/*!
 * @brief Bus reset event callback function` 
 *
 * Bus reset event callbacks implementation of the USB_DeviceCallback event.
 *
 * @return None.
 */
void ${USB_AudioControl_BusReset_Callback_Name}$(usb_device_composite_struct_t *deviceComposite) {
    return;
}

/*!
 * @brief Audio control interface` initialization function.
 *
 * This function initializes the audio generator demo application.
 *
 * @return None.
 */
usb_status_t ${USB_AudioControlInit_Callback_Name}$(usb_device_composite_struct_t *deviceComposite)
{
    s_UsbDeviceComposite = deviceComposite;
    return kStatus_USB_Success;
}