#include "usb_host_config.h"
#include "usb_host.h"
#include "fsl_device_registers.h"${<code>
if (cicCount) {
</code>}$
#include "usb_host_cdc.h"
${<code>
}
if (hidCount) {
</code>}$
#include "usb_host_hid.h"
${<code>
}
interfaces.forEach(function(interface) {
    if (!isSubordinateInterface(interface, interfaces)) {</code>}$
#include "usb_host_${interface.idSnakeCase.toLowerCase()}$.h"${<code>
    }
});</code>}$
#include "fsl_common.h"
#if (defined(FSL_FEATURE_SOC_SYSMPU_COUNT) && (FSL_FEATURE_SOC_SYSMPU_COUNT > 0U))
#include "fsl_sysmpu.h"
#endif /* FSL_FEATURE_SOC_SYSMPU_COUNT */
#include "usb_host_app.h"

#if ((!USB_HOST_CONFIG_KHCI) && (!USB_HOST_CONFIG_EHCI) && (!USB_HOST_CONFIG_OHCI) && (!USB_HOST_CONFIG_IP3516HS))
#error Please enable USB_HOST_CONFIG_KHCI, USB_HOST_CONFIG_EHCI, USB_HOST_CONFIG_OHCI, or USB_HOST_CONFIG_IP3516HS in file usb_host_config.
#endif

#include "pin_mux.h"
#if ((defined(FSL_FEATURE_SOC_USBPHY_COUNT) && (FSL_FEATURE_SOC_USBPHY_COUNT > 0U)) && \\
    ((defined(USB_HOST_CONFIG_EHCI) && (USB_HOST_CONFIG_EHCI > 0U)) || \\
     (defined(USB_HOST_CONFIG_IP3516HS) && (USB_HOST_CONFIG_IP3516HS > 0U))))
#include "usb_phy.h"
#endif
#include "clock_config.h"

#if ((defined(USB_HOST_CONFIG_OHCI) && (USB_HOST_CONFIG_OHCI > 0U)) || \\
      defined(USB_HOST_CONFIG_IP3516HS) && (USB_HOST_CONFIG_IP3516HS > 0U))
#include "fsl_power.h"
#endif
/*******************************************************************************
 * Definitions
 ******************************************************************************/
 ${<code>/* Used only for Kinetis and i.Mx EHCI controllers */
if (controllerNameUpperCase === "EHCI") {</code>}$
/* USB PHY configuration */
#ifndef BOARD_USB_PHY_D_CAL
#define BOARD_USB_PHY_D_CAL (0x0CU)
#endif
#ifndef BOARD_USB_PHY_TXCAL45DP
#define BOARD_USB_PHY_TXCAL45DP (0x06U)
#endif
#ifndef BOARD_USB_PHY_TXCAL45DM
#define BOARD_USB_PHY_TXCAL45DM (0x06U)
#endif${<code>
}
</code>}$
/*******************************************************************************
 * Prototypes
 ******************************************************************************/
/*!
 * @brief host callback function.
 *
 * device attach/detach callback function.
 *
 * @param deviceHandle          device handle.
 * @param configurationHandle   attached device configuration descriptor information.
 * @param eventCode             callback event code, please reference to enumeration host_event_t.
 *
 * @retval kStatus_USB_Success              The host is initialized successfully.
 * @retval kStatus_USB_NotSupported         The application doesn\'t support the configuration.
 */
static usb_status_t USB_HostEvent(usb_device_handle deviceHandle,
                                  usb_host_configuration_handle configurationHandle,
                                  uint32_t eventCode);

void USB_HostClockInit(void);
void USB_HostIsrEnable(void);
void USB_HostTaskFn(void *hostHandle);

/*******************************************************************************
 * Variables
 ******************************************************************************/

usb_host_handle g_HostHandle;

/*******************************************************************************
 * Code
 ******************************************************************************/

 /*!
 * @brief MRT0 interrupt service routine
 */
void ${irqHandlerName}$(void)
{
    USB_Host${controllerNameCamelCase}$IsrFunction(g_HostHandle);
}

/*!
 * @brief Initializes USB specific setting that was not set by the Clocks tool.
 */
void USB_HostClockInit(void)
{${<code>
if (mk64 === true) {
    // This MCU does not need any additional setting
} else if (kinetis === true) {
</code>}$
#if defined(USB_HOST_CONFIG_EHCI) && (USB_HOST_CONFIG_EHCI > 0U)
    usb_phy_config_struct_t phyConfig = {
        BOARD_USB_PHY_D_CAL, BOARD_USB_PHY_TXCAL45DP, BOARD_USB_PHY_TXCAL45DM,
    };
    uint32_t notUsed = 0;
    
    CLOCK_EnableUsbhs0Clock(kCLOCK_UsbSrcUnused, notUsed);
    USB_EhciPhyInit(USB_HOST_CONTROLLER_ID, notUsed, &phyConfig);
#endif
#if defined(USB_HOST_CONFIG_KHCI) && (USB_HOST_CONFIG_KHCI > 0U)
    SystemCoreClockUpdate();
    CLOCK_EnableUsbfs0Clock(kCLOCK_UsbSrcIrc48M, 48000000U);
/*
 * If the SOC has USB KHCI dedicated RAM, the RAM memory needs to be clear after
 * the KHCI clock is enabled. When the demo uses USB EHCI IP, the USB KHCI dedicated
 * RAM can not be used and the memory can\'t be accessed.
 */
#if (defined(FSL_FEATURE_USB_KHCI_USB_RAM) && (FSL_FEATURE_USB_KHCI_USB_RAM > 0U))
#if (defined(FSL_FEATURE_USB_KHCI_USB_RAM_BASE_ADDRESS) && (FSL_FEATURE_USB_KHCI_USB_RAM_BASE_ADDRESS > 0U))
    for (int i = 0; i < FSL_FEATURE_USB_KHCI_USB_RAM; i++)
    {
        ((uint8_t *)FSL_FEATURE_USB_KHCI_USB_RAM_BASE_ADDRESS)[i] = 0x00U;
    }
#endif /* FSL_FEATURE_USB_KHCI_USB_RAM_BASE_ADDRESS */
#endif /* FSL_FEATURE_USB_KHCI_USB_RAM */
#endif${<code>
} else if (iMxRT1xxx === true) {
</code>}$
    usb_phy_config_struct_t phyConfig = {
        BOARD_USB_PHY_D_CAL, BOARD_USB_PHY_TXCAL45DP, BOARD_USB_PHY_TXCAL45DM,
    };
    uint32_t notUsed = 0;
${<code>
    if (iMxRTUsbCount === 2) {</code>}$
    if (USB_HOST_CONTROLLER_ID == kUSB_ControllerEhci0)
    {
        CLOCK_EnableUsbhs0PhyPllClock(kCLOCK_Usbphy480M, 480000000U);
        CLOCK_EnableUsbhs0Clock(kCLOCK_Usb480M, 480000000U);
    }
    else
    {
        CLOCK_EnableUsbhs1PhyPllClock(kCLOCK_Usbphy480M, 480000000U);
        CLOCK_EnableUsbhs1Clock(kCLOCK_Usb480M, 480000000U);
    }${<code>
    } else {</code>}$
    CLOCK_EnableUsbhs0PhyPllClock(kCLOCK_Usbphy480M, 480000000U);
    CLOCK_EnableUsbhs0Clock(kCLOCK_Usb480M, 480000000U);${<code>
    }
    </code>}$

    USB_EhciPhyInit(USB_HOST_CONTROLLER_ID, notUsed, &phyConfig);${<code>
} else if (iMxRT6xx === true) {
</code>}$
    RESET_PeripheralReset(kUSBHS_PHY_RST_SHIFT_RSTn);
    RESET_PeripheralReset(kUSBHS_DEVICE_RST_SHIFT_RSTn);
    RESET_PeripheralReset(kUSBHS_HOST_RST_SHIFT_RSTn);
    RESET_PeripheralReset(kUSBHS_SRAM_RST_SHIFT_RSTn);

    CLOCK_EnableClock(kCLOCK_UsbhsPhy);
    CLOCK_EnableClock(kCLOCK_UsbhsHost);
    CLOCK_EnableClock(kCLOCK_UsbhsSram);

    POWER_DisablePD(kPDRUNCFG_APD_USBHS_SRAM);
	POWER_DisablePD(kPDRUNCFG_PPD_USBHS_SRAM);
	POWER_ApplyPD();

    USBPHY->CTRL_CLR = USBPHY_CTRL_SFTRST_MASK;

    uint32_t delay = 100000;
    while (delay--)
    {
        __NOP();
    }

	uint32_t pllDivSelValue = 0;
	uint32_t inputFrequency = CLOCK_GetFreq(kCLOCK_UsbClk);
    switch(inputFrequency) {
    case 480000000/13:
    	pllDivSelValue = 0;
    	break;
    case 32000000:
    	pllDivSelValue = 1;
    	break;
    case 30000000:
    	pllDivSelValue = 2;
    	break;
    case 24000000:
    	pllDivSelValue = 3;
    	break;
    case 21818200:
    	pllDivSelValue = 4;
    	break;
    case 19200000:
    	pllDivSelValue = 5;
    	break;
    case 16000000:
    	pllDivSelValue = 6;
    	break;
    case 2000000:
    	pllDivSelValue = 7;
    	break;
    default:
    	usb_echo("Unsupported input frequency (%lu) for USB PHY.\\r\\n", inputFrequency);
    }

    USBPHY->PLL_SIC_SET = (USBPHY_PLL_SIC_PLL_POWER(1) | USBPHY_PLL_SIC_PLL_REG_ENABLE_MASK);
    USBPHY->PLL_SIC     = (USBPHY->PLL_SIC & ~(USBPHY_PLL_SIC_PLL_DIV_SEL_MASK)) | USBPHY_PLL_SIC_PLL_DIV_SEL(pllDivSelValue);
    USBPHY->PLL_SIC_CLR = USBPHY_PLL_SIC_PLL_BYPASS_MASK;
    USBPHY->PLL_SIC_SET = (USBPHY_PLL_SIC_PLL_EN_USB_CLKS_MASK);

    USBPHY->CTRL_CLR = USBPHY_CTRL_CLR_CLKGATE_MASK;
    USBPHY->PWD_SET  = 0x0;

    while (!(USBPHY->PLL_SIC & USBPHY_PLL_SIC_PLL_LOCK_MASK))
    {
    }

    uint32_t not_used = 0;
	USB_EhciPhyInit(USB_HOST_CONTROLLER_ID, not_used, NULL);

    CLOCK_EnableClock(kCLOCK_UsbhsDevice);
    USBHSH->PORTMODE &= ~USBHSH_PORTMODE_DEV_ENABLE_MASK;
    while (SYSCTL0->USBCLKSTAT & SYSCTL0_USBCLKSTAT_DEV_NEED_CLKST_MASK)
    {
        __ASM("nop");
    }

    CLOCK_DisableClock(kCLOCK_UsbhsDevice);

    CLOCK_EnableClock(kCLOCK_UsbhsDevice);
    USBHSH->PORTMODE &= ~USBHSH_PORTMODE_DEV_ENABLE_MASK;
    while (SYSCTL0->USBCLKSTAT & SYSCTL0_USBCLKSTAT_DEV_NEED_CLKST_MASK)
    {
        __ASM("nop");
    }

    CLOCK_DisableClock(kCLOCK_UsbhsDevice);

#if defined(FSL_FEATURE_USBHSH_USB_RAM) && (FSL_FEATURE_USBHSH_USB_RAM)
    for (int i = 0; i < FSL_FEATURE_USBHSH_USB_RAM; i++)
    {
        ((uint8_t *)FSL_FEATURE_USBHSH_USB_RAM_BASE_ADDRESS)[i] = 0x00U;
    }
#endif${<code>
} else if (lpc54xxx === true || lpc55xx === true) {
</code>}$
#if ((defined USB_HOST_CONFIG_OHCI) && (USB_HOST_CONFIG_OHCI > 0U))
    /*< Turn on USB Phy */
    POWER_DisablePD(kPDRUNCFG_PD_USB0_PHY);
    
    uint32_t delay;
    delay = 100000;
    while (delay--)
    {
        __ASM("nop");
    }
    
    CLOCK_EnableClock(kCLOCK_Usbhmr0);
    CLOCK_EnableClock(kCLOCK_Usbhsl0);
    CLOCK_EnableClock(kCLOCK_UsbRam1);
    
#if ((defined FSL_FEATURE_USBFSH_USB_RAM) && (FSL_FEATURE_USBFSH_USB_RAM > 0U))
    for (int i = 0; i < (FSL_FEATURE_USBFSH_USB_RAM >> 2); i++)
    {
        ((uint32_t *)FSL_FEATURE_USBFSH_USB_RAM_BASE_ADDRESS)[i] = 0U;
    }
#endif
#endif /* USB_HOST_CONFIG_OHCI */

#if ((defined USB_HOST_CONFIG_IP3516HS) && (USB_HOST_CONFIG_IP3516HS > 0U))
    /* Turn on power for USB PHY */
    POWER_DisablePD(kPDRUNCFG_PD_USB1_PHY);${<code>
    if (lpc55xx === true) {
</code>}$
	POWER_DisablePD(kPDRUNCFG_PD_LDOUSBHS);${<code>
    }
</code>}$

    uint32_t delay;
    delay = 100000;
    while (delay--)
    {
        __ASM("nop");
    }
    
    /* Enable USBh1 and USB1RAM */
    CLOCK_EnableClock(kCLOCK_Usbh1);
    CLOCK_EnableClock(kCLOCK_UsbRam1);${<code>
    if (lpc55xx === true) {
</code>}$
	CLOCK_EnableClock(kCLOCK_Usb1Clk);

	uint32_t pllDivSelValue = 0;
	uint32_t inputFrequency = CLOCK_GetUsb1ClkFreq();
    switch(CLOCK_GetUsb1ClkFreq()) {
    case 32000000:
    	pllDivSelValue = 0;
    	break;
    case 30000000:
    	pllDivSelValue = 1;
    	break;
    case 24000000:
    	pllDivSelValue = 2;
    	break;
    case 20000000:
    	pllDivSelValue = 4;
    	break;
    case 19200000:
    	pllDivSelValue = 5;
    	break;
    case 16000000:
    	pllDivSelValue = 6;
    	break;
    case 12000000:
    	pllDivSelValue = 7;
    	break;
    default:
    	usb_echo("Unsupported input frequency (%lu) for USB PHY.\\r\\n", inputFrequency);
    }

    USBPHY->CTRL_CLR    = USBPHY_CTRL_SFTRST_MASK;
    USBPHY->PLL_SIC     = (USBPHY->PLL_SIC & ~USBPHY_PLL_SIC_PLL_DIV_SEL(0x7)) | USBPHY_PLL_SIC_PLL_DIV_SEL(pllDivSelValue);
    USBPHY->PLL_SIC_SET = USBPHY_PLL_SIC_SET_PLL_REG_ENABLE_MASK;
    USBPHY->PLL_SIC_CLR = (1 << 16);
    USBPHY->PLL_SIC_SET = USBPHY_PLL_SIC_SET_PLL_POWER_MASK;
    USBPHY->PLL_SIC_SET = USBPHY_PLL_SIC_SET_PLL_EN_USB_CLKS_MASK;

    USBPHY->CTRL_CLR = USBPHY_CTRL_CLR_CLKGATE_MASK;
    USBPHY->PWD_SET  = 0x0;

    uint32_t not_used = 0;
    USB_EhciPhyInit(USB_HOST_CONTROLLER_ID, not_used, NULL);${<code>
    }
</code>}$
    
#if ((defined FSL_FEATURE_USBHSH_USB_RAM) && (FSL_FEATURE_USBHSH_USB_RAM > 0U))
    for (int i = 0; i < (FSL_FEATURE_USBHSH_USB_RAM >> 2); i++)
    {
        ((uint32_t *)FSL_FEATURE_USBHSH_USB_RAM_BASE_ADDRESS)[i] = 0U;
    }
#endif
#endif /* USB_HOST_CONFIG_IP3511HS */${<code>
}
</code>}$
}

/*!
 * @brief Enables interrupt service routines for device.
 */
void USB_HostIsrEnable(void)
{
    uint8_t irqNumber;
#if ((defined USB_HOST_CONFIG_KHCI) && (USB_HOST_CONFIG_KHCI > 0U))
    IRQn_Type usbHOSTKhciIrq[] = USB_IRQS;
    irqNumber = usbHOSTKhciIrq[USB_HOST_CONTROLLER_ID - kUSB_ControllerKhci0];
#endif
#if ((defined USB_HOST_CONFIG_EHCI) && (USB_HOST_CONFIG_EHCI > 0U))
    IRQn_Type usbHOSTEhciIrq[] = USBHS_IRQS;
    irqNumber = usbHOSTEhciIrq[USB_HOST_CONTROLLER_ID - kUSB_ControllerEhci0];
#endif
#if ((defined USB_HOST_CONFIG_IP3516HS) && (USB_HOST_CONFIG_IP3516HS > 0U))
    IRQn_Type usbHsIrqs[] = USBHSH_IRQS;
    irqNumber = usbHsIrqs[USB_HOST_CONTROLLER_ID - kUSB_ControllerIp3516Hs0];
#endif
#if ((defined USB_HOST_CONFIG_OHCI) && (USB_HOST_CONFIG_OHCI > 0U))
    IRQn_Type usbHsIrqs[] = USBFSH_IRQS;
    irqNumber = usbHsIrqs[USB_HOST_CONTROLLER_ID - kUSB_ControllerOhci0];
#endif

/* Install isr, set priority, and enable IRQ. */
#if defined(__GIC_PRIO_BITS)
    GIC_SetPriority((IRQn_Type)irqNumber, USB_HOST_INTERRUPT_PRIORITY);
#else
    NVIC_SetPriority((IRQn_Type)irqNumber, USB_HOST_INTERRUPT_PRIORITY);
#endif
    EnableIRQ((IRQn_Type)irqNumber);
}

/*!
 * @brief USB host task. This function should be called periodically.
 *
 * @param *hostHandle Pointer to host handle.
 */
void USB_HostTaskFn(void *hostHandle)
{
#if defined(USB_HOST_CONFIG_KHCI) && (USB_HOST_CONFIG_KHCI > 0U)
    USB_HostKhciTaskFunction(hostHandle);
#endif
#if defined(USB_HOST_CONFIG_EHCI) && (USB_HOST_CONFIG_EHCI > 0U)
    USB_HostEhciTaskFunction(hostHandle);
#endif
#if ((defined USB_HOST_CONFIG_OHCI) && (USB_HOST_CONFIG_OHCI > 0U))
    USB_HostOhciTaskFunction(hostHandle);
#endif
#if ((defined USB_HOST_CONFIG_IP3516HS) && (USB_HOST_CONFIG_IP3516HS > 0U))
    USB_HostIp3516HsTaskFunction(hostHandle);
#endif
}

/*!
 * @brief USB isr function.
 */
static usb_status_t USB_HostEvent(usb_device_handle deviceHandle,
                                  usb_host_configuration_handle configurationHandle,
                                  uint32_t eventCode)
{${<code>
interfaces.forEach(function(interface) {
    if (!isSubordinateInterface(interface, interfaces)) {</code>}$
    usb_status_t status${interface.index}$;${<code>
    }
});</code>}$
    usb_status_t status = kStatus_USB_Success;
    /* Used to prevent from multiple processing of one interface;
     * e.g. when class/subclass/protocol is the same then one interface on a device is processed only by one interface on host */
    uint8_t processedInterfaces[USB_HOST_CONFIG_CONFIGURATION_MAX_INTERFACE] = {0};

    switch (eventCode & 0x0000FFFFU)
    {
        case kUSB_HostEventAttach:${<code>
var openingBracket = "";
var closingBracket = "";
var logicalAnd = "";
var interfacesNumber = 0;
interfaces.forEach(function(interface) {
    if (!isSubordinateInterface(interface, interfaces)) {
		interfacesNumber++;
	}
});

if (interfacesNumber > 1) {
    openingBracket = "(";
    closingBracket = ")";
    logicalAnd = " && ";
}
var statusCheck = "if " + openingBracket;
var statusIndex = 0;
interfaces.forEach(function(interface) {
    if (!isSubordinateInterface(interface, interfaces)) {
        if (statusIndex !== 0) {
            statusCheck += logicalAnd;
        }
        statusCheck += "(status" + interface.index + " == kStatus_USB_NotSupported)";</code>}$
            status${interface.index}$ = USB_Host${interface.idCamelCase}$Event(deviceHandle, configurationHandle, eventCode, processedInterfaces);${<code>
        ++statusIndex;
    }
});
statusCheck += closingBracket;</code>}$
            ${statusCheck}$
            {
                status = kStatus_USB_NotSupported;
            }
            break;

        case kUSB_HostEventNotSupported:
            usb_echo("Device not supported.\\r\\n");
            break;

        case kUSB_HostEventEnumerationDone:${<code>
statusCheck = "if " + openingBracket;
statusIndex = 0;
interfaces.forEach(function(interface) {
    if (!isSubordinateInterface(interface, interfaces)) {
        if (statusIndex !== 0) {
            statusCheck += logicalAnd;
        }
        statusCheck += "(status" + interface.index + " != kStatus_USB_Success)";</code>}$
            status${interface.index}$ = USB_Host${interface.idCamelCase}$Event(deviceHandle, configurationHandle, eventCode, processedInterfaces);${<code>
        ++statusIndex;
    }
});
statusCheck += closingBracket;</code>}$
            ${statusCheck}$
            {
                status = kStatus_USB_Error;
            }
            break;

        case kUSB_HostEventDetach:${<code>
statusCheck = "if " + openingBracket;
statusIndex = 0;
interfaces.forEach(function(interface) {
    if (!isSubordinateInterface(interface, interfaces)) {
        if (statusIndex !== 0) {
            statusCheck += logicalAnd;
        }
        statusCheck += "(status" + interface.index + " != kStatus_USB_Success)";</code>}$
            status${interface.index}$ = USB_Host${interface.idCamelCase}$Event(deviceHandle, configurationHandle, eventCode, processedInterfaces);${<code>
        ++statusIndex;
    }
});
statusCheck += closingBracket;</code>}$
            ${statusCheck}$
            {
                status = kStatus_USB_Error;
            }
            break;

        case kUSB_HostEventEnumerationFail:
            usb_echo("Enumeration failed\\r\\n");
            break;

        default:
            break;
    }
    return status;
}

/*!
 * @brief Completely initializes USB host.
 *
 * This function calls other USB host functions and directly initializes following: USB specific clocks, USB stack and host isr.
 *
 * @retval kStatus_USB_Success              The host is initialized successfully.
 * @retval kStatus_USB_InvalidHandle        The hostHandle is a NULL pointer.
 * @retval kStatus_USB_ControllerNotFound   Cannot find the controller according to the controller ID.
 * @retval kStatus_USB_AllocFail            Allocation memory fail.
 * @retval kStatus_USB_Error                Host mutex create fail; KHCI/EHCI mutex or KHCI/EHCI event create fail,
 *                                          or, KHCI/EHCI IP initialize fail.
 */
usb_status_t USB_HostApplicationInit(void)
{
    usb_status_t status;

    USB_HostClockInit();

#if ((defined FSL_FEATURE_SOC_SYSMPU_COUNT) && (FSL_FEATURE_SOC_SYSMPU_COUNT))
    SYSMPU_Enable(SYSMPU, 0);
#endif /* FSL_FEATURE_SOC_SYSMPU_COUNT */

    status = USB_HostInit(USB_HOST_CONTROLLER_ID, &g_HostHandle, USB_HostEvent);
    if (status != kStatus_USB_Success)
    {
        return status;
    } else {${<code>
interfaces.forEach(function(interface){
    if (!isSubordinateInterface(interface, interfaces)) {
</code>}$
        USB_Host${interface.idCamelCase}$Init();${<code>
    }
});</code>}$
    }
    USB_HostIsrEnable();

    return status;
}

/*!
 * @brief USB host tasks function.
 *
 * This function runs the tasks for USB host.
 *
 * @return None.
 */
void USB_HostTasks(void)
{
    USB_HostTaskFn(g_HostHandle);${<code>
interfaces.forEach(function(interface){
    if (!isSubordinateInterface(interface, interfaces)) {
</code>}$
    USB_Host${interface.idCamelCase}$Task();${<code>
    }
});</code>}$
}