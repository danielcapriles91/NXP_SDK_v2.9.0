#include "usb_device_config.h"
#include "usb.h"
#include "usb_device.h"

#include "usb_device_class.h"${<code>
if (hidCount) {
</code>}$
#include "usb_device_hid.h"
${<code>
}
</code>}$
#include "usb_device_ch9.h"
#include "usb_device_descriptor.h"
#if (defined(USB_DEVICE_CONFIG_CHARGER_DETECT) && (USB_DEVICE_CONFIG_CHARGER_DETECT > 0U)) && \\
    (defined(FSL_FEATURE_SOC_USBHSDCD_COUNT) && (FSL_FEATURE_SOC_USBHSDCD_COUNT > 0U))
#include "usb_hsdcd.h"
#elif (defined(USB_DEVICE_CONFIG_CHARGER_DETECT) && (USB_DEVICE_CONFIG_CHARGER_DETECT > 0U)) && \\
    (defined(FSL_FEATURE_SOC_USB_ANALOG_COUNT) && (FSL_FEATURE_SOC_USB_ANALOG_COUNT > 0U))
#include "usb_phydcd.h"
#endif

#include "usb_device_composite.h"${<code>
interfaces.forEach(function(interface) {
    switch (interface.implementation) {
        case "kImplementationDfu":
        // intentional fall-through
        case "kImplementationWeightScale":
        // intentional fall-through
        case "kImplementationPlainTextPrinter":
        // intentional fall-through
        case "kImplementationCicVcom":
        // intentional fall-through
        case "kImplementationAudioSpeaker":
        // intentional fall-through
        case "kImplementationAudioUnified":</code>}$
        
#include "usb_device_${interface.idLowerSnakeCase}$.h"${<code>
        break;
    }
});</code>}$

#if (defined(FSL_FEATURE_SOC_SYSMPU_COUNT) && (FSL_FEATURE_SOC_SYSMPU_COUNT > 0U))
#include "fsl_sysmpu.h"
#endif
#if ((defined(FSL_FEATURE_SOC_USBPHY_COUNT) && (FSL_FEATURE_SOC_USBPHY_COUNT > 0U)) && \\
    ((defined(USB_DEVICE_CONFIG_EHCI) && (USB_DEVICE_CONFIG_EHCI > 0U)) || \\
     (defined(USB_DEVICE_CONFIG_LPCIP3511HS) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))))
#include "usb_phy.h"
#endif
#if (defined(USB_DEVICE_CONFIG_LPCIP3511FS) && (USB_DEVICE_CONFIG_LPCIP3511FS > 0U))
#include "fsl_power.h"
#endif
#if (defined(USB_DEVICE_CONFIG_LPCIP3511HS) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))
#if !((defined FSL_FEATURE_SOC_USBPHY_COUNT) && (FSL_FEATURE_SOC_USBPHY_COUNT > 0U))
#include "fsl_mrt.h"
#endif
#include "fsl_power.h"
#endif${<code>
if (kinetis === true && suspendResume === true)
{
</code>}$
#include "fsl_smc.h"${<code>
}
if (remoteWakeup === true && suspendResume === true)
{
 </code>}$
#include "timer_queue.h"${<code>
}
</code>}$
#if (defined(USB_DEVICE_CONFIG_CHARGER_DETECT) && (USB_DEVICE_CONFIG_CHARGER_DETECT > 0U)) && \\
    (defined(FSL_FEATURE_SOC_USB_ANALOG_COUNT) && (FSL_FEATURE_SOC_USB_ANALOG_COUNT > 0U))
#include "fsl_adapter_timer.h"
#endif
/*******************************************************************************
 * Definitions
 ******************************************************************************/
#if (defined(USB_DEVICE_CONFIG_CHARGER_DETECT) && (USB_DEVICE_CONFIG_CHARGER_DETECT > 0U)) && \\
    (defined(FSL_FEATURE_SOC_USB_ANALOG_COUNT) && (FSL_FEATURE_SOC_USB_ANALOG_COUNT > 0U))
#define TIMER_SOURCE_CLOCK CLOCK_GetFreq(kCLOCK_OscClk)
#endif

#if (defined(USB_DEVICE_CONFIG_LPCIP3511HS) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U)) && \\\r\n	!(defined(FSL_FEATURE_SOC_USBPHY_COUNT) && (FSL_FEATURE_SOC_USBPHY_COUNT > 0U))
#define CHIRP_ISSUE_WORKAROUND_NEEDED 1
#else
#define CHIRP_ISSUE_WORKAROUND_NEEDED 0
#endif

${<code>/* Used only for Kinetis and i.Mx EHCI controllers */
if (controllerNameUpperCase === "EHCI") {</code>}$
/* USB PHY configuration */
#ifndef BOARD_USB_PHY_D_CAL
#define BOARD_USB_PHY_D_CAL (0x0CU)
#endif
#ifndef BOARD_USB_PHY_TXCAL45DP
#define BOARD_USB_PHY_TXCAL45DP (0x06U)
#endif
#ifndef BOARD_USB_PHY_TXCAL45DM
#define BOARD_USB_PHY_TXCAL45DM (0x06U)
#endif${<code>
}
if (lpc54xxx === true && suspendResume === true) {
</code>}$
#if ((defined(USB_DEVICE_CONFIG_LPCIP3511FS)) && (USB_DEVICE_CONFIG_LPCIP3511FS > 0U))
#define APP_EXCLUDE_FROM_DEEPSLEEP (SYSCON_PDRUNCFG_PDEN_SRAM0_MASK | SYSCON_PDSLEEPCFG_PDEN_SRAM1_2_3_MASK | SYSCON_PDSLEEPCFG_PDEN_USB_RAM_MASK | \\\r\nSYSCON_PDRUNCFG_PDEN_SRAMX_MASK | SYSCON_PDRUNCFG_PDEN_VD6_MASK)
#define APP_EXCLUDE_FROM_DEEPSLEEP_HIGH_BYTE 0U
#endif
#if ((defined(USB_DEVICE_CONFIG_LPCIP3511HS)) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))
#define APP_EXCLUDE_FROM_DEEPSLEEP  (SYSCON_PDRUNCFG_PDEN_SRAM0_MASK | SYSCON_PDSLEEPCFG_PDEN_SSYSCON_PDSLEEPCFG_PDEN_USB_RAM_MASK | \\\r\nSYSCON_PDRUNCFG_PDEN_VD2_ANA_MASK | SYSCON_PDRUNCFG_PDEN_VD5_MASK | SYSCON_PDRUNCFG_PDEN_SRAMX_MASK | SYSCON_PDRUNCFG_PDEN_VD6_MASK)
#define APP_EXCLUDE_FROM_DEEPSLEEP_HIGH_BYTE ((SYSCON_PDRUNCFG_PDEN_USB1_PHY_MASK | SYSCON_PDRUNCFG_PDEN_SYSOSC_MASK))
#endif${<code>
}
</code>}$
/*******************************************************************************
 * Prototypes
 ******************************************************************************/${<code>
if (kinetis === true && suspendResume === true) { </code>}$
void USB_WaitForPllLock(void);${<code>
if (remoteWakeup === true)
    { </code>}$
void USB_RemoteWakeupTimerStart(void);${<code>
    }
}
else if (lpc54xxx === true && remoteWakeup === true) {
</code>}$
void USB_RemoteWakeupTimerStart(void);${<code>
}
</code>}$

void USB_DeviceIsrEnable(void);
#if USB_DEVICE_CONFIG_USE_TASK
void USB_DeviceTaskFn(void *deviceHandle);
#endif

static void USB_DeviceClockInit(void);

#if CHIRP_ISSUE_WORKAROUND_NEEDED
void USB_DeviceHsPhyChirpIssueWorkaround(void);
void USB_DeviceDisconnected(void);
#endif

#if (defined(USB_DEVICE_CONFIG_CHARGER_DETECT) && (USB_DEVICE_CONFIG_CHARGER_DETECT > 0U)) && \\
    (defined(FSL_FEATURE_SOC_USBHSDCD_COUNT) && (FSL_FEATURE_SOC_USBHSDCD_COUNT > 0U))

#elif (defined(USB_DEVICE_CONFIG_CHARGER_DETECT) && (USB_DEVICE_CONFIG_CHARGER_DETECT > 0U)) && \\
    (defined(FSL_FEATURE_SOC_USB_ANALOG_COUNT) && (FSL_FEATURE_SOC_USB_ANALOG_COUNT > 0U))
extern void HW_TimerControl(uint8_t enable);
#endif

${<code>
if ((lpc54xxx === true) || (lpc55xx === true)) {
</code>}$
#if defined (USB_DEVICE_CONFIG_LPCIP3511FS) && (USB_DEVICE_CONFIG_LPCIP3511FS > 0U)${<code>
    if (lpc54xxx === true) {
</code>}$
static clock_usb_src_t USB0_GetClockSource(void);${<code>
    } else if (lpc55xx === true) {
</code>}$
static clock_usbfs_src_t USB0_GetClockSource(void);${<code>
    }
</code>}$
#endif${<code>
}
</code>}$

static usb_status_t USB_DeviceCallback(usb_device_handle handle, uint32_t event, void *param);
static usb_status_t USB_UpdateInterfaceSetting(uint8_t interface, uint8_t alternateSetting);${<code>
interfaces.forEach(function(interface) {
</code>}$
${<code>
    if (!isSubordinateInterface(interface, interfaces)) {
</code>}$
extern usb_status_t USB_Device${interface.idCamelCase}$Init(usb_device_composite_struct_t *deviceComposite);
extern usb_status_t USB_Device${interface.idCamelCase}$Callback(class_handle_t handle, uint32_t event, void *param);
extern usb_status_t USB_Device${interface.idCamelCase}$SetConfiguration(class_handle_t handle, uint8_t configuration_index);${<code>
    }</code>}$
extern usb_status_t USB_Device${interface.idCamelCase}$SetInterface(class_handle_t handle, uint8_t alternateSetting);${<code>
    if ((interface.interfaceClass == CONST.USB_CLASS_AUDIO) && (interface.interfaceSubClass == CONST.AUDIO_SUBCLASS_AUDIOCONTROL)) { </code>}$
extern usb_status_t USB_Device${interface.idCamelCase}$BusReset(usb_device_composite_struct_t *deviceComposite);${<code>
    }
});
</code>}$

/*******************************************************************************
 * Variables
 ******************************************************************************/
#if (defined(USB_DEVICE_CONFIG_CHARGER_DETECT) && (USB_DEVICE_CONFIG_CHARGER_DETECT > 0U)) && \\
    (defined(FSL_FEATURE_SOC_USB_ANALOG_COUNT) && (FSL_FEATURE_SOC_USB_ANALOG_COUNT > 0U))
uint32_t g_halTimerHandle[(HAL_TIMER_HANDLE_SIZE + 3) / 4];
#endif

#if CHIRP_ISSUE_WORKAROUND_NEEDED
volatile uint32_t hwTick;
uint32_t timerInterval;
uint32_t isConnectedToFsHost = 0U;
uint32_t isConnectedToHsHost = 0U;
#endif

usb_device_composite_struct_t g_UsbDeviceComposite;
${<code>
var interfaceConfigs = "";
interfaces.forEach(function(interface){
    if (!isSubordinateInterface(interface, interfaces)) {
        interfaceConfigs += "    {\n\        USB_Device" + interface.idCamelCase + "Callback, (class_handle_t)NULL, &g_UsbDevice" + interface.idCamelCase + "Config,\n\    },\n";
</code>}$
extern usb_device_class_struct_t g_UsbDevice${interface.idCamelCase}$Config;${<code>
    } else {
        interfaceConfigs += "    {\n\        (usb_device_class_callback_t)NULL, (class_handle_t)NULL, NULL,\n\    },\n";
    }
});
</code>}$

/* Set class configurations. */
usb_device_class_config_struct_t g_CompositeClassConfig[USB_COMPOSITE_INTERFACE_COUNT] = {
${interfaceConfigs}$};

/* Set class configuration list. */
usb_device_class_config_list_struct_t g_UsbDeviceCompositeConfigList = {
    g_CompositeClassConfig, USB_DeviceCallback, USB_COMPOSITE_INTERFACE_COUNT,
};${<code>
if ((remoteWakeup === true) && (suspendResume === true)) { </code>}$
static int s_updateTicksEnable = 0;${<code>
}
</code>}$

/*******************************************************************************
 * Code
 ******************************************************************************/
#if (defined(USB_DEVICE_CONFIG_CHARGER_DETECT) && (USB_DEVICE_CONFIG_CHARGER_DETECT > 0U)) && \\
    (defined(FSL_FEATURE_SOC_USB_ANALOG_COUNT) && (FSL_FEATURE_SOC_USB_ANALOG_COUNT > 0U))
void HW_TimerCallback(void *param)
{
    g_UsbDeviceComposite.hwTick++;
    USB_DeviceUpdateHwTick(g_UsbDeviceComposite.deviceHandle, g_UsbDeviceComposite.hwTick);
}

void HW_TimerInit(void)
{
    hal_timer_config_t halTimerConfig;
    halTimerConfig.timeout            = 1000;
    halTimerConfig.srcClock_Hz        = TIMER_SOURCE_CLOCK;
    halTimerConfig.instance           = 0U;
    hal_timer_handle_t halTimerHandle = &g_halTimerHandle[0];
    HAL_TimerInit(halTimerHandle, &halTimerConfig);
    HAL_TimerInstallCallback(halTimerHandle, HW_TimerCallback, NULL);
}
void HW_TimerControl(uint8_t enable)
{
    if (enable)
    {
        HAL_TimerEnable(g_halTimerHandle);
    }
    else
    {
        HAL_TimerDisable(g_halTimerHandle);
    }
}
#endif

${<code>
if (kinetis === true && suspendResume === true) {
    if (remoteWakeup === true) { </code>}$
 /*!
 * @brief This callback updates hwtick value used for timing remote wake-up signal (works recursively)
 *
 * @return Used clock source
 */
void USB_RemoteWakeupTimerCallback(void)
{
	g_UsbDeviceComposite.hwTick++;
	USB_DeviceUpdateHwTick(g_UsbDeviceComposite.deviceHandle, g_UsbDeviceComposite.hwTick);
	if (s_updateTicksEnable) {
		//handle recursivity
		timerQueue_timer_object_t timerQueueTimerObject;
		timerQueueTimerObject.timerCount     = 1U;
		timerQueueTimerObject.timerCallback  = (timerQueue_timer_callback)USB_RemoteWakeupTimerCallback;
		TimerQueue_AddTimerQueue(&timerQueueTimerObject);
	}
}

void USB_RemoteWakeupTimerStop(void)
{
	s_updateTicksEnable = 0;
}

void USB_RemoteWakeupTimerStart(void)
{
	s_updateTicksEnable = 1;
	USB_RemoteWakeupTimerCallback();
}

/*!
 * @brief Checks if bus is suspended and sends remote wakeup signal.
 *
 * This function is supposed to be called in IRQ handler that wakes up device from low power mode to start remote wake-up procedure.
 */
void USB_RemoteWakeupTrigger(void)
{
    if(g_UsbDeviceComposite.suspend == kStatus_Suspended && g_UsbDeviceComposite.remoteWakeup != 0U)
    {
        g_UsbDeviceComposite.selfWakeup = 1U;
    }
}
${<code>
    }
</code>}$

usb_power_status_t getPowerStatus(void)
{
    return g_UsbDeviceComposite.suspend;
}

void USB_LowpowerModeInit(void)
{
    /* Set to allow entering vlps mode */
    SMC_SetPowerModeProtection(SMC, kSMC_AllowPowerModeVlp);
    SIM->SCGC6 |= SIM_SCGC6_RTC_MASK;
    RTC->CR |= RTC_CR_OSCE_MASK;
#if (defined(FSL_FEATURE_SIM_OPT_HAS_USB_PHY) && (FSL_FEATURE_SIM_OPT_HAS_USB_PHY > 0))
    SIM->SOPT2 |= SIM_SOPT2_USBSLSRC_MASK;
#endif
}

void USB_PreLowpowerMode(void)
{
    SMC_PreEnterStopModes();
    #if (defined(FSL_FEATURE_SIM_OPT_HAS_USB_VOLTAGE_REGULATOR) && (FSL_FEATURE_SIM_OPT_HAS_USB_VOLTAGE_REGULATOR > 0U))
    SIM->SOPT1 |= SIM_SOPT1_USBSSTBY_MASK;
    #endif
}

uint8_t USB_EnterLowpowerMode(void)
{
    /* Enter Deep Sleep mode */
    return SMC_SetPowerModeVlps(SMC);
}
void USB_PostLowpowerMode(void)
{
    USB_WaitForPllLock();
    SMC_PostExitStopModes();
}

void USB_WaitForPllLock(void)
{
#if (defined(FSL_FEATURE_SOC_MCG_COUNT) && (FSL_FEATURE_SOC_MCG_COUNT > 0U))
    /* Wait for PLL lock. */
    while ((kMCG_Pll0LockFlag & CLOCK_GetStatusFlags()) == 0);
    CLOCK_SetPeeMode();
#endif
}

void USB_PowerPreSwitchHook(void)
{${<code>
    if (remoteWakeup === true) { </code>}$
    HW_TimerControl(0U);${<code>
    }
</code>}$
    USB_PreLowpowerMode();
}

void USB_PowerPostSwitchHook(void)
{
    USB_WaitForPllLock();
    USB_PostLowpowerMode();${<code>
    if (remoteWakeup === true) { </code>}$
    HW_TimerControl(1U);${<code>
    }
</code>}$
}

void USB_DeviceSuspendResumeTask(void)
{
    if (g_UsbDeviceComposite.isResume)
    {
        g_UsbDeviceComposite.isResume = 0U;
        if (kStatus_Idle != g_UsbDeviceComposite.suspend)
        {
            g_UsbDeviceComposite.suspend = kStatus_Resumed;
        }
    }

    switch (g_UsbDeviceComposite.suspend)
    {
        case kStatus_Idle:${<code>
    if (remoteWakeup === true) { </code>}$
            USB_RemoteWakeupTimerStop();${<code>
    }
</code>}$
            break;
        case kStatus_StartSuspend:
            g_UsbDeviceComposite.suspend = kStatus_Suspending;
            break;
        case kStatus_Suspending:
            usb_echo("USB device suspended.\\r\\n");
            if (g_UsbDeviceComposite.remoteWakeup)
            {
                usb_echo("Please Press wakeup switch to remote wakeup the host.\\r\\n");
            }
            g_UsbDeviceComposite.suspend = kStatus_Suspended;
            break;
        case kStatus_Suspended:
            USB_PowerPreSwitchHook();
            USB_DeviceSetStatus(g_UsbDeviceComposite.deviceHandle, kUSB_DeviceStatusBusSuspend, NULL);
            if (kStatus_Success != USB_EnterLowpowerMode())
            {
                g_UsbDeviceComposite.selfWakeup = 1U;
                USB_PowerPostSwitchHook();
                usb_echo("Enter VLPS mode failed!\\r\\n");
            }
            else
            {
                USB_PowerPostSwitchHook();
            }
            if (g_UsbDeviceComposite.attach)
            {
                g_UsbDeviceComposite.suspend = kStatus_StartResume;
            }
            else
            {
                g_UsbDeviceComposite.suspend = kStatus_Idle;
            }
            break;
        case kStatus_StartResume:${<code>
    if (remoteWakeup === true) { </code>}$
            USB_RemoteWakeupTimerStart();${<code>
    }
</code>}$
            if (g_UsbDeviceComposite.selfWakeup)
            {
                g_UsbDeviceComposite.selfWakeup = 0U;
                if (g_UsbDeviceComposite.remoteWakeup)
                {
                    if (kStatus_USB_Success ==
                        USB_DeviceSetStatus(g_UsbDeviceComposite.deviceHandle, kUSB_DeviceStatusBusResume, NULL))
                    {
                        usb_echo("Remote wakeup the host.\\r\\n");
                        g_UsbDeviceComposite.suspend = kStatus_Resuming;
                    }
                    else
                    {
                        usb_echo("Send resume signal failed.\\r\\n");
                        g_UsbDeviceComposite.suspend = kStatus_StartResume;
                    }
                }
                else
                {
                    g_UsbDeviceComposite.suspend = kStatus_Resuming;
                }
            }
            else
            {
                g_UsbDeviceComposite.suspend = kStatus_Resumed;
            }
            break;
        case kStatus_Resuming:
            break;
        case kStatus_Resumed:
            usb_echo("USB device resumed.\\r\\n");
            g_UsbDeviceComposite.suspend = kStatus_Idle;
            break;
        default:
            g_UsbDeviceComposite.suspend = kStatus_Idle;
            break;
    }
}${<code>
}
else if (lpc54xxx === true && suspendResume === true) {
    if (remoteWakeup === true) { </code>}$
 /*!
 * @brief This callback updates hwtick value used for timing remote wake-up signal (works recursively)
 *
 * @return Used clock source
 */
void USB_RemoteWakeupTimerCallback(void)
{
	g_UsbDeviceComposite.hwTick++;
	USB_DeviceUpdateHwTick(g_UsbDeviceComposite.deviceHandle, g_UsbDeviceComposite.hwTick);
	if (s_updateTicksEnable) {
		//handle recursivity
		timerQueue_timer_object_t timerQueueTimerObject;
		timerQueueTimerObject.timerCount     = 1U;
		timerQueueTimerObject.timerCallback  = (timerQueue_timer_callback)USB_RemoteWakeupTimerCallback;
		TimerQueue_AddTimerQueue(&timerQueueTimerObject);
	}
}

void USB_RemoteWakeupTimerStop(void)
{
	s_updateTicksEnable = 0;
}

void USB_RemoteWakeupTimerStart(void)
{
	s_updateTicksEnable = 1;
	USB_RemoteWakeupTimerCallback();
}

/*!
 * @brief Checks if bus is suspended and sends remote wakeup signal.
 *
 * This function is supposed to be called in IRQ handler that wakes up device from low power mode to start remote wake-up procedure.
 */
void USB_RemoteWakeupTrigger(void)
{
    if(g_UsbDeviceComposite.suspend == kStatus_Suspended && g_UsbDeviceComposite.remoteWakeup != 0U)
    {
        g_UsbDeviceComposite.selfWakeup = 1U;
    }
}

${<code>
    }
</code>}$
void USB_LowpowerModeInit(void)
{
    SYSCON->STARTERSET[0] = SYSCON_STARTER_PIN_INT0_MASK;
}
void USB_PreLowpowerMode(void)
{
    __disable_irq();
#if ((defined(USB_DEVICE_CONFIG_LPCIP3511FS)) && (USB_DEVICE_CONFIG_LPCIP3511FS > 0U))
    if (SYSCON->USB0CLKSTAT & (SYSCON_USB0CLKSTAT_HOST_NEED_CLKST_MASK))
    {
        /* enable usb0 host clock */
        CLOCK_EnableClock(kCLOCK_Usbhmr0);
        CLOCK_EnableClock(kCLOCK_Usbhsl0);
        while (SYSCON->USB0CLKSTAT & (SYSCON_USB0CLKSTAT_HOST_NEED_CLKST_MASK))
        {
            __ASM("nop");
        }
        /* disable usb0 host clock */
        CLOCK_DisableClock(kCLOCK_Usbhsl0);
        CLOCK_DisableClock(kCLOCK_Usbhmr0);
    }
    NVIC_ClearPendingIRQ(USB0_NEEDCLK_IRQn);
    EnableDeepSleepIRQ(USB0_NEEDCLK_IRQn);
    SYSCON->STARTER[0] |= SYSCON_STARTER_USB0_NEEDCLK_MASK;
#endif
#if ((defined(USB_DEVICE_CONFIG_LPCIP3511HS)) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))
    if (SYSCON->USB1CLKSTAT & (SYSCON_USB1CLKSTAT_HOST_NEED_CLKST_MASK))
    {
        /* enable usb1 host clock */
        CLOCK_EnableClock(kCLOCK_Usbh1);
        while (SYSCON->USB1CLKSTAT & (SYSCON_USB1CLKSTAT_HOST_NEED_CLKST_MASK))
        {
            __ASM("nop");
        }
        /* disable usb1 host clock */
        CLOCK_DisableClock(kCLOCK_Usbh1);
    }
    NVIC_ClearPendingIRQ(USB1_NEEDCLK_IRQn);
    EnableDeepSleepIRQ(USB1_NEEDCLK_IRQn);

    SYSCON->STARTER[1] |= SYSCON_STARTER_USB1_ACT_MASK;
    CLOCK_EnableClock(kCLOCK_Usbh1);
    /*According to reference mannual, device mode setting has to be set by access usb host register */
    *((uint32_t *)(USBHSH_BASE + 0x50)) |= (USBHSH_PORTMODE_SW_CTRL_PDCOM_MASK);
    *((uint32_t *)(USBHSH_BASE + 0x50)) |= USBHSH_PORTMODE_SW_PDCOM_MASK;
    CLOCK_DisableClock(kCLOCK_Usbh1);
#endif
#if 0
    CLOCK_AttachClk(
        kFRO12M_to_MAIN_CLK);          /*!< Switch to 12MHz first to ensure we can change voltage without accidentally
                                       being below the voltage for current speed */
    SYSCON->FROCTRL &= ~(SYSCON_FROCTRL_USBCLKADJ_MASK | SYSCON_FROCTRL_HSPDCLK_MASK);
    POWER_SetVoltageForFreq(12000000U); /*!< Set voltage for core */
#endif
#if ((defined(USB_DEVICE_CONFIG_LPCIP3511FS)) && (USB_DEVICE_CONFIG_LPCIP3511FS > 0U))
    SYSCON->USB0CLKDIV  = (1 << 29);
    SYSCON->MAINCLKSELA = 0;
#endif
#if ((defined(USB_DEVICE_CONFIG_LPCIP3511HS)) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))
    SYSCON->USB1CLKDIV  = (1 << 29);
    SYSCON->MAINCLKSELA = 0;
#endif
}
uint8_t USB_EnterLowpowerMode(void)
{
    /* Enter Deep Sleep mode */
    POWER_EnterDeepSleep((uint64_t)(APP_EXCLUDE_FROM_DEEPSLEEP | ((uint64_t)APP_EXCLUDE_FROM_DEEPSLEEP_HIGH_BYTE << 32)));
    return kStatus_Success;
}
void USB_PostLowpowerMode(void)
{
    __enable_irq();
#if ((defined(USB_DEVICE_CONFIG_LPCIP3511FS)) && (USB_DEVICE_CONFIG_LPCIP3511FS > 0U))
    DisableDeepSleepIRQ(USB0_NEEDCLK_IRQn);
#endif
#if ((defined(USB_DEVICE_CONFIG_LPCIP3511HS)) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))
    CLOCK_EnableClock(kCLOCK_Usbh1);
    /*According to reference mannual, device mode setting has to be set by access usb host register */
    *((uint32_t *)(USBHSH_BASE + 0x50)) &= ~USBHSH_PORTMODE_SW_PDCOM_MASK;
    *((uint32_t *)(USBHSH_BASE + 0x50)) &= ~USBHSH_PORTMODE_SW_CTRL_PDCOM_MASK;
    CLOCK_DisableClock(kCLOCK_Usbh1);
    DisableDeepSleepIRQ(USB1_NEEDCLK_IRQn);
#endif
}
void USB_ControllerSuspended(void)
{
#if ((defined(USB_DEVICE_CONFIG_LPCIP3511FS)) && (USB_DEVICE_CONFIG_LPCIP3511FS > 0U))
    while (SYSCON->USB0CLKSTAT & (SYSCON_USB0CLKSTAT_DEV_NEED_CLKST_MASK))
    {
        __ASM("nop");
    }
    SYSCON->USB0CLKCTRL |= SYSCON_USB0CLKCTRL_POL_FS_DEV_CLK_MASK;
#endif
#if ((defined(USB_DEVICE_CONFIG_LPCIP3511HS)) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))
    while (SYSCON->USB1CLKSTAT & (SYSCON_USB1CLKSTAT_DEV_NEED_CLKST_MASK))
    {
        __ASM("nop");
    }
    SYSCON->USB1CLKCTRL |= SYSCON_USB1CLKCTRL_POL_FS_DEV_CLK_MASK;
#endif
}
void USB0_NEEDCLK_IRQHandler(void)
{
}
void USB1_NEEDCLK_IRQHandler(void)
{
}
void USB_WaitForPllLock(void)
{
#if ((defined(USB_DEVICE_CONFIG_LPCIP3511FS)) && (USB_DEVICE_CONFIG_LPCIP3511FS > 0U))
    SYSCON->MAINCLKSELA = 3; /* only applies to BOARD_BootClockFROHF96M */
    SYSCON->USB0CLKDIV  = 1; /* only applies to kCLOCK_UsbSrcFro and BOARD_BootClockFROHF96M */
#endif
#if ((defined(USB_DEVICE_CONFIG_LPCIP3511HS)) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))
    SYSCON->MAINCLKSELA = 3; /* only applies to BOARD_BootClockFROHF96M */
    SYSCON->USB1CLKDIV  = 0;
#endif
#if ((defined(USB_DEVICE_CONFIG_LPCIP3511HS)) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))
    if ((SYSCON->USB1CLKSEL & SYSCON_USB1CLKSEL_SEL_MASK) == SYSCON_USB1CLKSEL_SEL(0x2U))
    {
        while (CLOCK_IsUsbPLLLocked() == false)
        {
        }
    }
#endif
}

void USB_PowerPreSwitchHook(void)
{
    HW_TimerControl(0U);



    USB_PreLowpowerMode();
}

void USB_PowerPostSwitchHook(void)
{
    USB_WaitForPllLock();
    USB_PostLowpowerMode();
    BOARD_InitDebugConsole();
    HW_TimerControl(1U);
}


void USB_DeviceSuspendResumeTask(void)
{
    if (g_UsbDeviceComposite.isResume)
    {
        g_UsbDeviceComposite.isResume = 0U;
        if (kStatus_Idle != g_UsbDeviceComposite.suspend)
        {
            g_UsbDeviceComposite.suspend = kStatus_Resumed;
        }
    }

    switch (g_UsbDeviceComposite.suspend)
    {
        case kStatus_Idle:${<code>
    if (remoteWakeup === true) { </code>}$
            USB_RemoteWakeupTimerStop();${<code>
    }
</code>}$
            break;
        case kStatus_StartSuspend:
            g_UsbDeviceComposite.suspend = kStatus_Suspending;
            break;
        case kStatus_Suspending:
            usb_echo("USB device suspended.\\r\\n");
            if (g_UsbDeviceComposite.remoteWakeup)
            {
                usb_echo("Please Press wakeup switch to remote wakeup the host.\\r\\n");
            }
            g_UsbDeviceComposite.suspend = kStatus_Suspended;
            break;
        case kStatus_Suspended:
            USB_PowerPreSwitchHook();
            USB_DeviceSetStatus(g_UsbDeviceComposite.deviceHandle, kUSB_DeviceStatusBusSuspend, NULL);
            if (kStatus_Success != USB_EnterLowpowerMode())
            {
                g_UsbDeviceComposite.selfWakeup = 1U;
                USB_PowerPostSwitchHook();
                usb_echo("Enter deep-sleep mode failed!\\r\\n");
            }
            else
            {
                USB_PowerPostSwitchHook();
            }
            if (g_UsbDeviceComposite.attach)
            {
                g_UsbDeviceComposite.suspend = kStatus_StartResume;
            }
            else
            {
                g_UsbDeviceComposite.suspend = kStatus_Idle;
            }
            break;
        case kStatus_StartResume:${<code>
    if (remoteWakeup === true) { </code>}$
            USB_RemoteWakeupTimerStart();${<code>
    }
</code>}$
            if (g_UsbDeviceComposite.selfWakeup)
            {
                g_UsbDeviceComposite.selfWakeup = 0U;
                if (g_UsbDeviceComposite.remoteWakeup)
                {
                    if (kStatus_USB_Success ==
                        USB_DeviceSetStatus(g_UsbDeviceComposite.deviceHandle, kUSB_DeviceStatusBusResume, NULL))
                    {
                        usb_echo("Remote wakeup the host.\\r\\n");
                        g_UsbDeviceComposite.suspend = kStatus_Resuming;
                    }
                    else
                    {
                        usb_echo("Send resume signal failed.\\r\\n");
                        g_UsbDeviceComposite.suspend = kStatus_StartResume;
                    }
                }
                else
                {
                    g_UsbDeviceComposite.suspend = kStatus_Resuming;
                }
            }
            else
            {
                g_UsbDeviceComposite.suspend = kStatus_Resumed;
            }
            break;
        case kStatus_Resuming:
            break;
        case kStatus_Resumed:
            usb_echo("USB device resumed.\\r\\n");
            g_UsbDeviceComposite.suspend = kStatus_Idle;
            break;
        default:
            g_UsbDeviceComposite.suspend = kStatus_Idle;
            break;
    }
}
${<code>
}
else if (iMxRT1xxx === true) {
    if (remoteWakeup === true) {
</code>}$
 /*!
 * @brief This Callback updates hwtick value used for timing remote wake-up signal (works recursively)
 *
 * @return Used clock source
 */
void USB_RemoteWakeupTimerCallback(void)
{
	g_UsbDeviceComposite.hwTick++;
	USB_DeviceUpdateHwTick(g_UsbDeviceComposite.deviceHandle, g_UsbDeviceComposite.hwTick);
	if (s_updateTicksEnable) {
		//handle recursivity
		timerQueue_timer_object_t timerQueueTimerObject;
		timerQueueTimerObject.timerCount     = 1U;
		timerQueueTimerObject.timerCallback  = (timerQueue_timer_callback)USB_RemoteWakeupTimerCallback;
		TimerQueue_AddTimerQueue(&timerQueueTimerObject);
	}
}

void USB_RemoteWakeupTimerStop(void)
{
	s_updateTicksEnable = 0;
}

void USB_RemoteWakeupTimerStart(void)
{
	s_updateTicksEnable = 1;
	USB_RemoteWakeupTimerCallback();
}

/*!
 * @brief Checks if bus is suspended and sends remote wakeup signal.
 *
 * This function is supposed to be called in IRQ handler that wakes up device from low power mode to start remote wake-up procedure.
 */
void USB_RemoteWakeupTrigger(void)
{
    if(g_UsbDeviceComposite.suspend == kStatus_Suspended && g_UsbDeviceComposite.remoteWakeup != 0U)
    {
        g_UsbDeviceComposite.selfWakeup = 1U;
    }
}
${<code>
    }
</code>}$

usb_power_status_t getPowerStatus(void)
{
    return g_UsbDeviceComposite.suspend;
}

void USB_LowpowerModeInit(void)
{
    #if (defined(FSL_FEATURE_SIM_OPT_HAS_USB_PHY) && (FSL_FEATURE_SIM_OPT_HAS_USB_PHY > 0))
    SIM->SOPT2 |= SIM_SOPT2_USBSLSRC_MASK;
#endif
}

/*
 * Switch to low power mode
 */
static void EnterDeepSleep(void)
{
    SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    __asm("WFI");
}
/*
 * Enter the LowPower mode.
 */
void APP_LowPower_EnterLowPower(void)
{
    CLOCK_SetMode(kCLOCK_ModeStop);
    EnterDeepSleep();
}

uint8_t USB_EnterLowpowerMode(void)
{
    APP_LowPower_EnterLowPower();
    return 0;
}

void USB_WaitForPllLock(void)
{

}

void USB_PostLowpowerMode(void)
{
    USB_WaitForPllLock();
}

void USB_ControllerSuspended(void)
{
}

void USB_PowerPreSwitchHook(void)
{${<code>
    if (remoteWakeup === true) { </code>}$
    HW_TimerControl(0U);${<code>
    }
</code>}$
}

void USB_PowerPostSwitchHook(void)
{
    USB_WaitForPllLock();
    USB_PostLowpowerMode();${<code>
    if (remoteWakeup === true) { </code>}$
    HW_TimerControl(0U);${<code>
    }
</code>}$
}

void USB_DeviceSuspendResumeTask(void)
{
    if (g_UsbDeviceComposite.isResume)
    {
        g_UsbDeviceComposite.isResume = 0U;
        if (kStatus_Idle != g_UsbDeviceComposite.suspend)
        {
            g_UsbDeviceComposite.suspend = kStatus_Resumed;
        }
    }

    switch (g_UsbDeviceComposite.suspend)
    {
        case kStatus_Idle:${<code>
    if (remoteWakeup === true) { </code>}$
            USB_RemoteWakeupTimerStop();${<code>
    }
</code>}$
            break;
        case kStatus_StartSuspend:
            g_UsbDeviceComposite.suspend = kStatus_Suspending;
            break;
        case kStatus_Suspending:
            usb_echo("USB device suspended.\\r\\n");
            if (g_UsbDeviceComposite.remoteWakeup)
            {
                usb_echo("Please Press wakeup switch to remote wakeup the host.\\r\\n");
            }
            g_UsbDeviceComposite.suspend = kStatus_Suspended;
            break;
        case kStatus_Suspended:
            USB_PowerPreSwitchHook();
            USB_DeviceSetStatus(g_UsbDeviceComposite.deviceHandle, kUSB_DeviceStatusBusSuspend, NULL);
            if (kStatus_Success != USB_EnterLowpowerMode())
            {
                g_UsbDeviceComposite.selfWakeup = 1U;
                USB_PowerPostSwitchHook();
                usb_echo("Enter VLPS mode failed!\\r\\n");
            }
            else
            {
                USB_PowerPostSwitchHook();
            }

            if (g_UsbDeviceComposite.attach)
            {
                g_UsbDeviceComposite.suspend = kStatus_StartResume;
            }
            else
            {
                g_UsbDeviceComposite.suspend = kStatus_Idle;
            }
            break;
        case kStatus_StartResume:${<code>
    if (remoteWakeup === true) { </code>}$
            USB_RemoteWakeupTimerStart();${<code>
    }
</code>}$
            if (g_UsbDeviceComposite.selfWakeup)
            {
                g_UsbDeviceComposite.selfWakeup = 0U;
                if (g_UsbDeviceComposite.remoteWakeup)
                {
                    if (kStatus_USB_Success ==
                        USB_DeviceSetStatus(g_UsbDeviceComposite.deviceHandle, kUSB_DeviceStatusBusResume, NULL))
                    {
                        usb_echo("Remote wakeup the host.\\r\\n");
                        g_UsbDeviceComposite.suspend = kStatus_Resuming;
                    }
                    else
                    {
                        usb_echo("Send resume signal failed.\\r\\n");
                        g_UsbDeviceComposite.suspend = kStatus_StartResume;
                    }
                }
                else
                {
                    g_UsbDeviceComposite.suspend = kStatus_Resuming;
                }
            }
            else
            {
                g_UsbDeviceComposite.suspend = kStatus_Resumed;
            }
            break;
        case kStatus_Resuming:
            break;
        case kStatus_Resumed:
            usb_echo("USB device resumed.\\r\\n");
            g_UsbDeviceComposite.suspend = kStatus_Idle;
            break;
        default:
            g_UsbDeviceComposite.suspend = kStatus_Idle;
            break;
    }
}${<code>
}
if ((lpc54xxx === true) || (lpc55xx === true)) {
</code>}$
#if defined (USB_DEVICE_CONFIG_LPCIP3511FS) && (USB_DEVICE_CONFIG_LPCIP3511FS > 0U)
/*!
 * @brief Function to retrieve clock source for USB0.
 *
 * @return Used clock source
 */${<code>
    if (lpc54xxx === true) {
</code>}$
static clock_usb_src_t USB0_GetClockSource()
{
    clock_usb_src_t src;
    switch (SYSCON->USB0CLKSEL)
    {
        case 0U:
            src = kCLOCK_UsbSrcFro;
            break;
        case 1U:
            src = kCLOCK_UsbSrcSystemPll;
            break;
        case 2U:
            src = kCLOCK_UsbSrcUsbPll;
            break;
        default:
            src = kCLOCK_UsbSrcNone;
            break;
    }${<code>
    } else if (lpc55xx === true) {
</code>}$
static clock_usbfs_src_t USB0_GetClockSource()
{
    clock_usbfs_src_t src;
    switch (SYSCON->USB0CLKSEL)
    {
        case 0U:
            src = kCLOCK_UsbfsSrcMainClock;
            break;
        case 1U:
            src = kCLOCK_UsbfsSrcPll0;
            break;
        case 3U:
            src = kCLOCK_UsbfsSrcFro;
            break;
        case 5U:
            src = kCLOCK_UsbfsSrcPll1;
            break;
        default:
            src = kCLOCK_UsbfsSrcNone;
            break;
    }${<code>
    }
</code>}$
    return src;
}
#endif${<code>
}
</code>}$
#if CHIRP_ISSUE_WORKAROUND_NEEDED
/*!
 * @brief Initialization on MRT timer
 *
 * @param uint8_t Instance of timer.
 * @interval uint32_t Interrupt interval.
 *
 */
void USB_TimerInit(uint8_t instance, uint32_t interval)
{
    MRT_Type *instanceList[] = MRT_BASE_PTRS;
    IRQn_Type instanceIrq[] = MRT_IRQS;
    /* Structure of initialize MRT */
    mrt_config_t mrtConfig;
    /* mrtConfig.enableMultiTask = false; */
    MRT_GetDefaultConfig(&mrtConfig);
    /* Init mrt module */
    MRT_Init(instanceList[instance], &mrtConfig);
    /* Setup Channel 0 to be repeated */
    MRT_SetupChannelMode(instanceList[instance], kMRT_Channel_0, kMRT_RepeatMode);
    /* Enable timer interrupts for channel 0 */
    MRT_EnableInterrupts(instanceList[instance], kMRT_Channel_0, kMRT_TimerInterruptEnable);
    timerInterval = interval;
    /* Enable at the NVIC */
    EnableIRQ(instanceIrq[instance]);
}

/*!
 * @brief Function used to start/stop the MRT timer
 *
 * @param uint8_t MRT timer instance.
 * @param uint8_t Set to 0 to disable the timer. Other values enable the timer.
 */
void USB_TimerInt(uint8_t instance, uint8_t enable)
{
    MRT_Type *instanceList[] = MRT_BASE_PTRS;
    uint32_t mrt_clock;
    mrt_clock = CLOCK_GetFreq(kCLOCK_BusClk);
    if (enable)
    {
        /* Start channel 0 */
        MRT_StartTimer(instanceList[instance], kMRT_Channel_0, USEC_TO_COUNT(timerInterval, mrt_clock));
    }
    else
    {
        /* Stop channel 0 */
        MRT_StopTimer(instanceList[instance], kMRT_Channel_0);
        /* Clear interrupt flag.*/
        MRT_ClearStatusFlags(instanceList[instance], kMRT_Channel_0, kMRT_TimerInterruptFlag);
    }
}

/*!
 * @brief MRT0 interrupt service routine
 */
void MRT0_IRQHandler(void)
{
    /* Clear interrupt flag.*/
    MRT_ClearStatusFlags(MRT0, kMRT_Channel_0, kMRT_TimerInterruptFlag);
    if (hwTick)
    {
        hwTick--;
        if (!hwTick)
        {
            USB_TimerInt(0, 0);
        }
    }
    else
    {
        USB_TimerInt(0, 0);
    }
}

/*!
 * @brief Clears device connected flag for chirp issue
 */
void USB_DeviceDisconnected(void)
{
    isConnectedToFsHost = 0U;
}

/*!
 * @brief Chirp issue workaround
 *
 * This is a work-around to fix the HS device Chirping issue.
 * The device (IP3511HS controller) will sometimes not work when the cable
 * is attached first time after a Power-on Reset.
 */
void USB_DeviceHsPhyChirpIssueWorkaround(void)
{
    uint32_t startFrame = USBHSD->INFO & USBHSD_INFO_FRAME_NR_MASK;
    uint32_t currentFrame;
    uint32_t isConnectedToFsHostFlag = 0U;

    if ((!isConnectedToHsHost) && (!isConnectedToFsHost))
    {
        if (((USBHSD->DEVCMDSTAT & USBHSD_DEVCMDSTAT_Speed_MASK) >> USBHSD_DEVCMDSTAT_Speed_SHIFT) == 0x01U)
        {
            USBHSD->DEVCMDSTAT = (USBHSD->DEVCMDSTAT & (~(0x0F000000U | USBHSD_DEVCMDSTAT_PHY_TEST_MODE_MASK))) |
                                 USBHSD_DEVCMDSTAT_PHY_TEST_MODE(0x05U);
            hwTick = 100;
            USB_TimerInt(0, 1);

            while (hwTick)
            {
            }

            currentFrame = USBHSD->INFO & USBHSD_INFO_FRAME_NR_MASK;

            if (currentFrame != startFrame)
            {
                isConnectedToHsHost = 1U;
            }
            else
            {
                hwTick = 1;
                USB_TimerInt(0, 1);

                while (hwTick)
                {
                }

                currentFrame = USBHSD->INFO & USBHSD_INFO_FRAME_NR_MASK;

                if (currentFrame != startFrame)
                {
                    isConnectedToHsHost = 1U;
                }
                else
                {
                    isConnectedToFsHostFlag = 1U;
                }
            }

            USBHSD->DEVCMDSTAT = (USBHSD->DEVCMDSTAT & (~(0x0F000000U | USBHSD_DEVCMDSTAT_PHY_TEST_MODE_MASK)));
            USBHSD->DEVCMDSTAT = (USBHSD->DEVCMDSTAT & (~(0x0F000000U | USBHSD_DEVCMDSTAT_DCON_MASK)));
            hwTick = 510;
            USB_TimerInt(0, 1);

            while (hwTick)
            {
            }

            USBHSD->DEVCMDSTAT = (USBHSD->DEVCMDSTAT & (~(0x0F000000U))) | USB_DEVCMDSTAT_DCON_C_MASK;
            USBHSD->DEVCMDSTAT =
                (USBHSD->DEVCMDSTAT & (~(0x0F000000U))) | USBHSD_DEVCMDSTAT_DCON_MASK | USB_DEVCMDSTAT_DRES_C_MASK;

            if (isConnectedToFsHostFlag)
            {
                isConnectedToFsHost = 1U;
            }
        }
    }
}
#endif

/*!
 * @brief USB Interrupt service routine.
 *
 * This function serves as the USB interrupt service routine.
 *
 * @return None.
 */
void ${irqHandlerName}$(void)
{${<code>
if (lpc54xxx === true || lpc55xx === true || iMxRT6xx) {</code>}$
    USB_DeviceLpcIp3511IsrFunction(g_UsbDeviceComposite.deviceHandle);
${<code>
} else {
</code>}$
    USB_Device${controllerNameCamelCase}$IsrFunction(g_UsbDeviceComposite.deviceHandle);
${<code>
}
</code>}$
#if (defined(USB_DEVICE_CONFIG_KHCI) && (USB_DEVICE_CONFIG_KHCI > 0U)) || (defined(USB_DEVICE_CONFIG_EHCI) && (USB_DEVICE_CONFIG_EHCI > 0U))
    /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
    exception return operation might vector to incorrect interrupt */
    __DSB();
#endif
}

/*!
 * @brief Initializes USB specific setting that was not set by the Clocks tool.
 */
static void USB_DeviceClockInit(void)
{${<code>
if (mk64 === true) {
    // This MCU does not need any additional setting
} else if (kinetis === true) {
</code>}$
#if defined(USB_DEVICE_CONFIG_EHCI) && (USB_DEVICE_CONFIG_EHCI > 0U)
    usb_phy_config_struct_t phyConfig = {
        BOARD_USB_PHY_D_CAL, BOARD_USB_PHY_TXCAL45DP, BOARD_USB_PHY_TXCAL45DM,
    };
    uint32_t notUsed = 0;

    CLOCK_EnableUsbhs0Clock(kCLOCK_UsbSrcUnused, notUsed);
    USB_EhciPhyInit(USB_DEVICE_CONTROLLER_ID, notUsed, &phyConfig);
#endif
#if defined(USB_DEVICE_CONFIG_KHCI) && (USB_DEVICE_CONFIG_KHCI > 0U)
    SystemCoreClockUpdate();
    CLOCK_EnableUsbfs0Clock(kCLOCK_UsbSrcIrc48M, 48000000U);
/*
 * If the SOC has USB KHCI dedicated RAM, the RAM memory needs to be clear after
 * the KHCI clock is enabled. When the demo uses USB EHCI IP, the USB KHCI dedicated
 * RAM can not be used and the memory can\'t be accessed.
 */
#if (defined(FSL_FEATURE_USB_KHCI_USB_RAM) && (FSL_FEATURE_USB_KHCI_USB_RAM > 0U))
#if (defined(FSL_FEATURE_USB_KHCI_USB_RAM_BASE_ADDRESS) && (FSL_FEATURE_USB_KHCI_USB_RAM_BASE_ADDRESS > 0U))
    for (int i = 0; i < FSL_FEATURE_USB_KHCI_USB_RAM; i++)
    {
        ((uint8_t *)FSL_FEATURE_USB_KHCI_USB_RAM_BASE_ADDRESS)[i] = 0x00U;
    }
#endif /* FSL_FEATURE_USB_KHCI_USB_RAM_BASE_ADDRESS */
#endif /* FSL_FEATURE_USB_KHCI_USB_RAM */
#endif${<code>
} else if (iMxRT1xxx === true) {
</code>}$
    usb_phy_config_struct_t phyConfig = {
        BOARD_USB_PHY_D_CAL, BOARD_USB_PHY_TXCAL45DP, BOARD_USB_PHY_TXCAL45DM,
    };
    uint32_t notUsed = 0;
${<code>
    if (iMxRTUsbCount === 2) {</code>}$
    if (USB_DEVICE_CONTROLLER_ID == kUSB_ControllerEhci0)
    {
        CLOCK_EnableUsbhs0PhyPllClock(kCLOCK_Usbphy480M, 480000000U);
        CLOCK_EnableUsbhs0Clock(kCLOCK_Usb480M, 480000000U);
    }
    else
    {
        CLOCK_EnableUsbhs1PhyPllClock(kCLOCK_Usbphy480M, 480000000U);
        CLOCK_EnableUsbhs1Clock(kCLOCK_Usb480M, 480000000U);
    }${<code>
    } else {</code>}$
    CLOCK_EnableUsbhs0PhyPllClock(kCLOCK_Usbphy480M, 480000000U);
    CLOCK_EnableUsbhs0Clock(kCLOCK_Usb480M, 480000000U);${<code>
    }
    </code>}$

    USB_EhciPhyInit(USB_DEVICE_CONTROLLER_ID, notUsed, &phyConfig);${<code>
} else if (iMxRT6xx === true) { </code>}$
    RESET_PeripheralReset(kUSBHS_PHY_RST_SHIFT_RSTn);
    RESET_PeripheralReset(kUSBHS_DEVICE_RST_SHIFT_RSTn);
    RESET_PeripheralReset(kUSBHS_HOST_RST_SHIFT_RSTn);
    RESET_PeripheralReset(kUSBHS_SRAM_RST_SHIFT_RSTn);

    CLOCK_EnableClock(kCLOCK_UsbhsPhy);
    CLOCK_EnableClock(kCLOCK_UsbhsDevice);
    CLOCK_EnableClock(kCLOCK_UsbhsSram);

    POWER_DisablePD(kPDRUNCFG_APD_USBHS_SRAM);
	POWER_DisablePD(kPDRUNCFG_PPD_USBHS_SRAM);
	POWER_ApplyPD();

    USBPHY->CTRL_CLR = USBPHY_CTRL_SFTRST_MASK;

    uint32_t delay = 100000;
    while (delay--)
    {
        __NOP();
    }

	uint32_t pllDivSelValue = 0;
	uint32_t inputFrequency = CLOCK_GetFreq(kCLOCK_UsbClk);
    switch(inputFrequency) {
    case 480000000/13:
    	pllDivSelValue = 0;
    	break;
    case 32000000:
    	pllDivSelValue = 1;
    	break;
    case 30000000:
    	pllDivSelValue = 2;
    	break;
    case 24000000:
    	pllDivSelValue = 3;
    	break;
    case 21818200:
    	pllDivSelValue = 4;
    	break;
    case 19200000:
    	pllDivSelValue = 5;
    	break;
    case 16000000:
    	pllDivSelValue = 6;
    	break;
    case 2000000:
    	pllDivSelValue = 7;
    	break;
    default:
    	usb_echo("Unsupported input frequency (%lu) for USB PHY.\\r\\n", inputFrequency);
    }

    USBPHY->PLL_SIC_SET = (USBPHY_PLL_SIC_PLL_POWER(1) | USBPHY_PLL_SIC_PLL_REG_ENABLE_MASK);
    USBPHY->PLL_SIC     = (USBPHY->PLL_SIC & ~(USBPHY_PLL_SIC_PLL_DIV_SEL_MASK)) | USBPHY_PLL_SIC_PLL_DIV_SEL(pllDivSelValue);
    USBPHY->PLL_SIC_CLR = USBPHY_PLL_SIC_PLL_BYPASS_MASK;
    USBPHY->PLL_SIC_SET = (USBPHY_PLL_SIC_PLL_EN_USB_CLKS_MASK);

    USBPHY->CTRL_CLR = USBPHY_CTRL_CLR_CLKGATE_MASK;
    USBPHY->PWD_SET  = 0x0;

    while (!(USBPHY->PLL_SIC & USBPHY_PLL_SIC_PLL_LOCK_MASK))
    {
    }

    uint32_t not_used = 0;
	USB_EhciPhyInit(USB_DEVICE_CONTROLLER_ID, not_used, NULL);

	CLOCK_EnableClock(kCLOCK_UsbhsHost);

	/*  Wait until host_needclk de-asserts */
	while (SYSCTL0->USBCLKSTAT & SYSCTL0_USBCLKSTAT_HOST_NEED_CLKST_MASK)
	{
		__ASM("nop");
	}

	/*According to reference mannual, device mode setting has to be set by access usb host register */
	USBHSH->PORTMODE |= USBHSH_PORTMODE_DEV_ENABLE_MASK;
	/* Disable usb1 host clock */
	CLOCK_DisableClock(kCLOCK_UsbhsHost);

#if defined(FSL_FEATURE_USBHSD_USB_RAM) && (FSL_FEATURE_USBHSD_USB_RAM)
    for (int i = 0; i < FSL_FEATURE_USBHSD_USB_RAM; i++)
    {
        ((uint8_t *)FSL_FEATURE_USBHSD_USB_RAM_BASE_ADDRESS)[i] = 0x00U;
    }
#endif${<code>
} else if (lpc54xxx === true || lpc55xx === true) {
</code>}$
#if defined (USB_DEVICE_CONFIG_LPCIP3511FS) && (USB_DEVICE_CONFIG_LPCIP3511FS > 0U)
    /* Turn on USB Phy */
    POWER_DisablePD(kPDRUNCFG_PD_USB0_PHY);

    /* enable usb0 host clock */
    CLOCK_EnableClock(kCLOCK_Usbhsl0);

    /*According to reference mannual, device mode setting has to be set by access usb host register */
    *((uint32_t *)(USBFSH_BASE + 0x5C)) |= USBFSH_PORTMODE_DEV_ENABLE_MASK;

    /* disable usb0 host clock */
    CLOCK_DisableClock(kCLOCK_Usbhsl0);
${<code>
    if (lpc54xxx === true) {
</code>}$
    if (USB0_GetClockSource() == kCLOCK_UsbSrcFro)
    {
        /* Turn ON FRO HF and let it adjust TRIM value based on USB SOF */
        SYSCON->FROCTRL = (SYSCON->FROCTRL & ~((0x01U << 15U) | (0xFU << 26U))) | SYSCON_FROCTRL_HSPDCLK_MASK |
                          SYSCON_FROCTRL_USBCLKADJ_MASK;${<code>
    } else if (lpc55xx === true) {
</code>}$
    if (USB0_GetClockSource() == kCLOCK_UsbfsSrcFro)
    {
        /* Turn ON FRO HF and let it adjust TRIM value based on USB SOF */
        ANACTRL->FRO192M_CTRL = (ANACTRL->FRO192M_CTRL & ~(ANACTRL_FRO192M_CTRL_USBCLKADJ_MASK)) | ANACTRL_FRO192M_CTRL_USBCLKADJ(1U);
${<code>
    }
</code>}$
    }

    CLOCK_EnableClock(kCLOCK_Usbd0);
    CLOCK_EnableClock(kCLOCK_UsbRam1);

#if defined(FSL_FEATURE_USB_USB_RAM) && (FSL_FEATURE_USB_USB_RAM)
    for (int i = 0; i < FSL_FEATURE_USB_USB_RAM; i++)
    {
        ((uint8_t *)FSL_FEATURE_USB_USB_RAM_BASE_ADDRESS)[i] = 0x00U;
    }
#endif
#endif

#if defined(USB_DEVICE_CONFIG_LPCIP3511HS) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U)
    /* enable usb1 host clock */
    CLOCK_EnableClock(kCLOCK_Usbh1);
${<code>
    if (lpc55xx === true) {
</code>}$
    /* Put PHY powerdown under software control */
    *((uint32_t *)(USBHSH_BASE + 0x50)) = USBHSH_PORTMODE_SW_PDCOM_MASK;${<code>
    }
</code>}$
    /*According to reference mannual, device mode setting has to be set by access usb host register */
    *((uint32_t *)(USBHSH_BASE + 0x50)) |= USBHSH_PORTMODE_DEV_ENABLE_MASK;

    /* enable usb1 host clock */
    CLOCK_DisableClock(kCLOCK_Usbh1);

#if CHIRP_ISSUE_WORKAROUND_NEEDED
    USB_TimerInit(0, 1000U);
#endif
${<code>
    if (lpc54xxx === true) {
</code>}$
    POWER_SetUsbPhy();${<code>
    } else if (lpc55xx === true) {
</code>}$
    POWER_DisablePD(kPDRUNCFG_PD_LDOUSBHS); /*!< Ensure xtal32k is on  */
${<code>
    }
</code>}$
    POWER_DisablePD(kPDRUNCFG_PD_USB1_PHY); /* Turn on power for USB PHY */
    uint32_t delay = 100000;
    while (delay --)
    {
        __asm("nop");
    }

    CLOCK_EnableClock(kCLOCK_Usbd1);
    CLOCK_EnableClock(kCLOCK_UsbRam1);${<code>
    if (lpc55xx === true) {
</code>}$
    CLOCK_EnableClock(kCLOCK_Usb1Clk);

	uint32_t pllDivSelValue = 0;
	uint32_t inputFrequency = CLOCK_GetUsb1ClkFreq();
    switch(CLOCK_GetUsb1ClkFreq()) {
    case 32000000:
    	pllDivSelValue = 0;
    	break;
    case 30000000:
    	pllDivSelValue = 1;
    	break;
    case 24000000:
    	pllDivSelValue = 2;
    	break;
    case 20000000:
    	pllDivSelValue = 4;
    	break;
    case 19200000:
    	pllDivSelValue = 5;
    	break;
    case 16000000:
    	pllDivSelValue = 6;
    	break;
    case 12000000:
    	pllDivSelValue = 7;
    	break;
    default:
    	usb_echo("Unsupported input frequency (%lu) for USB PHY.\\r\\n", inputFrequency);
    }

    USBPHY->CTRL_CLR    = USBPHY_CTRL_SFTRST_MASK;
    USBPHY->PLL_SIC     = (USBPHY->PLL_SIC & ~USBPHY_PLL_SIC_PLL_DIV_SEL(0x7)) | USBPHY_PLL_SIC_PLL_DIV_SEL(pllDivSelValue);
    USBPHY->PLL_SIC_SET = USBPHY_PLL_SIC_SET_PLL_REG_ENABLE_MASK;
    USBPHY->PLL_SIC_CLR = (1 << 16);
    USBPHY->PLL_SIC_SET = USBPHY_PLL_SIC_SET_PLL_POWER_MASK;
    USBPHY->PLL_SIC_SET = USBPHY_PLL_SIC_SET_PLL_EN_USB_CLKS_MASK;

    USBPHY->CTRL_CLR = USBPHY_CTRL_CLR_CLKGATE_MASK;
    USBPHY->PWD_SET  = 0x0;

    uint32_t not_used = 0;
    USB_EhciPhyInit(USB_DEVICE_CONTROLLER_ID, not_used, NULL);${<code>
    }
</code>}$

#if defined(FSL_FEATURE_USBHSD_USB_RAM) && (FSL_FEATURE_USBHSD_USB_RAM)
    for (int i = 0; i < FSL_FEATURE_USBHSD_USB_RAM; i++)
    {
        ((uint8_t *)FSL_FEATURE_USBHSD_USB_RAM_BASE_ADDRESS)[i] = 0x00U;
    }
#endif
#endif${<code>
}
</code>}$
}

/*!
 * @brief Enables interrupt service routines for device.
 */
void USB_DeviceIsrEnable(void)
{
    uint8_t irqNumber;
#if defined(USB_DEVICE_CONFIG_KHCI) && (USB_DEVICE_CONFIG_KHCI > 0U)
    uint8_t usbDeviceKhciIrq[] = USB_IRQS;
    irqNumber = usbDeviceKhciIrq[USB_DEVICE_CONTROLLER_ID - kUSB_ControllerKhci0];
#endif
#if defined(USB_DEVICE_CONFIG_EHCI) && (USB_DEVICE_CONFIG_EHCI > 0U)
    uint8_t usbDeviceEhciIrq[] = USBHS_IRQS;
    irqNumber = usbDeviceEhciIrq[USB_DEVICE_CONTROLLER_ID - kUSB_ControllerEhci0];
#endif
#if defined(USB_DEVICE_CONFIG_LPCIP3511FS) && (USB_DEVICE_CONFIG_LPCIP3511FS > 0U)
    uint8_t usbDeviceIP3511Irq[] = USB_IRQS;
    irqNumber = usbDeviceIP3511Irq[USB_DEVICE_CONTROLLER_ID - kUSB_ControllerLpcIp3511Fs0];
#endif
#if defined(USB_DEVICE_CONFIG_LPCIP3511HS) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U)
    uint8_t usbDeviceIP3511Irq[] = USBHSD_IRQS;
    irqNumber = usbDeviceIP3511Irq[USB_DEVICE_CONTROLLER_ID - kUSB_ControllerLpcIp3511Hs0];
#endif
/* Install isr, set priority, and enable IRQ. */
#if defined(__GIC_PRIO_BITS)
    GIC_SetPriority((IRQn_Type)irqNumber, USB_DEVICE_INTERRUPT_PRIORITY);
#else
    NVIC_SetPriority((IRQn_Type)irqNumber, USB_DEVICE_INTERRUPT_PRIORITY);
#endif
    EnableIRQ((IRQn_Type)irqNumber);
}

#if USB_DEVICE_CONFIG_USE_TASK
/*!
 * @brief USB device task. When USB device does not use interrupt service routines, this function should be called periodically.
 *
 * @param *deviceHandle Pointer to device handle.
 */
void USB_DeviceTaskFn(void *deviceHandle)
{
#if defined(USB_DEVICE_CONFIG_KHCI) && (USB_DEVICE_CONFIG_KHCI > 0U)
        USB_DeviceKhciTaskFunction(deviceHandle);
#endif
#if defined(USB_DEVICE_CONFIG_EHCI) && (USB_DEVICE_CONFIG_EHCI > 0U)
        USB_DeviceEhciTaskFunction(deviceHandle);
#endif
#if defined(USB_DEVICE_CONFIG_LPCIP3511FS) && (USB_DEVICE_CONFIG_LPCIP3511FS > 0U)
    USB_DeviceLpcIp3511TaskFunction(deviceHandle);
#endif
#if defined(USB_DEVICE_CONFIG_LPCIP3511HS) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U)
    USB_DeviceLpcIp3511TaskFunction(deviceHandle);
#endif
}
#endif

/*!
 * @brief Standard device callback function.
 *
 * This function handle the USB standard event. For more information, please refer to usb spec chapter 9.
 * @param handle          The USB device handle.
 * @param event           The USB device event type.
 * @param *param          The parameter of the device specific request.
 * @return usb_status_t Returns status of operation.
 */
static usb_status_t USB_DeviceCallback(usb_device_handle handle, uint32_t event, void *param)
{
    usb_status_t error = kStatus_USB_Error;
    uint16_t *temp16 = (uint16_t *)param;
    uint8_t *temp8 = (uint8_t *)param;
    uint8_t count = 0U;

    switch (event)
    {
        case kUSB_DeviceEventBusReset:
            /* USB bus reset signal detected */
            for (count = 0U; count < USB_COMPOSITE_INTERFACE_COUNT; count++)
            {
                g_UsbDeviceComposite.currentInterfaceAlternateSetting[count] = 0U;
            }
            g_UsbDeviceComposite.attach = 0U;
            g_UsbDeviceComposite.currentConfiguration = 0U;${<code>
if (suspendResume === true) {
 </code>}$
            g_UsbDeviceComposite.remoteWakeup = 0U;
            g_UsbDeviceComposite.suspend = kStatus_Idle;
            g_UsbDeviceComposite.isResume = 0U;${<code>
}
interfaces.forEach(function(interface) {
    switch (interface.classLowerCase) {
        case "phdc":
            // intentional fall-through
        case "printer":
</code>}$
            USB_Device${interface.idCamelCase}$Init(&g_UsbDeviceComposite);${<code>
        break;
        case "audio_1_0":
            if (interface.interfaceSubClass == CONST.AUDIO_SUBCLASS_AUDIOCONTROL) {
</code>}$
            USB_Device${interface.idCamelCase}$BusReset(&g_UsbDeviceComposite);${<code>
            }
        break;
        case "audio_2_0":
            if (interface.interfaceSubClass == CONST.AUDIO_SUBCLASS_AUDIOCONTROL) {
</code>}$
            USB_Device${interface.idCamelCase}$BusReset(&g_UsbDeviceComposite);${<code>
            }
        break;
    }
});
</code>}$
            error = kStatus_USB_Success;
#if CHIRP_ISSUE_WORKAROUND_NEEDED
            /* The work-around is used to fix the HS device Chirping issue.
             * Please refer to the implementation for the detail information.
             */
            USB_DeviceHsPhyChirpIssueWorkaround();
#endif
#if defined(USB_DEVICE_CONFIG_EHCI) && (USB_DEVICE_CONFIG_EHCI > 0U) || \\
    (defined(USB_DEVICE_CONFIG_LPCIP3511HS) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))
            /* Get USB speed to configure the device, including max packet size and interval of the endpoints. */
            if (kStatus_USB_Success == USB_DeviceClassGetSpeed(USB_DEVICE_CONTROLLER_ID, &g_UsbDeviceComposite.speed))
            {
                USB_DeviceSetSpeed(handle, g_UsbDeviceComposite.speed);
            }
#endif
            break;
#if (defined(USB_DEVICE_CONFIG_DETACH_ENABLE) && (USB_DEVICE_CONFIG_DETACH_ENABLE > 0U))
        case kUSB_DeviceEventAttach:
            g_UsbDeviceComposite.connectStateChanged = 1U;
            g_UsbDeviceComposite.connectState        = 1U;

#if (defined(USB_DEVICE_CONFIG_CHARGER_DETECT) && (USB_DEVICE_CONFIG_CHARGER_DETECT > 0U)) && \\
    (((defined(FSL_FEATURE_SOC_USBHSDCD_COUNT) && (FSL_FEATURE_SOC_USBHSDCD_COUNT > 0U))) ||  \\
     (defined(FSL_FEATURE_SOC_USB_ANALOG_COUNT) && (FSL_FEATURE_SOC_USB_ANALOG_COUNT > 0U)))
            g_UsbDeviceComposite.dcdDectionStatus = kUSB_DeviceDCDDectionInit;

#else
#if (defined(USB_DEVICE_CONFIG_LPCIP3511HS) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U)) || \\
    (defined(USB_DEVICE_CONFIG_LPCIP3511FS) && (USB_DEVICE_CONFIG_LPCIP3511FS > 0U))
#else
            /*Add one delay here to make the DP pull down long enough to allow host to detect the previous disconnection.*/
            SDK_DelayAtLeastUs(5000, SDK_DEVICE_MAXIMUM_CPU_CLOCK_FREQUENCY);
            USB_DeviceRun(g_UsbDeviceComposite.deviceHandle);
#endif
#endif
            break;
        case kUSB_DeviceEventDetach:
            g_UsbDeviceComposite.connectStateChanged = 1U;
            g_UsbDeviceComposite.connectState        = 0U;
            g_UsbDeviceComposite.attach              = 0U;
#if (defined(USB_DEVICE_CONFIG_CHARGER_DETECT) && (USB_DEVICE_CONFIG_CHARGER_DETECT > 0U)) && \\
    (((defined(FSL_FEATURE_SOC_USBHSDCD_COUNT) && (FSL_FEATURE_SOC_USBHSDCD_COUNT > 0U))) ||  \\
     (defined(FSL_FEATURE_SOC_USB_ANALOG_COUNT) && (FSL_FEATURE_SOC_USB_ANALOG_COUNT > 0U)))
            g_UsbDeviceComposite.dcdDectionStatus = kUSB_DeviceDCDDectionInit;
#else
            g_UsbDeviceComposite.attach = 0;
#if (defined(USB_DEVICE_CONFIG_EHCI) && (USB_DEVICE_CONFIG_EHCI > 0U)) || \\
    (defined(USB_DEVICE_CONFIG_KHCI) && (USB_DEVICE_CONFIG_KHCI > 0U))
        USB_DeviceStop(g_UsbDeviceComposite.deviceHandle);
#else
#if (defined(USB_DEVICE_CONFIG_LPCIP3511HS) && (USB_DEVICE_CONFIG_LPCIP3511HS > 0U))
            USB_DeviceDisconnected();
#endif
#endif
#endif
            break;
#endif
        case kUSB_DeviceEventSetConfiguration:
            if (0 == temp8)
            {
                g_UsbDeviceComposite.attach = 0U;
                g_UsbDeviceComposite.currentConfiguration = 0U;${<code>
if (suspendResume === true) {
</code>}$
                g_UsbDeviceComposite.remoteWakeup = 0U;
                g_UsbDeviceComposite.suspend = kStatus_Idle;
                g_UsbDeviceComposite.isResume = 0U;${<code>
}
interfaces.forEach(function(interface) {
    switch (interface.classLowerCase) {
        case "printer":
</code>}$
                USB_Device${interface.idCamelCase}$Init(&g_UsbDeviceComposite);${<code>
        break;
    }
    if (!isSubordinateInterface(interface, interfaces)) {
</code>}$
                /* The device is detached - the zero configuration is set. */
                USB_Device${interface.idCamelCase}$SetConfiguration(g_UsbDeviceComposite.${interface.idLowerCamelCase}$Handle, *temp8);${<code>
    }
});
</code>}$
            }
            else if (USB_COMPOSITE_CONFIGURATION_INDEX == (*temp8))
            {
                /* Set device configuration request */
                g_UsbDeviceComposite.attach = 1U;
                g_UsbDeviceComposite.currentConfiguration = *temp8;${<code>
interfaces.forEach(function(interface) {
    if (!isSubordinateInterface(interface, interfaces)) {
</code>}$
                USB_Device${interface.idCamelCase}$SetConfiguration(g_UsbDeviceComposite.${interface.idLowerCamelCase}$Handle, *temp8);${<code>
    }
});
</code>}$
                error = kStatus_USB_Success;
            }
            else
            {
                error = kStatus_USB_InvalidRequest;
            }
            break;
        case kUSB_DeviceEventSetInterface:
            if (g_UsbDeviceComposite.attach)
            {
                /* Set device interface request */
                uint8_t interface = (uint8_t)((*temp16 & 0xFF00U) >> 0x08U);
                uint8_t alternateSetting = (uint8_t)(*temp16 & 0x00FFU);

                if (interface < USB_COMPOSITE_INTERFACE_COUNT)
                {
                    error = USB_UpdateInterfaceSetting(interface, alternateSetting);
                }
            }
            break;
        case kUSB_DeviceEventGetConfiguration:
            if (param)
            {
                /* Get current configuration request */
                *temp8 = g_UsbDeviceComposite.currentConfiguration;
                error = kStatus_USB_Success;
            }
            break;
        case kUSB_DeviceEventGetInterface:
            if (param)
            {
                /* Get current alternate setting of the interface request */
                uint8_t interface = (uint8_t)((*temp16 & 0xFF00U) >> 0x08U);
                if (interface < USB_COMPOSITE_INTERFACE_COUNT)
                {
                    *temp16 = (*temp16 & 0xFF00U) | g_UsbDeviceComposite.currentInterfaceAlternateSetting[interface];
                    error = kStatus_USB_Success;
                }
                else
                {
                    error = kStatus_USB_InvalidRequest;
                }
            }
            break;
        case kUSB_DeviceEventGetDeviceDescriptor:
            if (param)
            {
                /* Get device descriptor request */
                error = USB_DeviceGetDeviceDescriptor(handle, (usb_device_get_device_descriptor_struct_t *)param);
            }
            break;
        case kUSB_DeviceEventGetConfigurationDescriptor:
            if (param)
            {
                /* Get device configuration descriptor request */
                error = USB_DeviceGetConfigurationDescriptor(handle,
                                                             (usb_device_get_configuration_descriptor_struct_t *)param);
            }
            break;
        case kUSB_DeviceEventGetStringDescriptor:
            if (param)
            {
                /* Get device string descriptor request */
                error = USB_DeviceGetStringDescriptor(handle, (usb_device_get_string_descriptor_struct_t *)param);
            }
            break;
#if (USB_DEVICE_CONFIG_HID > 0U)
        case kUSB_DeviceEventGetHidDescriptor:
            if (param)
            {
                /* Get hid descriptor request */
                error = USB_DeviceGetHidDescriptor(handle, (usb_device_get_hid_descriptor_struct_t *)param);
            }
            break;
        case kUSB_DeviceEventGetHidReportDescriptor:
            if (param)
            {
                /* Get hid report descriptor request */
                error =
                    USB_DeviceGetHidReportDescriptor(handle, (usb_device_get_hid_report_descriptor_struct_t *)param);
            }
            break;
        case kUSB_DeviceEventGetHidPhysicalDescriptor:
            if (param)
            {
                /* Get hid physical descriptor request */
                error = USB_DeviceGetHidPhysicalDescriptor(handle,
                                                           (usb_device_get_hid_physical_descriptor_struct_t *)param);
            }
            break;
#endif /* USB_DEVICE_CONFIG_HID */
#if (defined(USB_DEVICE_CONFIG_CV_TEST) && (USB_DEVICE_CONFIG_CV_TEST > 0U))
        case kUSB_DeviceEventGetDeviceQualifierDescriptor:
            if (param)
            {
                /* Get Qualifier descriptor request */
                error = USB_DeviceGetDeviceQualifierDescriptor(
                    handle, (usb_device_get_device_qualifier_descriptor_struct_t *)param);
            }
            break;
#endif
#if (defined(USB_DEVICE_CONFIG_CHARGER_DETECT) && (USB_DEVICE_CONFIG_CHARGER_DETECT > 0U)) && \\
    (((defined(FSL_FEATURE_SOC_USBHSDCD_COUNT) && (FSL_FEATURE_SOC_USBHSDCD_COUNT > 0U))) ||  \\
     (defined(FSL_FEATURE_SOC_USB_ANALOG_COUNT) && (FSL_FEATURE_SOC_USB_ANALOG_COUNT > 0U)))
        case kUSB_DeviceEventDcdDetectionfinished:
            /*temp pointer point to detection result*/
            if (param)
            {
                if (kUSB_DcdSDP == *temp8)
                {
                    g_UsbDeviceComposite.dcdDectionStatus = kUSB_DeviceDCDDectionSDP;
                }
                else if (kUSB_DcdCDP == *temp8)
                {
                    g_UsbDeviceComposite.dcdDectionStatus = kUSB_DeviceDCDDectionCDP;
                }
                else if (kUSB_DcdDCP == *temp8)
                {
                    g_UsbDeviceComposite.dcdDectionStatus = kUSB_DeviceDCDDectionDCP;
                }
                else if (kUSB_DcdTimeOut == *temp8)
                {
                    g_UsbDeviceComposite.dcdDectionStatus = kUSB_DeviceDCDDectionTimeOut;
                }
                else if (kUSB_DcdError == *temp8)
                {
                    g_UsbDeviceComposite.dcdDectionStatus = kUSB_DeviceDCDDectionError;
                }
                else
                {
                }
            }
            break;
#endif${<code>
if (suspendResume === true) {</code>}$
        case kUSB_DeviceEventSuspend:
        {
            /* USB device bus suspend signal detected */
            if (g_UsbDeviceComposite.attach)
            {
                usb_echo("USB device start suspend\\r\\n");${<code>
if(lpc54xxx === true) { </code>}$
                USB_ControllerSuspended();
${<code>
} </code>}$
                g_UsbDeviceComposite.startTick = g_UsbDeviceComposite.hwTick;
                g_UsbDeviceComposite.suspend = kStatus_StartSuspend;
                error = kStatus_USB_Success;
            }
        }
        break;
        case kUSB_DeviceEventResume:
        {
            /* USB device bus resume signal detected */
            if ((g_UsbDeviceComposite.attach) && (kStatus_Idle != g_UsbDeviceComposite.suspend))
            {
                g_UsbDeviceComposite.isResume = 1U;
                usb_echo("USB device start resume\\r\\n");
                error = kStatus_USB_Success;
            }
        }
        break;${<code>
if (remoteWakeup === true) { </code>}$
        case kUSB_DeviceEventSetRemoteWakeup:
            if (param)
            {
                if (g_UsbDeviceComposite.attach)
                {
                    g_UsbDeviceComposite.remoteWakeup = *temp8;
                    usb_echo("USB device remote wakeup state: %d\\r\\n", g_UsbDeviceComposite.remoteWakeup);
                    error = kStatus_USB_Success;
                }
            }
            break;${<code>
    }
}
</code>}$
        default:
            break;
    }
    return error;
}

/*!
 * @brief Select interface and call setInterface callback.
 *
 * @param interface          Number of interface to be set to.
 * @param alternateSetting    Alternate setting to be used.
 * @return usb_status_t Returns status of operation.
 */
usb_status_t USB_UpdateInterfaceSetting(uint8_t interface, uint8_t alternateSetting)
{
    usb_status_t ret = kStatus_USB_Error;

    /* select appropriate interface to be updated*/
    switch (interface)
    {${<code>
interfaces.forEach(function(interface) {
    if (isSubordinateInterface(interface, interfaces))
    {
    var superiorInterface = getSuperiorInterface(interface, interfaces);
    </code>}$
    case USB_${interface.idSnakeCase}$_INDEX:
        ret = USB_Device${interface.idCamelCase}$SetInterface(g_UsbDeviceComposite.${superiorInterface.idLowerCamelCase}$Handle, alternateSetting);
        break;${<code>
    }
    else
    {
 </code>}$

    case USB_${interface.idSnakeCase}$_INDEX:
        ret = USB_Device${interface.idCamelCase}$SetInterface(g_UsbDeviceComposite.${interface.idLowerCamelCase}$Handle, alternateSetting);
        break;${<code>
    }
});
</code>}$
    }

    if (ret == kStatus_USB_Success)
    {
        //interface setting was set
        g_UsbDeviceComposite.currentInterfaceAlternateSetting[interface] = alternateSetting;
    }

    return ret;
}

/*!
 * @brief Completely initializes USB device.
 *
 * This function calls other USB device functions and directly initializes following: USB specific clocks, g_UsbDeviceComposite values, USB stack, class drivers and device isr.
 *
 * @return A USB error code or kStatus_USB_Success.
 */
usb_status_t USB_DeviceApplicationInit(void)
{${<code>
var nullHandlers = "";
var classHandlers = "";
for (var i = 0; i < interfaces.length; i++) {
    var interface = interfaces[i];
    if (!isSubordinateInterface(interface, interfaces)) {
        nullHandlers += "    g_UsbDeviceComposite." + interface.idLowerCamelCase + "Handle = (class_handle_t)NULL;\n"
        classHandlers += "    g_UsbDeviceComposite." + interface.idLowerCamelCase + "Handle = g_UsbDeviceCompositeConfigList.config[" + i + "].classHandle;\n    USB_Device" + interface.idCamelCase + "Init(&g_UsbDeviceComposite);\n";
    }
}
</code>}$
	usb_status_t status;

    USB_DeviceClockInit();
#if (defined(FSL_FEATURE_SOC_SYSMPU_COUNT) && (FSL_FEATURE_SOC_SYSMPU_COUNT > 0U))
    SYSMPU_Enable(SYSMPU, 0);
#endif /* FSL_FEATURE_SOC_SYSMPU_COUNT */

    g_UsbDeviceComposite.speed = USB_SPEED_FULL;
    g_UsbDeviceComposite.attach = 0U;${<code>
if (suspendResume === true) {</code>}$
    g_UsbDeviceComposite.remoteWakeup = 0U;
    g_UsbDeviceComposite.suspend = kStatus_Idle;${<code>
if (remoteWakeup === true) {</code>}$
    g_UsbDeviceComposite.selfWakeup = 0U;${<code>
}
</code>}$
    g_UsbDeviceComposite.isResume = 0U;${<code>
}
</code>}$
${nullHandlers}$    g_UsbDeviceComposite.deviceHandle = NULL;

    /* Initialize the usb stack and class drivers. */
    status = USB_DeviceClassInit(USB_DEVICE_CONTROLLER_ID, &g_UsbDeviceCompositeConfigList, &g_UsbDeviceComposite.deviceHandle);

    if (kStatus_USB_Success != status)
    {
        return status;
    }

    /* Get the class handle. */
${classHandlers}$

#if (defined(USB_DEVICE_CONFIG_CHARGER_DETECT) && (USB_DEVICE_CONFIG_CHARGER_DETECT > 0U)) && \\
    (((defined(FSL_FEATURE_SOC_USBHSDCD_COUNT) && (FSL_FEATURE_SOC_USBHSDCD_COUNT > 0U))) ||  \\
     (defined(FSL_FEATURE_SOC_USB_ANALOG_COUNT) && (FSL_FEATURE_SOC_USB_ANALOG_COUNT > 0U)))
    g_UsbDeviceComposite.dcdDectionStatus = kUSB_DeviceDCDDectionInit;
#endif

    USB_DeviceIsrEnable();

#if (defined(USB_DEVICE_CONFIG_DETACH_ENABLE) && (USB_DEVICE_CONFIG_DETACH_ENABLE > 0U))
    /*USB_DeviceRun could not be called here to avoid DP/DM confliction between DCD function and USB function in case
      DCD is enabled. Instead, USB_DeviceRun should be called after the DCD is finished immediately*/
#if (defined(USB_DEVICE_CONFIG_LPCIP3511FS) && (USB_DEVICE_CONFIG_LPCIP3511FS > 0U))
    /* Start USB device HID mouse */
    /*Add one delay here to make the DP pull down long enough to allow host to detect the previous disconnection.*/
    SDK_DelayAtLeastUs(5000, SDK_DEVICE_MAXIMUM_CPU_CLOCK_FREQUENCY);
    USB_DeviceRun(g_UsbDeviceComposite.deviceHandle);
#endif
#else
    /*Add one delay here to make the DP pull down long enough to allow host to detect the previous disconnection.*/
    SDK_DelayAtLeastUs(5000, SDK_DEVICE_MAXIMUM_CPU_CLOCK_FREQUENCY);
    USB_DeviceRun(g_UsbDeviceComposite.deviceHandle);
#endif${<code>
if (suspendResume === true) {</code>}$
#if ((defined(USB_DEVICE_CONFIG_LOW_POWER_MODE)) && (USB_DEVICE_CONFIG_LOW_POWER_MODE > 0U))
    USB_LowpowerModeInit();${<code>
if (remoteWakeup === true) { </code>}$
    HW_TimerControl(1U);${<code>
    }
</code>}$
#endif${<code>
if (remoteWakeup === true) { </code>}$
    TimerQueue_TimerInit();${<code>
    }
}
</code>}$
    return status;
}

/*!
 * @brief USB device charger task function.
 *
 * This function handles the USB device charger events.
 * @param usbDeviceCompositeDcd Device charger configuration.
 * @return None.
 */
#if (defined(USB_DEVICE_CONFIG_DETACH_ENABLE) && (USB_DEVICE_CONFIG_DETACH_ENABLE > 0U))
void USB_DeviceChargerTask(usb_device_composite_struct_t *usbDeviceCompositeDcd)
{
    if (usbDeviceCompositeDcd->connectStateChanged)
    {
        usbDeviceCompositeDcd->connectStateChanged = 0;
        if (g_UsbDeviceComposite.connectState)
        {
            /*user need call USB_DeviceRun here to usb function run if dcd function is disabled*/
            /*USB_DeviceRun(g_UsbDeviceComposite.deviceHandle);*/
            usb_echo("USB device attached.\\r\\n");
#if (defined(USB_DEVICE_CONFIG_CHARGER_DETECT) && (USB_DEVICE_CONFIG_CHARGER_DETECT > 0U)) && \\
    (defined(FSL_FEATURE_SOC_USBHSDCD_COUNT) && (FSL_FEATURE_SOC_USBHSDCD_COUNT > 0U))

#elif (defined(USB_DEVICE_CONFIG_CHARGER_DETECT) && (USB_DEVICE_CONFIG_CHARGER_DETECT > 0U)) && \\
    (defined(FSL_FEATURE_SOC_USB_ANALOG_COUNT) && (FSL_FEATURE_SOC_USB_ANALOG_COUNT > 0U))
            HW_TimerControl(1U);
#endif
        }
        else
        {
#if (defined(USB_DEVICE_CONFIG_CHARGER_DETECT) && (USB_DEVICE_CONFIG_CHARGER_DETECT > 0U))
            /*USB_DeviceStop should be called here to avoid DP/DM confliction between DCD function and USB function in
             * case next time DCD dection. */
            USB_DeviceStop(g_UsbDeviceComposite.deviceHandle);
#endif
#if (defined(USB_DEVICE_CONFIG_CHARGER_DETECT) && (USB_DEVICE_CONFIG_CHARGER_DETECT > 0U)) && \\
    (defined(FSL_FEATURE_SOC_USBHSDCD_COUNT) && (FSL_FEATURE_SOC_USBHSDCD_COUNT > 0U))

#elif (defined(USB_DEVICE_CONFIG_CHARGER_DETECT) && (USB_DEVICE_CONFIG_CHARGER_DETECT > 0U)) && \\
    (defined(FSL_FEATURE_SOC_USB_ANALOG_COUNT) && (FSL_FEATURE_SOC_USB_ANALOG_COUNT > 0U))
            HW_TimerControl(0U);
#endif
            usb_echo("USB device detached.\\r\\n");
        }
    }
#if (defined(USB_DEVICE_CONFIG_CHARGER_DETECT) && (USB_DEVICE_CONFIG_CHARGER_DETECT > 0U)) && \\
    (((defined(FSL_FEATURE_SOC_USBHSDCD_COUNT) && (FSL_FEATURE_SOC_USBHSDCD_COUNT > 0U))) ||  \\
     (defined(FSL_FEATURE_SOC_USB_ANALOG_COUNT) && (FSL_FEATURE_SOC_USB_ANALOG_COUNT > 0U)))
    if ((kUSB_DeviceDCDDectionInit != usbDeviceCompositeDcd->dcdDectionStatus) &&
        (kUSB_DeviceDCDDectionFinished != usbDeviceCompositeDcd->dcdDectionStatus))
    {
        switch (usbDeviceCompositeDcd->dcdDectionStatus)
        {
            case kUSB_DeviceDCDDectionSDP:
            {
                usb_echo("SDP(standard downstream port) is detected.\\r\\n");
                /* Start USB device HID mouse */
                USB_DeviceRun(g_UsbDeviceComposite.deviceHandle);
            }
            break;
            case kUSB_DeviceDCDDectionDCP:
            {
                usb_echo("DCP (dedicated charging port) is detected.\\r\\n");
#if (defined(FSL_FEATURE_USBPHY_HAS_DCD_ANALOG) && (FSL_FEATURE_USBPHY_HAS_DCD_ANALOG > 0U))
                /*
                 * This is a work-around to fix the DCP device detach event missing issue.
                 * The device (IP3511HS controller) VBUSDEBOUNCED bit is not updated on time before softeware read this
                 * bit, so when DCP is detached from usb port, softeware can\'t detect DCP disconnection.
                 */
                USB_DeviceRun(g_UsbDeviceComposite.deviceHandle);
#endif
            }
            break;
            case kUSB_DeviceDCDDectionCDP:
            {
                usb_echo("CDP(charging downstream port) is detected.\\r\\n");
                /* Start USB device HID mouse */
                USB_DeviceRun(g_UsbDeviceComposite.deviceHandle);
            }
            break;
            case kUSB_DeviceDCDDectionTimeOut:
            {
                usb_echo("Timeout error.\\r\\n");
            }
            break;
            case kUSB_DeviceDCDDectionError:
            {
                usb_echo("Detect error.\\r\\n");
            }
            break;
            default:
                break;
        }
        usbDeviceCompositeDcd->dcdDectionStatus = kUSB_DeviceDCDDectionFinished;
    }
#endif
}
#endif

/*!
 * @brief USB device tasks function.
 *
 * This function runs the tasks for USB device.
 *
 * @return None.
 */
void USB_DeviceTasks(void)
{${<code>
interfaces.forEach(function(interface) {
    switch (interface.implementation) {
        case "kImplementationDfu":
        // intentional fall-through
        case "kImplementationWeightScale":
        // intentional fall-through
        case "kImplementationPlainTextPrinter":
        // intentional fall-through
        case "kImplementationCicVcom":
        // intentional fall-through
        case "kImplementationAudioSpeaker":
        // intentional fall-through
        case "kImplementationAudioUnified":</code>}$  
        
    USB_Device${interface.idCamelCase}$Task();${<code>
        break;
   }
});
if (suspendResume === true)
{
</code>}$
    USB_DeviceSuspendResumeTask();${<code>
}</code>}$
#if USB_DEVICE_CONFIG_USE_TASK
    USB_DeviceTaskFn(g_UsbDeviceComposite.deviceHandle);
#endif
#if (defined(USB_DEVICE_CONFIG_DETACH_ENABLE) && (USB_DEVICE_CONFIG_DETACH_ENABLE > 0U))
    USB_DeviceChargerTask(&g_UsbDeviceComposite);
#endif
}