<?xml version="1.0" encoding= "UTF-8" ?>
<component:config_component id="nvic"  label="Interrupt controller" auto_add_instances="1" category="Peripheral driver" options="UI_COMPONENT_MODE_HIDDEN" 
   xsi:schemaLocation="http://swtools.freescale.net/XSD/component/1.0 http://swtools.freescale.net/XSD/component/1.0/component-9.0.xsd" 
   xmlns:component="http://swtools.freescale.net/XSD/component/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <description>Nested Vectored Interrupt Controller (NVIC)</description>
   <mode id="general" label="General" >
      <description>Common mode</description>
      <config_set_refs>
         <config_set_ref>nvic</config_set_ref>
      </config_set_refs> 
      <master_peripheral exclusive="true">
         <peripheral_type>NVIC</peripheral_type>
      </master_peripheral>
   </mode>
   <config_set id="nvic" label="Interrupt controller configuration">
      <description>General interrupt controller configuration</description>
      <generated_types></generated_types>
      <user_types>
         <struct id="interrupt_table_t">
            <info id="interrupt_source" label="Interrupt" value="$configSet.all_interrupt_cfg.getValue().get($parent.getID().toInt()).getSetting(`IRQn`).getEnumItemLabel()" >
               <description>The interrupt vector that is used.</description>
            </info>
            <info id="interrupt_enable" label="Initialization" value="$configSet.all_interrupt_cfg.getValue().get($parent.getID().toInt()).getSetting(`enable_interrrupt`).isAvailable() ? $configSet.all_interrupt_cfg.getValue().get($parent.getID().toInt()).getSetting(`enable_interrrupt`).getEnumItemLabel() : `N/A`">
               <description>The interrupt vector that is used.</description>
            </info>
            <info id="interrupt_priority" label="Priority" value="$configSet.all_interrupt_cfg.getValue().get($parent.getID().toInt()).getSetting(`enable_priority`).getValue() ? $configSet.all_interrupt_cfg.getValue().get($parent.getID().toInt()).getSetting(`priority`).getValue() : `N/A`" >
               <description>The interrupt priority that is used.</description>
            </info>
            <info id="interrupt_handle" label="Custom handler ID" value="$configSet.all_interrupt_cfg.getValue().get($parent.getID().toInt()).getSetting(`useDefaultISR`).getValue(false) ? `N/A` : $configSet.all_interrupt_cfg.getValue().get($parent.getID().toInt()).getSetting(`IRQhandler`).getValue()" >
               <description>The interrupt handle identifier that is used for definition of the interrupt subroutine.</description>
            </info>
            <info id="reference" label="Setting reference" value="$configSet.all_interrupt_cfg.getValue().get($parent.getID().toInt()).getSetting(`$instance`).getID() + ` setting`">
               <options_expr>
                  <option id="UI_SETTING_LINK" expr="$configSet.all_interrupt_cfg.getValue().get($parent.getID().toInt())"/>
               </options_expr>
               <description>
A link to the component's settings where the interrupt is used and configured. 

Please note that switching to a component that is instantiated in different functional group will cause closing of this component window (the diferenct functional group's compopnents will be displayed). Switch to the current functional group for restoring of view of these components.
               </description>
            </info>
            <info id="func_group" label="Functional group" value="$configSet.all_interrupt_cfg.getValue().get($parent.getID().toInt()).getSetting(`$group`).getID()" >
               <description>Name of the functional group where the component is instantiated.</description>
            </info>
         </struct>
         <reference id="interrupt_t" label="Interrupt" type="interrupt_vector_t" config_set_id="fsl_interrupt_peripheral" component_id="system" options="all_devices"/>
         <struct id="interrupt_channel_t">
            <string id="channelId" label="User interrupt ID">
               <description>The identifier of the interrupt (provided by the user) that will be used as a prefix in the generated definition of interrupt.</description>
               <validation>
                  <constraint cond_expr="isCIdentifier($this.getValue())" level="error" description="Interrupt lable (prefix name) is not valid C identifier."/>
                  <constraint cond_expr="$parent.getParent().countOccurrences(item -> (item.getSetting(`channelId`).getValue() == $this.getValue())) == 1" level="error" description_expr="`The interrupt label ` + $this.getValue() + ` is a duplicate. Use different label.`"/>
               </validation>            
            </string>
            <reference id="interrupt_t" label="Interrupt" type="interrupt_vector_t" config_set_id="fsl_interrupt_peripheral" component_id="system" options="all_devices;UI_BORDER_HIDDEN">
               <options_expr>
                  <option id="irq_custom_name" expr="toUpperCase($instance.getFnGroupPrefix() + $parent.channelId.getValue())"/>
               </options_expr>
            </reference> 
         </struct>
      </user_types>
      <settings>
         <!-- All interrupts for processing common initialization -->
         <!-- update for v9 -->
         <variable id="all_interrupt_cfg" value="$components.system.#global.all_interrupt_config.getValue()"></variable>
         <!-- 
         <variable id="all_interrupt_cfg" value="$root.filter(item -> ((item.getType() == `struct`) &amp;&amp; (item.nodeExists(`IRQn`)) &amp;&amp; (item.getSetting(`IRQn`).hasOption(`system_irqn`)) &amp;&amp;  item.isAvailable() &amp;&amp; item.isEnabled()),true)"></variable>
        -->
        <!-- All interrupts of the current functional group -->
         <variable id="functional_group_interrupt_cfg" value="$group.filter(item -> ((item.getType() == `struct`) &amp;&amp; (item.nodeExists(`IRQn`)) &amp;&amp; (item.getSetting(`IRQn`).hasOption(`system_irqn`)) &amp;&amp; item.isAvailable() &amp;&amp; item.isEnabled()),true)"></variable>
         <array id="interrupt_table" label="Interrupt overview table" type="interrupt_table_t" size="$parent.all_interrupt_cfg.getValue().size()" options="ShowContentAs=Table;UI_BORDER_HIDDEN;UI_ARRAY_INDICES_HIDDEN;UI_TABLE_COLUMN_WIDTHS=12,14,6,13,16,14">
            <description>Interrupt overview table shows all interrupts that are initialized and used in the all functional groups (see the Functional group column).</description>
         </array>
         <!-- configuration settings of interrupt array -->
         <array id="interrupts" label="Interrupts initialization" type="interrupt_channel_t"  options="ShowContentAs=MasterDetail" key_selector_expr="(x) -> (x.getSetting(`channelId`).getValue() == ``) ? (`&lt;empty ID (` + x.getId() + `)&gt;`) : x.getSetting(`channelId`).getValue()">
            <description>Settings for initialization of interrupts in the INTC peripheral. The initialization is provided independently on other configuration components.</description>
            <item_defaults>
               <set_default id="channelId" value_expr="x -> `int_` + x.getID()"/>
            </item_defaults>
         </array>
      </settings>
      <fragment_defs>
         <import>
            <from component_id="system" config_set_id="common_code_templates"/>
            <from component_id="system" config_set_id="fsl_interrupt_peripheral"/>
         </import>
      </fragment_defs>
      <code>
         <section target="includes">
            <fragment id="include">
               <param id="name">common</param>
               <param id="filename">fsl_common.h</param>
            </fragment>
         </section>         
         <section target="defines">
            <fragment id="IRQ_definitions" for_elements_of="$this.interrupts.map(x -> x.getSetting(`interrupt_t`))"/>
         </section>
         
         <section target="common_post_init_function">
            <fragment id="IRQn_set_priority_default" for_elements_of="$this.interrupts.map(x -> x.getSetting(`interrupt_t`))"/>
            <fragment id="IRQn_enable_default" for_elements_of="$this.interrupts.map(x -> x.getSetting(`interrupt_t`))"/> 
         </section>
        
      </code>
      <quick_selections></quick_selections>
   </config_set>
</component:config_component>
