<?xml version="1.0" encoding= "UTF-8" ?>
<component:config_component id="pwm" label="eFlexPWM" category="Register init" registers_init="true" options="UI_COMPONENT_MODE_HIDDEN" global_only="false" hidden="false" auto_add="false" xsi:schemaLocation="http://swtools.freescale.net/XSD/component/1.0 http://swtools.freescale.net/XSD/component/1.0/component-8.0.xsd" xmlns:component="http://swtools.freescale.net/XSD/component/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <!-- <sw_comp_ref name="platform.drivers.pwm" version="2.2.1"/> -->
    <description>Enhanced Flex Pulse Width Modulator</description>
    <mode id="general" label="General">
        <description>Basic mode of PWM</description>
        <config_set_refs>
            <config_set_ref>fsl_pwm</config_set_ref>
        </config_set_refs>
        <master_peripheral exclusive="true">
            <peripheral_type>PWM</peripheral_type>
        </master_peripheral>
    </mode>
    <config_set id="fsl_pwm" label="General configuration" from_source="fsl_pwm.h">
        <description>Configuration of the whole eFlexPWM peripheral</description>
        <generated_types>            
        </generated_types>
        <user_types>
            <enum id="pwm_submodule_t" label="List of PWM submodules" from="_pwm_submodule">
                <description></description>
                <item id="kPWM_Module_0" label="0 - Master submodule" value="0">
                    <description>Submodule 0, source of the master signals and AUX clock</description>
                </item>
                <item id="kPWM_Module_1" label="1" value="1">
                    <description>Submodule 1</description>
                </item>
                <item id="kPWM_Module_2" label="2" value="2">
                    <description>Submodule 2</description>
                </item>
                <item id="kPWM_Module_3" label="3" value="3">
                    <description>Submodule 3</description>
                </item>
            </enum>
            <enum id="pwm_channels_t" label="List of PWM channels in each module" from="_pwm_channels">
                <description></description>
                <item id="kPWM_PwmA" label="A" value="0">
                    <description></description>
                </item>
                <item id="kPWM_PwmB" label="B" value="1">
                    <description></description>
                </item>                
                <item id="kPWM_PwmX" label="X" value="2" available="$this.hasOption(`Capture`)">
                    <description></description>
                </item>
            </enum>
            <set id="pwm_value_register_t" label="List of PWM value registers">
                <description></description>
                <item id="kPWM_ValueRegister_0" label="VAL0 compare" value="0">
                    <description>Trigger 0 is activated when the submodule counter matches the VAL0 register value.</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `TCTRL`)" bitfield="" bitfield_expr="`OUT_TRIG_EN`" 
                           value="(getBitFieldValue($instance.getPeripheral(), ($parent.getParent().getSetting(`sm_prefix`).getValue() + `TCTRL`), `OUT_TRIG_EN`) &amp; ~(1 &lt;&lt; $this.getSetItemValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $this.getSetItemValue().toInt()) : 0)" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $this.getSetItemValue().toInt())) != 0)"/>
                    </assign>
                </item>
                <item id="kPWM_ValueRegister_1" label="VAL1 compare" value="1">
                    <description>Trigger 1 is activated when the submodule counter matches the VAL1 register value.</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `TCTRL`)" bitfield="" bitfield_expr="`OUT_TRIG_EN`" 
                           value="(getBitFieldValue($instance.getPeripheral(), ($parent.getParent().getSetting(`sm_prefix`).getValue() + `TCTRL`), `OUT_TRIG_EN`) &amp; ~(1 &lt;&lt; $this.getSetItemValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $this.getSetItemValue().toInt()) : 0)" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $this.getSetItemValue().toInt())) != 0)"/>
                    </assign>
                </item>
                <item id="kPWM_ValueRegister_2" label="VAL2 compare" value="2">
                    <description>Trigger 0 is activated when the submodule counter matches the VAL2 register value.</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `TCTRL`)" bitfield="" bitfield_expr="`OUT_TRIG_EN`" 
                           value="(getBitFieldValue($instance.getPeripheral(), ($parent.getParent().getSetting(`sm_prefix`).getValue() + `TCTRL`), `OUT_TRIG_EN`) &amp; ~(1 &lt;&lt; $this.getSetItemValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $this.getSetItemValue().toInt()) : 0)" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $this.getSetItemValue().toInt())) != 0)"/>
                    </assign>
                </item>
                <item id="kPWM_ValueRegister_3" label="VAL3 compare" value="3">
                    <description>Trigger 1 is activated when the submodule counter matches the VAL3 register value.</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `TCTRL`)" bitfield="" bitfield_expr="`OUT_TRIG_EN`" 
                           value="(getBitFieldValue($instance.getPeripheral(), ($parent.getParent().getSetting(`sm_prefix`).getValue() + `TCTRL`), `OUT_TRIG_EN`) &amp; ~(1 &lt;&lt; $this.getSetItemValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $this.getSetItemValue().toInt()) : 0)" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $this.getSetItemValue().toInt())) != 0)"/>
                    </assign>
                </item>
                <item id="kPWM_ValueRegister_4" label="VAL4 compare" value="4">
                    <description>Trigger 0 is activated when the submodule counter matches the VAL4 register value.</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `TCTRL`)" bitfield="" bitfield_expr="`OUT_TRIG_EN`" 
                           value="(getBitFieldValue($instance.getPeripheral(), ($parent.getParent().getSetting(`sm_prefix`).getValue() + `TCTRL`), `OUT_TRIG_EN`) &amp; ~(1 &lt;&lt; $this.getSetItemValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $this.getSetItemValue().toInt()) : 0)" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $this.getSetItemValue().toInt())) != 0)"/>
                    </assign>
                </item>
                <item id="kPWM_ValueRegister_5" label="VAL5 compare" value="5">
                    <description>Trigger 1 is activated when the submodule counter matches the VAL5 register value.</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `TCTRL`)" bitfield="" bitfield_expr="`OUT_TRIG_EN`" 
                           value="(getBitFieldValue($instance.getPeripheral(), ($parent.getParent().getSetting(`sm_prefix`).getValue() + `TCTRL`), `OUT_TRIG_EN`) &amp; ~(1 &lt;&lt; $this.getSetItemValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $this.getSetItemValue().toInt()) : 0)" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $this.getSetItemValue().toInt())) != 0)"/>
                    </assign>
                </item>
            </set>
            <enum id="triggerFrequency_t" label="Trigger frequency" from="_pwm_clock_source">
                <assign when="true">
                    <register name="" name_expr="($parent.getSetting(`sm_prefix`).getValue() + `TCTRL`)" bitfield="" bitfield_expr="`TRGFRQ`" 
                       value="$this.getEnumItemId().toInt()" 
                       reverse_value="x -> x.toString()"/>
                </assign>
                <item id="0" label="Every PWM period" value="0">
                    <description>Trigger outputs are generated during every PWM period even if the PWM is not reloaded every period due to CTRL[LDFQ] being non-zero.</description>
                </item>
                <item id="1" label="Every reload opportunity" value="1">
                    <description>Trigger outputs are generated only during the final PWM period prior to a reload opportunity when the PWM is not reloaded every period due to CTRL[LDFQ] being non-zero.</description>
                </item>
            </enum>
            <enum id="triggerSource0_t" label="Output trigger 0 source" from="_pwm_clock_source" available="$instance.getPeripheral().bitfieldExists(($parent.getSetting(`sm_prefix`).getValue() + `TCTRL`),`PWAOT0`)">
                <assign when="true">
                    <register name="" name_expr="($parent.getSetting(`sm_prefix`).getValue() + `TCTRL`)" bitfield="" bitfield_expr="`PWAOT0`" 
                       value="$this.getEnumItemId().toInt()" 
                       reverse_value="x -> x.toString()"/>
                </assign>
                <item id="0" label="Compare VAL0,2,4" value="0">
                    <description>PWM_MUX_TRIG0 signal is fed from even VAL compare selected in the Output trigger sources item.</description>
                </item>
                <item id="1" label="PWMA output" value="1">
                    <description>PWM_MUX_TRIG0 signal is fed directly from PWMA output.</description>
                </item>
            </enum>
            <enum id="triggerSource1_t" label="Output trigger 1 source" from="_pwm_clock_source" available="$instance.getPeripheral().bitfieldExists(($parent.getSetting(`sm_prefix`).getValue() + `TCTRL`),`PWBOT1`)">
                <assign when="true">
                    <register name="" name_expr="($parent.getSetting(`sm_prefix`).getValue() + `TCTRL`)" bitfield="" bitfield_expr="`PWBOT1`" 
                       value="$this.getEnumItemId().toInt()" 
                       reverse_value="x -> x.toString()"/>
                </assign>
                <item id="0" label="Compare VAL1,3,5" value="0">
                    <description>PWM_MUX_TRIG1 signal is fed from even VAL compare selected in the Output trigger sources item.</description>
                </item>
                <item id="1" label="PWMB output" value="1">
                    <description>PWM_MUX_TRIG1 signal is fed directly from PWMB output.</description>
                </item>
            </enum>
            <!-- For the future: let the ids and values be bus clock here, even if the main clock source is now selectable in the Clocks tool and item is now called PWM clock source -->
            <enum id="bus_clock_source_t" label="PWM clock source selection" from="_pwm_clock_source">
                <description></description>
                <item id="kPWM_BusClock" label_expr="`PWM clock (` + frequencyToString($configSet.clockSourceFreq.getEnumItemValue().getFreq(`Hz`,`Hz`)) + `)`" value="Bus_clock">
                    <description>The PWM clock is used as the clock</description>
                </item>
            </enum>
            <enum id="pwm_clock_source_t" label="PWM clock source selection" from="_pwm_clock_source">
                <description></description>
                <!-- <item id="kPWM_BusClock" label="The IPBus clock is used as the clock" value="BusInterfaceClock_b00">
                    <description>The IPBus clock is used as the clock</description>
                </item> -->
                <item id="kPWM_ExternalClock" label="EXT_CLK is used as the clock" value="ExternalClock_b01">
                    <description>EXT_CLK is used as the clock</description>
                </item>
                <item id="kPWM_Submodule0Clock" label="Clock of the submodule 0 (AUX_CLK) is used as the source clock" value="AUXClock_b10">
                    <description>Clock of the submodule 0 (AUX_CLK) is used as the source clock</description>
                </item>
            </enum>
            <enum id="pwm_clock_prescale_t" label="PWM prescaler factor selection for clock source" from="_pwm_clock_prescale">                
                <assign when="true">
                    <register name="" name_expr="$parent.sm_prefix.getValue() + `CTRL`" bitfield="PRSC" value="$this.getEnumItemId().toInt()" reverse_value="x -> x.toString()"/>
                </assign>
                <item id="0" label="1" value="0">
                    <description>PWM clock frequency = fclk/1</description>
                </item>
                <item id="1" label="2" value="1">
                    <description>PWM clock frequency = fclk/2</description>
                </item>
                <item id="2" label="4" value="2">
                    <description>PWM clock frequency = fclk/4</description>
                </item>
                <item id="3" label="8" value="3">
                    <description>PWM clock frequency = fclk/8</description>
                </item>
                <item id="4" label="16" value="4">
                    <description>PWM clock frequency = fclk/16</description>
                </item>
                <item id="5" label="32" value="5">
                    <description>PWM clock frequency = fclk/32</description>
                </item>
                <item id="6" label="64" value="6">
                    <description>PWM clock frequency = fclk/64</description>
                </item>
                <item id="7" label="128" value="7">
                    <description>PWM clock frequency = fclk/128</description>
                </item>
            </enum>
            <enum id="pwm_force_output_trigger_t" label="Options that can trigger a PWM FORCE_OUT" from="_pwm_force_output_trigger">
                <assign when="true">
                    <register name="" name_expr="$parent.sm_prefix.getValue() + `CTRL2`" bitfield="FORCE_SEL" value="$this.getEnumItemId().toInt()" reverse_value="x -> x.toString()"/>
                </assign>
                <item id="0" label="Local FORCE">
                    <description>The local FORCE signal, CTRL2[FORCE], from the submodule is used to force updates</description>
                </item>
                <item id="1" label="Master FORCE" available="($parent.sm_number.getValue() != `0`)">
                    <description>The master FORCE signal from submodule 0 is used to force updates</description>
                </item>
                <item id="2" label="Local RELOAD without regard to LDOK">
                    <description>The local RELOAD signal from this submodule is used to force updates without regard to the state of LDOK</description>
                </item>
                <item id="3" label="Master RELOAD if LDOK is set" available="($parent.sm_number.getValue() != `0`)">
                    <description>The master RELOAD signal from submodule 0 is used to force updates if LDOK is set</description>
                </item>
                <item id="4" label="Local SYNC">
                    <description>The local SYNC signal from this submodule is used to force updates</description>
                </item>
                <item id="5" label="Master SYNC" available="($parent.sm_number.getValue() != `0`)">
                    <description>The master SYNC signal from submodule0 is used to force updates</description>
                </item>
                <item id="6" label="EXT_FORCE">
                    <description>The external force signal, EXT_FORCE, from outside the PWM module causes updates</description>
                </item>
                <item id="7" label="EXT_SYNC">
                    <description>The external SYNC signal, EXT_SYNC, from outside the PWM module causes updates</description>
                </item>
            </enum>
            <enum id="pwm_force_init_value_t" label="Options that can trigger a PWM FORCE_OUT" from="_pwm_force_output_trigger">
                <item id="0" label="Logic 0">
                    <description>PWM signal is set to logic level 0 when FORCE_OUT event occures.</description>
                </item>
                <item id="1" label="Logic 1">
                    <description>PWM signal is set to logic level 1 when FORCE_OUT event occures.</description>
                </item>
            </enum>
            <struct id="reloadControl_t" label="Reload config structure" from="_pwm_config">
                <variable id="sm_number" value="$parent.getParent().getSetting(`sm_number`).getValue()"/>
                <variable id="sm_prefix" value="$parent.getParent().getSetting(`sm_prefix`).getValue()"/>
                <bool id="reloadImmediate" label="Reload immediately">
                    <description>Buffered-registers get loaded with new values as soon as LDOK bit is set.</description>
                    <assign when="true">
                        <register name_expr="$parent.sm_prefix.getValue() + `CTRL`" bitfield="LDMOD" value="($this.getValue() ? 1 : 0)" reverse_value="(x -> (x == 1) ? true : false)"/>
                    </assign>
                </bool>
                <reference id="reloadLogic" label="Reload logic setup" type="pwm_register_reload_t">
                    <description>PWM Reload logic setup, this selection is overidden when Reload immediately item is choosen.</description>
                </reference>
                <reference id="reloadSelect" label="Reload source select" type="pwm_reload_source_select_t">
                    <description>Reload source select, Master RELOAD option is available only on submodules other than 0 (which is master submodule itself).</description>
                </reference>
                <reference id="reloadFrequency" label="Reload frequency" type="pwm_load_frequency_t">
                    <description>Specifies when to reload, used when user&apos;s choice is not immediate reload</description>
                </reference>
            </struct>
            <struct id="forceControl_t" label="Force config structure" from="_pwm_config">
                <variable id="sm_number" value="$parent.getParent().getSetting(`sm_number`).getValue()"/>
                <variable id="sm_prefix" value="$parent.getParent().getSetting(`sm_prefix`).getValue()"/>
                <reference id="forceTrigger" label="FORCE_OUT trigger" type="pwm_force_output_trigger_t">
                    <description>Specify which signal will trigger a FORCE_OUT event</description>
                    <validation>
                        <dependency when_expr="($this.getEnumItemId() == `6`)"
                         resource_type="PeripheralUnifiedSignal" 
                         resource_id_expr="$instance.getPeripheral() + `.pwm_force`" 
                         description_expr="$instance.getPeripheral() + `.FORCE pin needs to be routed`" level="Warning">
                            <feature name="routed" evaluation="equal">
                               <data expr="true"/>
                            </feature>
                        </dependency>
                        <dependency when_expr="($this.getEnumItemId() == `7`)"
                         resource_type="PeripheralUnifiedSignal" 
                         resource_id_expr="$instance.getPeripheral() + `.pwm_ext_sync.` + ($parent.sm_number.getValue())" 
                         description_expr="$instance.getPeripheral() + `.EXT_SYNC, ` + ($parent.sm_number.getValue()) + ` pin needs to be routed`" level="Warning">
                            <feature name="routed" evaluation="equal">
                               <data expr="true"/>
                            </feature>
                        </dependency>
                    </validation>
                </reference>
                <reference id="pwm23Init" label="PWM23 initial value" type="pwm_force_init_value_t">
                    <description>Specify value which will be set as initial value of signal PWM23 when FORCE_OUT event ocurred</description>
                    <assign when="true">
                        <register name="" name_expr="$parent.sm_prefix.getValue() + `CTRL2`" bitfield="PWM23_INIT" value="$this.getEnumItemId().toInt()" reverse_value="x -> x.toString()"/>
                    </assign>
                </reference>
                <reference id="pwm45Init" label="PWM45 initial value" type="pwm_force_init_value_t">
                    <description>Specify value which will be set as initial value of signal PWM45 when FORCE_OUT event ocurred</description>
                    <assign when="true">
                        <register name="" name_expr="$parent.sm_prefix.getValue() + `CTRL2`" bitfield="PWM45_INIT" value="$this.getEnumItemId().toInt()" reverse_value="x -> x.toString()"/>
                    </assign>
                </reference>
                <reference id="pwmxInit" label="PWMX initial value" type="pwm_force_init_value_t">
                    <description>Specify value which will be set as initial value of signal PWMX when FORCE_OUT event ocurred</description>
                    <assign when="true">
                        <register name="" name_expr="$parent.sm_prefix.getValue() + `CTRL2`" bitfield="PWMX_INIT" value="$this.getEnumItemId().toInt()" reverse_value="x -> x.toString()"/>
                    </assign>
                </reference>
                <bool id="forceEn" label="Initialize counter by FORCE_OUT">
                    <description>This item allows to initialize counter and PWM23/PWM45/PWMX signal by FORCE_OUT event regardless to signal selected in Initialize counter by item.</description>
                    <assign when="true">
                        <register name_expr="$parent.sm_prefix.getValue() + `CTRL2`" bitfield="FRCEN" value="($this.getValue() ? 1 : 0)" reverse_value="(x -> (x == 1) ? true : false)"/>
                    </assign>
                </bool>                
            </struct>
            <enum id="pwm_init_source_t" label="PWM counter initialization options" from="_pwm_init_source">
                <assign when="true">
                    <register name="" name_expr="$parent.sm_prefix.getValue() + `CTRL2`" bitfield="INIT_SEL" value="$this.getEnumItemId().toInt()" reverse_value="x -> x.toString()"/>
                </assign>
                <item id="0" label="Local SYNC">
                    <description>Local SYNC signal causes initialization</description>
                </item>
                <item id="1" label="Master RELOAD" available="($parent.sm_number.getValue() != `0`)">
                    <description>Master RELOAD signal from submodule 0 causes initialization</description>
                </item>
                <item id="2" label="Master SYNC" available="($parent.sm_number.getValue() != `0`)">
                    <description>Master SYNC signal from submodule 0 causes initialization, this signal can be delayed by number of ticks defined in the Phase delay item below.</description>
                </item>
                <item id="3" label="EXT_SYNC">
                    <description>EXT_SYNC signal causes initialization</description>
                </item>
            </enum>
            <enum id="pwm_load_frequency_t" label="PWM load frequency selection" from="_pwm_load_frequency">
                <assign when="true">
                    <register name="" name_expr="$parent.sm_prefix.getValue() + `CTRL`" bitfield="LDFQ" value="$this.getEnumItemId().toInt()" reverse_value="x -> x.toString()"/>
                </assign>
                <item id="0" label="Every PWM opportunity">
                    <description>Every PWM opportunity</description>
                </item>
                <item id="1" label="Every 2 PWM opportunities">
                    <description>Every 2 PWM opportunities</description>
                </item>
                <item id="2" label="Every 3 PWM opportunities">
                    <description>Every 3 PWM opportunities</description>
                </item>
                <item id="3" label="Every 4 PWM opportunities">
                    <description>Every 4 PWM opportunities</description>
                </item>
                <item id="4" label="Every 5 PWM opportunities">
                    <description>Every 5 PWM opportunities</description>
                </item>
                <item id="5" label="Every 6 PWM opportunities">
                    <description>Every 6 PWM opportunities</description>
                </item>
                <item id="6" label="Every 7 PWM opportunities">
                    <description>Every 7 PWM opportunities</description>
                </item>
                <item id="7" label="Every 8 PWM opportunities">
                    <description>Every 8 PWM opportunities</description>
                </item>
                <item id="8" label="Every 9 PWM opportunities">
                    <description>Every 9 PWM opportunities</description>
                </item>
                <item id="9" label="Every 10 PWM opportunities">
                    <description>Every 10 PWM opportunities</description>
                </item>
                <item id="10" label="Every 11 PWM opportunities">
                    <description>Every 11 PWM opportunities</description>
                </item>
                <item id="11" label="Every 12 PWM opportunities">
                    <description>Every 12 PWM opportunities</description>
                </item>
                <item id="12" label="Every 13 PWM opportunities">
                    <description>Every 13 PWM opportunities</description>
                </item>
                <item id="13" label="Every 14 PWM opportunities">
                    <description>Every 14 PWM opportunities</description>
                </item>
                <item id="14" label="Every 15 PWM opportunities">
                    <description>Every 15 PWM opportunities</description>
                </item>
                <item id="15" label="Every 16 PWM opportunities">
                    <description>Every 16 PWM opportunities</description>
                </item>
            </enum>
            <enum id="pwm_fault_input_t" label="List of PWM fault selections" from="_pwm_fault_input">
                <description></description>
                <item id="kPWM_Fault_0" label="Fault 0 input pin">
                    <description>Fault 0 input pin</description>
                </item>
                <item id="kPWM_Fault_1" label="Fault 1 input pin">
                    <description>Fault 1 input pin</description>
                </item>
                <item id="kPWM_Fault_2" label="Fault 2 input pin">
                    <description>Fault 2 input pin</description>
                </item>
                <item id="kPWM_Fault_3" label="Fault 3 input pin">
                    <description>Fault 3 input pin</description>
                </item>
            </enum>
            <enum id="pwm_input_capture_edge_t" label="PWM capture edge select" from="_pwm_input_capture_edge">                
                <assign when="true">
                    <register name="" name_expr="$parent.sm_prefix.getValue() + `CAPTCTRL` + $parent.channel_label.getValue()" bitfield="" bitfield_expr="(`EDG` + $parent.channel_label.getValue() + (($this.getId() == `edge0`) ? `0` : (`1`)))" value="$this.getEnumItemId().toInt()" reverse_value="x -> x.toString()"/>
                </assign>
                <item id="0" label="None">
                    <description>Disabled</description>
                </item>
                <item id="1" label="Falling edge">
                    <description>Capture on falling edge only</description>
                </item>
                <item id="2" label="Rising edge">
                    <description>Capture on rising edge only</description>
                </item>
                <item id="3" label="Both edges">
                    <description>Capture on rising or falling edge</description>
                </item>
            </enum>
            <enum id="pwm_force_signal_t" label="PWM output options when a FORCE_OUT signal is asserted" from="_pwm_force_signal">
                <assign when="true">
                    <register name="DTSRCSEL" bitfield="" bitfield_expr="$parent.sm_prefix.getValue() + (`SEL` + ($parent.optionValue(`pmwSignal`)))" value="$this.getEnumItemId().toInt()" reverse_value="x -> x.toString()"/>
                </assign>
                <item id="0" label="PWM signal">
                    <description>PWM signal generated from the counter is used by the deadtime logic.</description>
                </item>
                <item id="1" label="Inverted PWM signal">
                    <description>Inverted PWM signal generated from the counter is used by the deadtime logic.</description>
                </item>
                <item id="2" label="SW controlled value">
                    <description>Software controlled value is used by the deadtime logic.</description>
                </item>
                <item id="3" label_expr="`EXT` + (($parent.optionValue(`pmwSignal`) == `23`) ?  `A` : `B`) + ` signal`">
                    <description>Appropriate external input signal is used by the deadtime logic.</description>
                </item>
            </enum>
            <enum id="compareMode_t" label="Compare mode" from="_pwm_chnl_pair_operation">
                <description></description>
                <assign when="true">
                    <register name="" name_expr="$parent.sm_prefix.getValue() + `CTRL`" bitfield="COMPMODE" value="$this.getEnumItemId().toInt()" reverse_value="x -> x.toString()"/>
                </assign>
                <item id="0" label="Equal">
                    <description>The VAL* registers and the PWM counter are compared using an "equal to" method. This means that PWM edges are only produced when the counter is equal to one of the VAL* register values. This implies that a PWMA output that is high at the end of a period will maintain this state until a match with VAL3 clears the output in the following period.</description>
                </item>
                <item id="1" label="Equal to or greater than">
                    <description>The VAL* registers and the PWM counter are compared using an "equal to or greater than" method. This means that PWM edges are produced when the counter is equal to or greater than one of the VAL* register values. This implies that a PWMA output that is high at the end of a period could go low at the start of the next period if the starting counter value is greater than (but not necessarily equal to) the new VAL3 value.</description>
                </item>
            </enum>
            <enum id="pwm_chnl_pair_operation_t" label="Options available for the PWM A &amp; B pair operation" from="_pwm_chnl_pair_operation">
                <description></description>
                <assign when="true">
                    <register name="" name_expr="$parent.sm_prefix.getValue() + `CTRL2`" bitfield="INDEP" value="$this.getEnumItemId().toInt()" reverse_value="x -> x.toString()"/>
                </assign>
                <item id="0" label="Complementary">
                    <description>PWM A &amp; PWM B are complementary channels</description>
                </item>
                <item id="1" label="Independent">
                    <description>PWM A &amp; PWM B operate as 2 independent channels</description>
                </item>
            </enum>
            <enum id="pwm_main_chnl_pair_operation_t" label="Main channel" from="_pwm_chnl_pair_operation">
                <description></description>
                <assign when="true">
                    <register peripheral_expr="$instance.getPeripheral()" name_expr="`MCTRL`" bitfield="IPOL" value="((getBitFieldValue($instance.getPeripheral(), `MCTRL`, `IPOL`) &amp; ~(1 &lt;&lt; $parent.sm_number.getValue().toInt())) | ($this.getEnumItemId().toInt() &lt;&lt; $parent.sm_number.getValue().toInt()))" reverse_value="x -> (((x &amp; (1 &lt;&lt; $parent.sm_number.getValue().toInt())) == (1 &lt;&lt; $parent.sm_number.getValue().toInt())) ? `1` : `0`)"/>
                </assign>
                <item id="0" label="PWM23">
                    <description>Signal PWM23 is taken as main in compolementary mode</description>
                </item>
                <item id="1" label="PWM45">
                    <description>Signal PWM45 is taken as main in compolementary mode</description>
                </item>
            </enum>
            <struct id="deadtime_logic_input_t" label="Structure for deadtime features" from="_pwm_signal_param">
                <variable id="sm_number" value="$parent.getParent().getParent().getSetting(`sm_number`).getValue()"/>
                <variable id="sm_prefix" value="$parent.getParent().getParent().getSetting(`sm_prefix`).getValue()"/>
                <variable id="channel_label" value="(($parent.optionValue(`pmwSignal`) == `23`) ?  `A` : `B`)"/>
                <reference id="deadtime_input_by_force" label="Deadtime logic input" type="pwm_force_signal_t" options="remove_from_struct_init">
                    <description>Selects which input to the deadtime logic will be choosen by the FORCE_OUT signal trigger. It is used even if the deadtime logic is bypassed (channel A and B independent mode).</description>
                    <validation>
                        <dependency when_expr="($this.getEnumItemId() == `3`)"
                             resource_type="PeripheralUnifiedSignal" 
                             resource_id_expr="$instance.getPeripheral() + `.pwm_ext` + `.` + toLowerCase($parent.channel_label.getValue()) +  $parent.sm_number.getValue()" 
                             description_expr="$instance.getPeripheral() + `.PWM_EXT` + `, ` + ($parent.channel_label.getValue()) + $parent.sm_number.getValue() + ` pin needs to be routed`" level="Warning">
                            <feature name="routed" evaluation="equal">
                               <data expr="true"/>
                            </feature>
                        </dependency>
                    </validation>
                </reference>
                <reference id="SW_value" label="SW controlled value" type="pwm_sw_control_select_t" options="remove_from_struct_init">
                    <description>SW driven PWM output value, can be used when switch Deadtime logic input to SW control during runtime.</description>
                </reference>
                <variable id="b_SW_value" value="(($parent.SW_value.getEnumItemId() == `kPWM_Logic1`) ? true : false)"/>
            </struct>            
            <struct id="deadtime_logic_inputs_t" label="Structure for deadtime logic inputs" from="_pwm_signal_param" options="UI_MULTI_COLUMN=2">
                <reference id="pwm23" label="Dead time logic input PWM23" type="deadtime_logic_input_t" options="remove_from_struct_init; pmwSignal=23">
                    <description>Force logic output and also deadtime input signal PWM23 settings.</description>
                </reference>
                <reference id="pwm45" label="Dead time logic input PWM45" type="deadtime_logic_input_t" options="remove_from_struct_init; pmwSignal=45">
                    <description>Force logic output and also deadtime input signal PWM45 settings.</description>
                </reference>
            </struct>
            <struct id="deadtime_param_t" label="Structure for deadtime features" from="_pwm_signal_param">
                <variable id="sm_number" value="$parent.getParent().getParent().getSetting(`sm_number`).getValue()"/>
                <variable id="sm_prefix" value="$parent.getParent().getParent().getSetting(`sm_prefix`).getValue()"/>
                <dynamic_enum id="clockSource" label="Deadtime clock source" options="remove_from_struct_init" items="enumItemsOf($configSet._busClockSource).arrayToEnumItems(
                   enumItem -> true,
                   enumItem -> enumItem.getID(),
                   enumItem -> enumItem.getLabel(),
                   enumItem -> enumItem.getValue())">
                   <description>Clock source for the deadtime down-counter.</description>                  
                </dynamic_enum>
                <integer id="deadtimeValue" label_expr="`Deadtime DT` + $parent.optionValue(`dtColumNum`) + ` [ticks]`" type="uint16_t" max_expr="2047">
                    <description>Number of down-counter ticks. Specifies deadtime delay (see datasheet of the transistor on the output for off delay). Only used if channel pair is operating in complementary mode.</description>
                    <assign when="($parent.optionValue(`dtColumNum`) == 0) ? (!$parent.getParent().getParent().getSetting(`fracControl.fracEn.A`).getValue()) : (!$parent.getParent().getParent().getSetting(`fracControl.fracEn.B`).getValue())">
                        <register name="" name_expr="$parent.sm_prefix.getValue() + `DTCNT` + $parent.optionValue(`dtColumNum`)" bitfield="" bitfield_expr="`DTCNT` + $parent.optionValue(`dtColumNum`)" value="($this.getValue() &amp; 0x07ff)" reverse_value="x -> (x &amp; 0x07ff)"/>
                    </assign>
                    <assign when="($parent.optionValue(`dtColumNum`) == 0) ? ($parent.getParent().getParent().getSetting(`fracControl.fracEn.A`).getValue()) : ($parent.getParent().getParent().getSetting(`fracControl.fracEn.B`).getValue())">
                        <register name="" name_expr="$parent.sm_prefix.getValue() + `DTCNT` + $parent.optionValue(`dtColumNum`)" bitfield="" bitfield_expr="`DTCNT` + $parent.optionValue(`dtColumNum`)" value="((getBitFieldValue($instance.getPeripheral(), $parent.sm_prefix.getValue() + `DTCNT` + $parent.optionValue(`dtColumNum`),`DTCNT` + $parent.optionValue(`dtColumNum`)) &amp; 0x001f) | ($this.getValue() &lt;&lt; 5))" reverse_value="x -> ((x &amp; 0xffe0) &gt;&gt; 5)"/>
                    </assign>
                </integer>
                <integer id="deadtimeValueFrac" label_expr="`Deadtime DT` + $parent.optionValue(`dtColumNum`) + ` fractional [ticks]`" type="uint8_t" max_expr="31" available="($parent.optionValue(`dtColumNum`) == 0) ? ($parent.getParent().getParent().getSetting(`fracControl.fracEn.A`).getValue()) : ($parent.getParent().getParent().getSetting(`fracControl.fracEn.B`).getValue())">
                    <description expr="`Number represents the fractional part (this value/32) added to the` + `Deadtime DT` + $parent.optionValue(`dtColumNum`) + ` item above. Only used if channel pair is operating in complementary mode. And the fractional delay for ` + (($parent.optionValue(`dtColumNum`) == 0) ? `FRACVAL2/FRACVAL3` : `FRACVAL4/FRACVAL5`) + ` is enabled.`"></description>
                    <assign when="($parent.optionValue(`dtColumNum`) == 0) ? ($parent.getParent().getParent().getSetting(`fracControl.fracEn.A`).getValue()) : ($parent.getParent().getParent().getSetting(`fracControl.fracEn.B`).getValue())">
                        <register name="" name_expr="$parent.sm_prefix.getValue() + `DTCNT` + $parent.optionValue(`dtColumNum`)" bitfield="" bitfield_expr="`DTCNT` + $parent.optionValue(`dtColumNum`)" value="((getBitFieldValue($instance.getPeripheral(), $parent.sm_prefix.getValue() + `DTCNT` + $parent.optionValue(`dtColumNum`),`DTCNT` + $parent.optionValue(`dtColumNum`)) &amp; 0xffe0) | $this.getValue())" reverse_value="x -> (x &amp; 0x001f)"/>
                    </assign>
                </integer>
                <info id="i_deadtime" label="Calculated deadtime" value="$parent.deadtimeValueFrac.isAvailable() ? ((($parent.deadtimeValue.getValue() == 0) &amp;&amp; ($parent.deadtimeValueFrac.getValue() == 0)) ? `0 s` : 
                timeToString(1000000.0 / (1.0 * (toHertz($configSet.clockSourceFreq.getEnumItemValue()) / (1.0 * ($parent.deadtimeValue.getValue() + (1.0 *  $parent.deadtimeValueFrac.getValue() / 32))))))) : (($parent.deadtimeValue.getValue() == 0) ? `0 s` : (system::calculatePeriodRationalClk(toHertz($parent.deadtimeValue.getValue()),toHertz($configSet.clockSourceFreq.getEnumItemValue()))))">
                <description expr="`Calculated deadtime DT` + $parent.optionValue(`dtColumNum`) + ` delay.`"/>
                </info>
            </struct>
            <struct id="deadtime_params_t" label="Structure for deadtime features" from="_pwm_signal_param" options="UI_MULTI_COLUMN=2">
                <reference id="deadTime0" label="Dead time 0 settings" type="deadtime_param_t" options="remove_from_struct_init; dtColumNum=0">
                    <description>Rising edge deadtime selection</description>
                </reference>
                <reference id="deadTime1" label="Dead time 1 settings" type="deadtime_param_t" options="remove_from_struct_init; dtColumNum=1">
                    <description>Falling edge deadtime selection</description>
                </reference>
            </struct>
            <enum id="pwm_register_reload_t" label="Options available on how to load the buffered-registers with new values" from="_pwm_register_reload">
                <description></description>
                <assign when="true">
                    <register name_expr="$parent.sm_prefix.getValue() + `CTRL`" bitfield="HALF" value="((($this.getEnumItemId() == `kPWM_ReloadPwmHalfCycle`) || ($this.getEnumItemId() == `kPWM_ReloadPwmHalfAndFullCycle`)) ? 1 : 0)" reverse_value="x -> (((x == 1) &amp;&amp; (getBitFieldValue($instance.getPeripheral(), $parent.sm_prefix.getValue() + `CTRL`,`FULL`) == 1)) ? `kPWM_ReloadPwmHalfAndFullCycle` : ((x == 1) ? `kPWM_ReloadPwmHalfCycle` : ((getBitFieldValue($instance.getPeripheral(), $parent.sm_prefix.getValue() + `CTRL`,`FULL`) == 1) ? `kPWM_ReloadPwmFullCycle` : `kPWM_NoReload`)))"/>
                    <register name_expr="$parent.sm_prefix.getValue() + `CTRL`" bitfield="FULL" value="((($this.getEnumItemId() == `kPWM_ReloadPwmFullCycle`) || ($this.getEnumItemId() == `kPWM_ReloadPwmHalfAndFullCycle`)) ? 1 : 0)" reverse_value="x -> (((x == 1) &amp;&amp; (getBitFieldValue($instance.getPeripheral(), $parent.sm_prefix.getValue() + `CTRL`,`HALF`) == 1)) ? `kPWM_ReloadPwmHalfAndFullCycle` : ((x == 1) ? `kPWM_ReloadPwmFullCycle` : `kPWM_ReloadPwmHalfCycle`))"/>
                </assign>
                <!-- <item id="kPWM_ReloadImmediate" label="Immediate">
                    <description>Buffered-registers get loaded with new values as soon as LDOK bit is set</description>
                </item> -->
                <item id="kPWM_NoReload" label="No reload">
                    <description>Registers are not reloaded</description>
                </item>
                <item id="kPWM_ReloadPwmFullCycle" label="Full cycle">
                    <description>Registers loaded on a PWM full cycle</description>
                </item>
                <item id="kPWM_ReloadPwmHalfCycle" label="Half cycle">
                    <description>Registers loaded on a PWM half cycle</description>
                </item>
                <item id="kPWM_ReloadPwmHalfAndFullCycle" label="Half &amp; full cycle">
                    <description>Registers loaded on a PWM half &amp; full cycle</description>
                </item>
            </enum>
            <enum id="pwm_fault_recovery_mode_t" label="Options available on how to re-enable the PWM output when recovering from a fault" from="_pwm_fault_recovery_mode">
                <assign when="true">
                    <register name="" name_expr="`FSTS` + $parent.fault_channel_num.getValue()" bitfield="FHALF" value="((getBitFieldValue($instance.getPeripheral(), `FSTS` + $parent.fault_channel_num.getValue(), `FHALF`) &amp; ~(1 &lt;&lt; $parent.getId().toInt())) | (((($this.getEnumItemId() == `kPWM_RecoverHalfCycle`) || ($this.getEnumItemId() == `kPWM_RecoverHalfAndFullCycle`)) ? 1 : 0) &lt;&lt; $parent.getId().toInt()))" reverse_value="x -> (((x &amp; (1 &lt;&lt; $parent.getId().toInt())) != 0) ? (((getBitFieldValue($instance.getPeripheral(), `FSTS` + $parent.fault_channel_num.getValue(), `FFULL`) &amp; (1 &lt;&lt; $parent.getId().toInt())) != 0) ? `kPWM_RecoverHalfAndFullCycle`: `kPWM_RecoverHalfCycle`) : (((getBitFieldValue($instance.getPeripheral(), `FSTS` + $parent.fault_channel_num.getValue(), `FFULL`) &amp; (1 &lt;&lt; $parent.getId().toInt())) != 0) ? `kPWM_RecoverFullCycle`: `kPWM_NoRecovery`))"/>
                    <register name="" name_expr="`FSTS` + $parent.fault_channel_num.getValue()" bitfield="FFULL" value="((getBitFieldValue($instance.getPeripheral(), `FSTS` + $parent.fault_channel_num.getValue(), `FFULL`) &amp; ~(1 &lt;&lt; $parent.getId().toInt())) | (((($this.getEnumItemId() == `kPWM_RecoverFullCycle`) || ($this.getEnumItemId() == `kPWM_RecoverHalfAndFullCycle`)) ? 1 : 0) &lt;&lt; $parent.getId().toInt()))" reverse_value="x -> (((x &amp; (1 &lt;&lt; $parent.getId().toInt())) != 0) ? (((getBitFieldValue($instance.getPeripheral(), `FSTS` + $parent.fault_channel_num.getValue(), `FHALF`) &amp; (1 &lt;&lt; $parent.getId().toInt())) != 0) ? `kPWM_RecoverHalfAndFullCycle`: `kPWM_RecoverFullCycle`) : (((getBitFieldValue($instance.getPeripheral(), `FSTS` + $parent.fault_channel_num.getValue(), `FHALF`) &amp; (1 &lt;&lt; $parent.getId().toInt())) != 0) ? `kPWM_RecoverHalfCycle`: `kPWM_NoRecovery`))"/>
                </assign>
                <item id="kPWM_NoRecovery" label="Stay inactive">
                    <description>PWM output will stay inactive</description>
                </item>
                <item id="kPWM_RecoverHalfCycle" label="At the first half cycle">
                    <description>PWM output re-enabled at the first half cycle</description>
                </item>
                <item id="kPWM_RecoverFullCycle" label="At the first full cycle">
                    <description>PWM output re-enabled at the first full cycle</description>
                </item>
                <item id="kPWM_RecoverHalfAndFullCycle" label="At the first half or full cycle">
                    <description>PWM output re-enabled at the first half or full cycle</description>
                </item>
            </enum>
            <enum id="pllMonitor_t" label="Pll monitor options" from="_monitor">
                <assign when="true">
                    <register name="MCTRL2" bitfield="MONPLL"
                       value="$this.getEnumItemId().toInt()" 
                       reverse_value="x -> x.toString()"/>
                </assign>
                <item id="0" label="Not locked, do not monitor PLL">
                    <description>Not locked. Do not monitor PLL operation. Resetting of the fractional delay block in case of PLL losing lock will be controlled by software.</description>
                </item>
                <item id="1" label="Not locked, monitor PLL">
                    <description>Not locked. Monitor PLL operation to automatically disable the fractional delay block when the PLL encounters problems.</description>
                </item>  
                <item id="2" label="Locked, do not monitor PLL">
                    <description>Locked. Do not monitor PLL operation. Resetting of the fractional delay block in case of PLL losing lock will be controlled by software. These bits are write protected until the next reset.</description>
                </item>  
                <item id="3" label="Locked, monitor PLL">
                    <description>Locked. Monitor PLL operation to automatically disable the fractional delay block when the PLL encounters problems.</description>
                </item>                
            </enum> 
            <enum id="writeProtect_t" label="Write protect options" from="_monitor">
                <assign when="true">
                    <register name="MCTRL2" bitfield="WRPROT"
                       value="$this.getEnumItemId().toInt()" 
                       reverse_value="x -> x.toString()"/>
                </assign>
                <item id="0" label="Off">
                    <description>Appropriate bitfields are not write protected.</description>
                </item>
                <item id="1" label="On">
                    <description>Appropriate bitfields are write protected.</description>
                </item>  
                <item id="2" label="Off and locked until chip reset">
                    <description>Appropriate bitfields are not write protected. Bitfield MCTRL2[WRPROT] interconnected with the setting can be modified only after chip reset.</description>
                </item>  
                <item id="3" label="On and locked until chip reset">
                    <description>Appropriate bitfields are write protected. Bitfield MCTRL2[WRPROT] interconnected with the setting can be modified only after chip reset.</description>
                </item>                
            </enum>  
            <set id="main_config_interrupt_enable_t" label="List of PWM interrupt options">                
                <item id="kPWM_CompareVal0InterruptEnable" label="VAL0 compare" value="0">
                    <description>PWM VAL0 compare interrupt</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `INTEN`)" bitfield="" bitfield_expr="(`CMPIE`)" 
                           value="((getBitFieldValue($instance.getPeripheral(), ($parent.getParent().getSetting(`sm_prefix`).getValue() + `INTEN`), (`CMPIE`)) &amp; ~(1 &lt;&lt; $this.getSetItemValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $this.getSetItemValue().toInt()) : 0))" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $this.getSetItemValue().toInt())) != 0)"/>
                    </assign>
                </item>
                <item id="kPWM_CompareVal1InterruptEnable" label="VAL1 compare" value="1">
                    <description>PWM VAL1 compare interrupt</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `INTEN`)" bitfield="" bitfield_expr="(`CMPIE`)" 
                           value="((getBitFieldValue($instance.getPeripheral(), ($parent.getParent().getSetting(`sm_prefix`).getValue() + `INTEN`), (`CMPIE`)) &amp; ~(1 &lt;&lt; $this.getSetItemValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $this.getSetItemValue().toInt()) : 0))" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $this.getSetItemValue().toInt())) != 0)"/>
                    </assign>
                </item>                                                         
                <item id="kPWM_CompareVal2InterruptEnable" label="VAL2 compare" value="2">
                    <description>PWM VAL2 compare interrupt</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `INTEN`)" bitfield="" bitfield_expr="(`CMPIE`)" 
                           value="((getBitFieldValue($instance.getPeripheral(), ($parent.getParent().getSetting(`sm_prefix`).getValue() + `INTEN`), (`CMPIE`)) &amp; ~(1 &lt;&lt; $this.getSetItemValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $this.getSetItemValue().toInt()) : 0))" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $this.getSetItemValue().toInt())) != 0)"/>
                    </assign>
                </item>                                                         
                <item id="kPWM_CompareVal3InterruptEnable" label="VAL3 compare" value="3">
                    <description>PWM VAL3 compare interrupt</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `INTEN`)" bitfield="" bitfield_expr="(`CMPIE`)" 
                           value="((getBitFieldValue($instance.getPeripheral(), ($parent.getParent().getSetting(`sm_prefix`).getValue() + `INTEN`), (`CMPIE`)) &amp; ~(1 &lt;&lt; $this.getSetItemValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $this.getSetItemValue().toInt()) : 0))" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $this.getSetItemValue().toInt())) != 0)"/>
                    </assign>                    
                </item>                                                         
                <item id="kPWM_CompareVal4InterruptEnable" label="VAL4 compare" value="4">
                    <description>PWM VAL4 compare interrupt</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `INTEN`)" bitfield="" bitfield_expr="(`CMPIE`)" 
                           value="((getBitFieldValue($instance.getPeripheral(), ($parent.getParent().getSetting(`sm_prefix`).getValue() + `INTEN`), (`CMPIE`)) &amp; ~(1 &lt;&lt; $this.getSetItemValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $this.getSetItemValue().toInt()) : 0))" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $this.getSetItemValue().toInt())) != 0)"/>
                    </assign>
                </item>
                <item id="kPWM_CompareVal5InterruptEnable" label="VAL5 compare" value="5">
                    <description>PWM VAL5 compare interrupt</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `INTEN`)" bitfield="" bitfield_expr="(`CMPIE`)" 
                           value="((getBitFieldValue($instance.getPeripheral(), ($parent.getParent().getSetting(`sm_prefix`).getValue() + `INTEN`), (`CMPIE`)) &amp; ~(1 &lt;&lt; $this.getSetItemValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $this.getSetItemValue().toInt()) : 0))" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $this.getSetItemValue().toInt())) != 0)"/>
                    </assign>
                </item>
                <item id="kPWM_CaptureA0InterruptEnable" label="Capture A0" value="10">
                    <description>PWM capture A0 interrupt</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `INTEN`)" bitfield="" bitfield_expr="(`CA0IE`)" 
                           value="($this.getValue() ? 1 : 0)" 
                           reverse_value="x -> ((x != 0) ? true : false)"/>
                    </assign>
                </item>
                <item id="kPWM_CaptureA1InterruptEnable" label="Capture A1" value="11">
                    <description>PWM capture A1 interrupt</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `INTEN`)" bitfield="" bitfield_expr="(`CA1IE`)" 
                           value="($this.getValue() ? 1 : 0)" 
                           reverse_value="x -> ((x != 0) ? true : false)"/>
                    </assign>
                </item>
                <item id="kPWM_CaptureB0InterruptEnable" label="Capture B0" value="8">
                    <description>PWM capture B0 interrupt</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `INTEN`)" bitfield="" bitfield_expr="(`CB0IE`)" 
                           value="($this.getValue() ? 1 : 0)" 
                           reverse_value="x -> ((x != 0) ? true : false)"/>
                    </assign>
                </item>
                <item id="kPWM_CaptureB1InterruptEnable" label="Capture B1" value="9">
                    <description>PWM capture B1 interrupt</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `INTEN`)" bitfield="" bitfield_expr="(`CB1IE`)" 
                           value="($this.getValue() ? 1 : 0)" 
                           reverse_value="x -> ((x != 0) ? true : false)"/>
                    </assign>
                </item>
                <item id="kPWM_CaptureX0InterruptEnable" label="Capture X0" value="6">
                    <description>PWM capture X0 interrupt</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `INTEN`)" bitfield="" bitfield_expr="(`CX0IE`)" 
                           value="($this.getValue() ? 1 : 0)" 
                           reverse_value="x -> ((x != 0) ? true : false)"/>
                    </assign>
                </item>
                <item id="kPWM_CaptureX1InterruptEnable" label="Capture X1" value="7">
                    <description>PWM capture X1 interrupt</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `INTEN`)" bitfield="" bitfield_expr="(`CX1IE`)" 
                           value="($this.getValue() ? 1 : 0)" 
                           reverse_value="x -> ((x != 0) ? true : false)"/>
                    </assign>
                </item>
                <item id="kPWM_ReloadInterruptEnable" label="Reload" value="12">
                    <description>PWM reload interrupt</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `INTEN`)" bitfield="" bitfield_expr="(`RIE`)" 
                           value="($this.getValue() ? 1 : 0)" 
                           reverse_value="x -> ((x != 0) ? true : false)"/>
                    </assign>
                </item>
                <item id="kPWM_ReloadErrorInterruptEnable" label="Reload error" value="13">
                    <description>PWM reload error interrupt</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `INTEN`)" bitfield="" bitfield_expr="(`REIE`)" 
                           value="($this.getValue() ? 1 : 0)" 
                           reverse_value="x -> ((x != 0) ? true : false)"/>
                    </assign>
                </item>
            </set>
            <set id="main_config_interrupt_flags_t" label="List of PWM interrupt flags to clear">                
                <item id="kPWM_CompareVal0InterruptFlag" label="VAL0 compare" value="0">
                    <description>PWM VAL0 compare interrupt</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `STS`)" bitfield="" bitfield_expr="(`CMPF`)" 
                           value="((getBitFieldValue($instance.getPeripheral(), ($parent.getParent().getSetting(`sm_prefix`).getValue() + `STS`), (`CMPF`)) &amp; ~(1 &lt;&lt; $this.getSetItemValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $this.getSetItemValue().toInt()) : 0))" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $this.getSetItemValue().toInt())) != 0)"/>
                    </assign>
                </item>
                <item id="kPWM_CompareVal1InterruptFlag" label="VAL1 compare" value="1">
                    <description>PWM VAL1 compare interrupt</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `STS`)" bitfield="" bitfield_expr="(`CMPF`)" 
                           value="((getBitFieldValue($instance.getPeripheral(), ($parent.getParent().getSetting(`sm_prefix`).getValue() + `STS`), (`CMPF`)) &amp; ~(1 &lt;&lt; $this.getSetItemValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $this.getSetItemValue().toInt()) : 0))" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $this.getSetItemValue().toInt())) != 0)"/>
                    </assign>
                </item>                                                         
                <item id="kPWM_CompareVal2InterruptFlag" label="VAL2 compare" value="2">
                    <description>PWM VAL2 compare interrupt</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `STS`)" bitfield="" bitfield_expr="(`CMPF`)" 
                           value="((getBitFieldValue($instance.getPeripheral(), ($parent.getParent().getSetting(`sm_prefix`).getValue() + `STS`), (`CMPF`)) &amp; ~(1 &lt;&lt; $this.getSetItemValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $this.getSetItemValue().toInt()) : 0))" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $this.getSetItemValue().toInt())) != 0)"/>
                    </assign>
                </item>                                                         
                <item id="kPWM_CompareVal3InterruptFlag" label="VAL3 compare" value="3">
                    <description>PWM VAL3 compare interrupt</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `STS`)" bitfield="" bitfield_expr="(`CMPF`)" 
                           value="((getBitFieldValue($instance.getPeripheral(), ($parent.getParent().getSetting(`sm_prefix`).getValue() + `STS`), (`CMPF`)) &amp; ~(1 &lt;&lt; $this.getSetItemValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $this.getSetItemValue().toInt()) : 0))" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $this.getSetItemValue().toInt())) != 0)"/>
                    </assign>                    
                </item>                                                         
                <item id="kPWM_CompareVal4InterruptFlag" label="VAL4 compare" value="4">
                    <description>PWM VAL4 compare interrupt</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `STS`)" bitfield="" bitfield_expr="(`CMPF`)" 
                           value="((getBitFieldValue($instance.getPeripheral(), ($parent.getParent().getSetting(`sm_prefix`).getValue() + `STS`), (`CMPF`)) &amp; ~(1 &lt;&lt; $this.getSetItemValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $this.getSetItemValue().toInt()) : 0))" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $this.getSetItemValue().toInt())) != 0)"/>
                    </assign>
                </item>
                <item id="kPWM_CompareVal5InterruptFlag" label="VAL5 compare" value="5">
                    <description>PWM VAL5 compare interrupt</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `STS`)" bitfield="" bitfield_expr="(`CMPF`)" 
                           value="((getBitFieldValue($instance.getPeripheral(), ($parent.getParent().getSetting(`sm_prefix`).getValue() + `STS`), (`CMPF`)) &amp; ~(1 &lt;&lt; $this.getSetItemValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $this.getSetItemValue().toInt()) : 0))" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $this.getSetItemValue().toInt())) != 0)"/>
                    </assign>
                </item>
                <item id="kPWM_CaptureA0InterruptFlag" label="Capture A0" value="10">
                    <description>PWM capture A0 interrupt</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `STS`)" bitfield="" bitfield_expr="(`CFA0`)" 
                           value="($this.getValue() ? 1 : 0)" 
                           reverse_value="x -> ((x != 0) ? true : false)"/>
                    </assign>
                </item>
                <item id="kPWM_CaptureA1InterruptFlag" label="Capture A1" value="11">
                    <description>PWM capture A1 interrupt</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `STS`)" bitfield="" bitfield_expr="(`CFA1`)" 
                           value="($this.getValue() ? 1 : 0)" 
                           reverse_value="x -> ((x != 0) ? true : false)"/>
                    </assign>
                </item>
                <item id="kPWM_CaptureB0InterruptFlag" label="Capture B0" value="8">
                    <description>PWM capture B0 interrupt</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `STS`)" bitfield="" bitfield_expr="(`CFB0`)" 
                           value="($this.getValue() ? 1 : 0)" 
                           reverse_value="x -> ((x != 0) ? true : false)"/>
                    </assign>
                </item>
                <item id="kPWM_CaptureB1InterruptFlag" label="Capture B1" value="9">
                    <description>PWM capture B1 interrupt</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `STS`)" bitfield="" bitfield_expr="(`CFB1`)" 
                           value="($this.getValue() ? 1 : 0)" 
                           reverse_value="x -> ((x != 0) ? true : false)"/>
                    </assign>
                </item>
                <item id="kPWM_CaptureX0InterruptFlag" label="Capture X0" value="6">
                    <description>PWM capture X0 interrupt</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `STS`)" bitfield="" bitfield_expr="(`CFX0`)" 
                           value="($this.getValue() ? 1 : 0)" 
                           reverse_value="x -> ((x != 0) ? true : false)"/>
                    </assign>
                </item>
                <item id="kPWM_CaptureX1InterruptFlag" label="Capture X1" value="7">
                    <description>PWM capture X1 interrupt</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `STS`)" bitfield="" bitfield_expr="(`CFX1`)" 
                           value="($this.getValue() ? 1 : 0)" 
                           reverse_value="x -> ((x != 0) ? true : false)"/>
                    </assign>
                </item>
                <item id="kPWM_ReloadInterruptFlag" label="Reload" value="12">
                    <description>PWM reload interrupt</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `STS`)" bitfield="" bitfield_expr="(`RF`)" 
                           value="($this.getValue() ? 1 : 0)" 
                           reverse_value="x -> ((x != 0) ? true : false)"/>
                    </assign>
                </item>
                <item id="kPWM_ReloadErrorInterruptFlag" label="Reload error" value="13">
                    <description>PWM reload error interrupt</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getSetting(`sm_prefix`).getValue() + `STS`)" bitfield="" bitfield_expr="(`REF`)" 
                           value="($this.getValue() ? 1 : 0)" 
                           reverse_value="x -> ((x != 0) ? true : false)"/>
                    </assign>
                </item>
            </set>
            <set id="fault_interrupt_enable_t" label="List of fault interrupt options">
                <description></description>                
                <item id="kPWM_Fault0InterruptEnable" label="Fault 0">
                    <description>PWM fault 0 interrupt</description>
                </item>
                <item id="kPWM_Fault1InterruptEnable" label="Fault 1">
                    <description>PWM fault 1 interrupt</description>
                </item>
                <item id="kPWM_Fault2InterruptEnable" label="Fault 2">
                    <description>PWM fault 2 interrupt</description>
                </item>
                <item id="kPWM_Fault3InterruptEnable" label="Fault 3">
                    <description>PWM fault 3 interrupt</description>
                </item>
            </set>
            <set id="table_fault_interrupt_enable_t" label="List of fault interrupt options">
                <description></description>                
                <item id="interruptEnable" label="Interrupt source">
                    <description>Enable interrupt from this fault</description>
                </item>
            </set>
            <enum id="pwm_status_flags_t" label="List of PWM status flags" from="_pwm_status_flags">
                <description></description>
                <item id="kPWM_CompareVal0Flag" label="PWM VAL0 compare flag">
                    <description>PWM VAL0 compare flag</description>
                </item>
                <item id="kPWM_CompareVal1Flag" label="PWM VAL1 compare flag">
                    <description>PWM VAL1 compare flag</description>
                </item>
                <item id="kPWM_CompareVal2Flag" label="PWM VAL2 compare flag">
                    <description>PWM VAL2 compare flag</description>
                </item>
                <item id="kPWM_CompareVal3Flag" label="PWM VAL3 compare flag">
                    <description>PWM VAL3 compare flag</description>
                </item>
                <item id="kPWM_CompareVal4Flag" label="PWM VAL4 compare flag">
                    <description>PWM VAL4 compare flag</description>
                </item>
                <item id="kPWM_CompareVal5Flag" label="PWM VAL5 compare flag">
                    <description>PWM VAL5 compare flag</description>
                </item>
                <item id="kPWM_CaptureX0Flag" label="PWM capture X0 flag">
                    <description>PWM capture X0 flag</description>
                </item>
                <item id="kPWM_CaptureX1Flag" label="PWM capture X1 flag">
                    <description>PWM capture X1 flag</description>
                </item>
                <item id="kPWM_CaptureB0Flag" label="PWM capture B0 flag">
                    <description>PWM capture B0 flag</description>
                </item>
                <item id="kPWM_CaptureB1Flag" label="PWM capture B1 flag">
                    <description>PWM capture B1 flag</description>
                </item>
                <item id="kPWM_CaptureA0Flag" label="PWM capture A0 flag">
                    <description>PWM capture A0 flag</description>
                </item>
                <item id="kPWM_CaptureA1Flag" label="PWM capture A1 flag">
                    <description>PWM capture A1 flag</description>
                </item>
                <item id="kPWM_ReloadFlag" label="PWM reload flag">
                    <description>PWM reload flag</description>
                </item>
                <item id="kPWM_ReloadErrorFlag" label="PWM reload error flag">
                    <description>PWM reload error flag</description>
                </item>
                <item id="kPWM_RegUpdatedFlag" label="PWM registers updated flag">
                    <description>PWM registers updated flag</description>
                </item>
                <item id="kPWM_Fault0Flag" label="PWM fault 0 flag">
                    <description>PWM fault 0 flag</description>
                </item>
                <item id="kPWM_Fault1Flag" label="PWM fault 1 flag">
                    <description>PWM fault 1 flag</description>
                </item>
                <item id="kPWM_Fault2Flag" label="PWM fault 2 flag">
                    <description>PWM fault 2 flag</description>
                </item>
                <item id="kPWM_Fault3Flag" label="PWM fault 3 flag">
                    <description>PWM fault 3 flag</description>
                </item>
            </enum>
            <enum id="pwm_mode_t" label="PWM operation mode" from="_pwm_mode">
                <description></description>
                <item id="kPWM_SignedCenterAligned" label="Signed center-aligned">
                    <description>Signed center-aligned</description>
                </item>
                <item id="kPWM_CenterAligned" label="Unsigned cente-aligned">
                    <description>Unsigned cente-aligned</description>
                </item>
                <item id="kPWM_SignedEdgeAligned" label="Signed edge-aligned">
                    <description>Signed edge-aligned</description>
                </item>
                <item id="kPWM_EdgeAligned" label="Unsigned edge-aligned">
                    <description>Unsigned edge-aligned</description>
                </item>
            </enum>
            <enum id="pwm_level_select_t" label="PWM output pulse mode, high-true or low-true" from="_pwm_level_select">
                <description></description>
                <item id="0" label="Not inverted">
                    <description>PWM output not inverted. A high level on the output pin represents &quot;on&quot; or &quot;active&quot; state</description>
                </item>
                <item id="1" label="Inverted">
                    <description>PWM output inverted. A low level on the output pin represents &quot;on&quot; or &quot;active&quot; state</description>
                </item>
            </enum>
            <enum id="pwm_sw_control_select_t" label="PWM output pulse mode, high-true or low-true" from="_pwm_level_select">
                <assign when="true">
                    <register name="SWCOUT" bitfield="" bitfield_expr="$parent.sm_prefix.getValue() + (`OUT` + ($parent.optionValue(`pmwSignal`)))" value="$this.getEnumItemId().toInt()" reverse_value="x -> x.toString()"/>
                </assign>
                <item id="0" label="Logic 0">
                    <description>Means that the logic 0 will be on the PWM output pin when SW driven control is selected.</description>
                </item>
                <item id="1" label="Logic 1">
                    <description>Means that the logic 1 will be on the PWM output pin when SW driven control is selected.</description>
                </item>
            </enum>
            <enum id="pwm_reload_source_select_t" label="PWM reload source select" from="_pwm_reload_source_select">
                <description></description>
                <assign when="true">
                    <register name="" name_expr="$parent.sm_prefix.getValue() + `CTRL2`" bitfield="RELOAD_SEL" value="$this.getEnumItemId().toInt()" reverse_value="x -> x.toString()"/>
                </assign>
                <item id="0" label="Local RELOAD">
                    <description>The local reload signal is used to reload registers</description>
                </item>
                <item id="1" label="Master RELOAD" available="($parent.sm_number.getValue() != `0`)">
                    <description>The master reload signal (from submodule 0) is used to reload</description>
                </item>
            </enum>
            <enum id="pwm_fault_clear_t" label="PWM fault clearing options" from="_pwm_fault_clear">
                <assign when="true">
                    <register name="" name_expr="`FCTRL` + $parent.fault_channel_num.getValue()" bitfield="FAUTO" value="((getBitFieldValue($instance.getPeripheral(), `FCTRL` + $parent.fault_channel_num.getValue(), `FAUTO`) &amp; ~(1 &lt;&lt; $parent.getId().toInt())) | ((($this.getEnumItemId() == `kPWM_Automatic`) ? 1 : 0) &lt;&lt; $parent.getId().toInt()))" reverse_value="x -> (((x &amp; (1 &lt;&lt; $parent.getId().toInt())) != 0) ? `kPWM_Automatic` : (((getBitFieldValue($instance.getPeripheral(), `FCTRL` + $parent.fault_channel_num.getValue(), `FSAFE`) &amp; (1 &lt;&lt; $parent.getId().toInt())) != 0) ? `kPWM_ManualSafety`: `kPWM_ManualNormal`))"/>
                    <register name="" name_expr="`FCTRL` + $parent.fault_channel_num.getValue()" bitfield="FSAFE" value="((getBitFieldValue($instance.getPeripheral(), `FCTRL` + $parent.fault_channel_num.getValue(), `FSAFE`) &amp; ~(1 &lt;&lt; $parent.getId().toInt())) | ((($this.getEnumItemId() == `kPWM_ManualSafety`) ? 1 : 0) &lt;&lt; $parent.getId().toInt()))" reverse_value="x -> (((getBitFieldValue($instance.getPeripheral(), `FCTRL` + $parent.fault_channel_num.getValue(), `FAUTO`) &amp; (1 &lt;&lt; $parent.getId().toInt())) != 0) ? `kPWM_Automatic` : (((x &amp; (1 &lt;&lt; $parent.getId().toInt())) != 0) ? `kPWM_ManualSafety`: `kPWM_ManualNormal`))"/>
                </assign>
                <item id="kPWM_ManualNormal" label="Manual normal">
                    <description>Manual fault clearing with no fault safety mode</description>
                </item>
                <item id="kPWM_ManualSafety" label="Manual safety mode">
                    <description>Manual fault clearing with fault safety mode</description>
                </item>
                <item id="kPWM_Automatic" label="Automatic">
                    <description>Automatic fault clearing</description>
                </item>
            </enum>
            <enum id="pwm_module_control_t" label="Options for submodule master control operation" from="_pwm_module_control">
                <description></description>
                <item id="kPWM_Control_Module_0" label="Control submodule 0&apos;s start/stop,buffer reload operation">
                    <description>Control submodule 0&apos;s start/stop,buffer reload operation</description>
                </item>
                <item id="kPWM_Control_Module_1" label="Control submodule 1&apos;s start/stop,buffer reload operation">
                    <description>Control submodule 1&apos;s start/stop,buffer reload operation</description>
                </item>
                <item id="kPWM_Control_Module_2" label="Control submodule 2&apos;s start/stop,buffer reload operation">
                    <description>Control submodule 2&apos;s start/stop,buffer reload operation</description>
                </item>
                <item id="kPWM_Control_Module_3" label="Control submodule 3&apos;s start/stop,buffer reload operation">
                    <description>Control submodule 3&apos;s start/stop,buffer reload operation</description>
                </item>
            </enum> 
            <enum id="faultLevelE" label="faultLevelE" from="mine">
                <assign when="true">
                    <register name="" name_expr="`FCTRL` + $parent.fault_channel_num.getValue()" bitfield="FLVL" value="((getBitFieldValue($instance.getPeripheral(), `FCTRL` + $parent.fault_channel_num.getValue(), `FLVL`) &amp; ~(1 &lt;&lt; $parent.getId().toInt())) | ($this.getEnumItemId().toInt() &lt;&lt; $parent.getId().toInt()))" reverse_value="x -> (((x &amp; (1 &lt;&lt; $parent.getId().toInt())) != 0) ? `1` : `0`)"/>
                </assign>
                <item id="0" label="Logic 0" value="false">
                    <description>A logic 0 on the fault input indicates a fault condition.</description>
                </item>
                <item id="1" label="Logic 1" value="true">
                    <description>A logic 1 on the fault input indicates a fault condition.</description>
                </item>
            </enum>
            <enum id="enableCombinationalPathE" label="enableCombinationalPathE" from="mine">
                <assign when="true">
                    <register name="" name_expr="`FCTRL2` + $parent.fault_channel_num.getValue()" bitfield="NOCOMB" value="((getBitFieldValue($instance.getPeripheral(), `FCTRL2` + $parent.fault_channel_num.getValue(), `NOCOMB`) &amp; ~(1 &lt;&lt; $parent.getId().toInt())) | ($this.getEnumItemId().toInt() &lt;&lt; $parent.getId().toInt()))" reverse_value="x -> (((x &amp; (1 &lt;&lt; $parent.getId().toInt())) != 0) ? `1` : `0`)"/>
                </assign>
                <item id="0" label="Combined" value="false">
                    <description>PWM output is controlled by the ORed signal of original fault input and the filtered fault input. When the fault pulse is shorter than filtered time, it still disables the PWM output for the pulse duration. No fault flag is set and PWM output recovers immediately after pulse disappears. 
                    When the fault pulse is longer than filtered time, it disables the PWM output immediately when the original fault input takes effect. Fault flag is set after filtered time and PWM output recovers according to the recovery mechanism.
                    </description>
                </item>
                <item id="1" label="Filtered" value="true">
                    <description>PWM output is controlled only by the filtered fault input.
                     When the fault pulse is shorter than filtered time, PWM output is not affected.
                     When the fault pulse is longer than filtered time, it disables the PWM output. Fault flag is set after filtered time and PWM output recovers according to the recovery mechanism.</description>
                </item>
            </enum>
            <enum id="captureInputSelE" label="captureInputSelE" from="mine">
                <assign when="true">
                    <register name="" name_expr="$parent.sm_prefix.getValue() + `CAPTCTRL` + $parent.channel_label.getValue()" bitfield="" bitfield_expr="`INP_SEL` + $parent.channel_label.getValue()" value="$this.getEnumItemId().toInt()" reverse_value="x -> x.toString()"/>
                </assign>
                <item id="0" label="Raw input" value="false">
                    <description>Raw pin input signal is selected as source.</description>
                </item>
                <item id="1" label="Edge counter" value="true">
                    <description>Output of the edge counter is selected as source.</description>
                </item>
            </enum>
            <enum id="enableOneShotCaptureE" label="enableOneShotCaptureE" from="mine">
                <assign when="true">
                    <register name="" name_expr="$parent.sm_prefix.getValue() + `CAPTCTRL` + $parent.channel_label.getValue()" bitfield="" bitfield_expr="`ONESHOT` + $parent.channel_label.getValue()" value="$this.getEnumItemId().toInt()" reverse_value="x -> x.toString()"/>
                </assign>
                <item id="0" label="Free running" value="false">
                    <description>Capture is running on each enabled circuit alternating one by one.</description>
                </item>
                <item id="1" label="One shot" value="true">
                    <description>Only one capture is done on each enabled circuits.</description>
                </item>
            </enum>
            <enum id="pwm_fault_state_t" label="Output fault state" from="mine">
                <description></description>
                <assign when="true">
                    <register name="" name_expr="$parent.sm_prefix.getValue() + `OCTRL`" bitfield="" bitfield_expr="`PWM` + ($parent.channel_label.getValue()) + `FS`" value="$this.getEnumItemId().toInt()" reverse_value="x -> ((x == 0 || x == 1) ? x.toString() : `2`)"/>
                </assign>
                <item id="0" label="Forced to logic 0 prior to output polarity" value="0">
                    <description>Output is forced to logic 0 state prior to consideration of output polarity control.</description>
                </item>
                <item id="1" label="Forced to logic 1 prior to output polarity" value="1">
                    <description>Output is forced to logic 1 state prior to consideration of output polarity control.</description>
                </item>
                <item id="2" label="Tristated" value="2">
                    <description>Output is tristated (High-Z state).</description>
                </item>
                <!-- <item id="kPWM_PwmFaultState3" label="Output is tristated" value="3">
                    <description>Output is tristated (High-Z state).</description>
                </item> -->
            </enum>
            <enum id="dutyResolutionSelection_t" label="Duty resolution" from="mine">
                <description></description>
                <item id="kDutyPercent" label="1%" value="0">
                    <description>Initial duty can be set with 1% resolution (0 - 100 %).</description>
                </item>
                <item id="kDuty16bit" label="16-bit" value="1">
                    <description>Initial duty can be set with 16-bit resolution (0 - 65535).</description>
                </item>
            </enum>
            <set id="pwm_fault_disable_t" label="Fault mapping">
                <description></description>
                <item id="s0" label="Fault 0" value="0">
                    <description>Fault 0 active level causes disabling of this output.</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getParent().getSetting(`sm_prefix`).getValue() + `DISMAP0`)" bitfield="" bitfield_expr="(`DIS0` + $parent.getParent().getParent().getSetting(`channel_label`).getValue())" 
                           value="((getBitFieldValue($instance.getPeripheral(), ($parent.getParent().getParent().getSetting(`sm_prefix`).getValue() + `DISMAP0`), (`DIS0` + $parent.getParent().getParent().getSetting(`channel_label`).getValue())) &amp; ~(1 &lt;&lt; $this.getSetItemValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $this.getSetItemValue().toInt()) : 0))" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $this.getSetItemValue().toInt())) != 0)"/>
                    </assign>
                </item>
                <item id="s1" label="Fault 1" value="1">
                    <description>Fault 1 active level causes disabling of this output.</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getParent().getSetting(`sm_prefix`).getValue() + `DISMAP0`)" bitfield="" bitfield_expr="(`DIS0` + $parent.getParent().getParent().getSetting(`channel_label`).getValue())" 
                           value="((getBitFieldValue($instance.getPeripheral(), ($parent.getParent().getParent().getSetting(`sm_prefix`).getValue() + `DISMAP0`), (`DIS0` + $parent.getParent().getParent().getSetting(`channel_label`).getValue())) &amp; ~(1 &lt;&lt; $this.getSetItemValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $this.getSetItemValue().toInt()) : 0))" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $this.getSetItemValue().toInt())) != 0)"/>
                    </assign>
                </item>
                <item id="s2" label="Fault 2" value="2">
                    <description>Fault 2 active level causes disabling of this output.</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getParent().getSetting(`sm_prefix`).getValue() + `DISMAP0`)" bitfield="" bitfield_expr="(`DIS0` + $parent.getParent().getParent().getSetting(`channel_label`).getValue())" 
                           value="((getBitFieldValue($instance.getPeripheral(), ($parent.getParent().getParent().getSetting(`sm_prefix`).getValue() + `DISMAP0`), (`DIS0` + $parent.getParent().getParent().getSetting(`channel_label`).getValue())) &amp; ~(1 &lt;&lt; $this.getSetItemValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $this.getSetItemValue().toInt()) : 0))" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $this.getSetItemValue().toInt())) != 0)"/>
                    </assign>
                </item>
                <item id="s3" label="Fault 3" value="3">
                    <description>Fault 3 active level causes disabling of this output.</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getParent().getSetting(`sm_prefix`).getValue() + `DISMAP0`)" bitfield="" bitfield_expr="(`DIS0` + $parent.getParent().getParent().getSetting(`channel_label`).getValue())" 
                           value="((getBitFieldValue($instance.getPeripheral(), ($parent.getParent().getParent().getSetting(`sm_prefix`).getValue() + `DISMAP0`), (`DIS0` + $parent.getParent().getParent().getSetting(`channel_label`).getValue())) &amp; ~(1 &lt;&lt; $this.getSetItemValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $this.getSetItemValue().toInt()) : 0))" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $this.getSetItemValue().toInt())) != 0)"/>
                    </assign>
                </item>
            </set>
            <set id="pwm_fault1_disable_t" label="Fault mapping">
                <description></description>
                <item id="s0" label="Fault 4" value="0">
                    <description>Fault 4 active level causes disabling of this output.</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getParent().getSetting(`sm_prefix`).getValue() + `DISMAP1`)" bitfield="" bitfield_expr="(`DIS1` + $parent.getParent().getParent().getSetting(`channel_label`).getValue())" 
                           value="((getBitFieldValue($instance.getPeripheral(), ($parent.getParent().getParent().getSetting(`sm_prefix`).getValue() + `DISMAP1`), (`DIS1` + $parent.getParent().getParent().getSetting(`channel_label`).getValue())) &amp; ~(1 &lt;&lt; $this.getSetItemValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $this.getSetItemValue().toInt()) : 0))" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $this.getSetItemValue().toInt())) != 0)"/>
                    </assign>
                </item>
                <item id="s1" label="Fault 5" value="1">
                    <description>Fault 5 active level causes disabling of this output.</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getParent().getSetting(`sm_prefix`).getValue() + `DISMAP1`)" bitfield="" bitfield_expr="(`DIS1` + $parent.getParent().getParent().getSetting(`channel_label`).getValue())" 
                           value="((getBitFieldValue($instance.getPeripheral(), ($parent.getParent().getParent().getSetting(`sm_prefix`).getValue() + `DISMAP1`), (`DIS1` + $parent.getParent().getParent().getSetting(`channel_label`).getValue())) &amp; ~(1 &lt;&lt; $this.getSetItemValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $this.getSetItemValue().toInt()) : 0))" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $this.getSetItemValue().toInt())) != 0)"/>
                    </assign>
                </item>
                <item id="s2" label="Fault 6" value="2">
                    <description>Fault 6 active level causes disabling of this output.</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getParent().getSetting(`sm_prefix`).getValue() + `DISMAP1`)" bitfield="" bitfield_expr="(`DIS1` + $parent.getParent().getParent().getSetting(`channel_label`).getValue())" 
                           value="((getBitFieldValue($instance.getPeripheral(), ($parent.getParent().getParent().getSetting(`sm_prefix`).getValue() + `DISMAP1`), (`DIS1` + $parent.getParent().getParent().getSetting(`channel_label`).getValue())) &amp; ~(1 &lt;&lt; $this.getSetItemValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $this.getSetItemValue().toInt()) : 0))" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $this.getSetItemValue().toInt())) != 0)"/>
                    </assign>
                </item>
                <item id="s3" label="Fault 7" value="3">
                    <description>Fault 7 active level causes disabling of this output.</description>
                    <assign when="true">
                        <register name="" name_expr="($parent.getParent().getParent().getSetting(`sm_prefix`).getValue() + `DISMAP1`)" bitfield="" bitfield_expr="(`DIS1` + $parent.getParent().getParent().getSetting(`channel_label`).getValue())" 
                           value="((getBitFieldValue($instance.getPeripheral(), ($parent.getParent().getParent().getSetting(`sm_prefix`).getValue() + `DISMAP1`), (`DIS1` + $parent.getParent().getParent().getSetting(`channel_label`).getValue())) &amp; ~(1 &lt;&lt; $this.getSetItemValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $this.getSetItemValue().toInt()) : 0))" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $this.getSetItemValue().toInt())) != 0)"/>
                    </assign>
                </item>
            </set>
            <struct id="pwm_signal_param_t" label="Structure for the user to define the PWM signal characteristics" from="_pwm_signal_param">
                <description></description>
                <variable id="sm_number" value="$parent.getParent().getParent().getParent().getSetting(`sm`).getEnumItemValue()"/>
                <variable id="sm_prefix" value="`SM` + $parent.sm_number.getValue()"/>
                <variable id="channel_label" value="$parent.getParent().getSetting(`channel`).getValue()"/>                
                <variable id="pwmChannel" value="$parent.getParent().getSetting(`channel_enum_value`).getValue()" options="add_to_struct"/>                
                <info id="firstX" label="First edge" value="`Half cycle value (VAL0)`" available="($parent.channel_label.getValue() == `X`)">
                    <description>Specifies compare value for the first PWM edge. In case of channel X it is the half cycle value - VAL0 compare.</description>
                </info>
                <info id="secondX" label="Second edge" value="`Modulo value (VAL1)`" available="($parent.channel_label.getValue() == `X`)">
                    <description>Specifies compare value for the second PWM edge. In case of channel X it is the modulo - full cycle value - VAL1 compare.</description>
                </info>
                <reference id="level" label="Output polarity" type="pwm_level_select_t">
                    <description>PWM output active level select</description>
                    <assign when="true">
                        <register name="" name_expr="$parent.sm_prefix.getValue() + `OCTRL`" bitfield="" bitfield_expr="`POL` + ($parent.channel_label.getValue())" value="$this.getValue().toInt()" reverse_value="x -> x.toString()"/>
                    </assign>
                </reference>
                <struct id="fault_channel0" label="Fault channel 0 disable mapping" from="mine" options="remove_from_struct_init">
                    <description>Choose which fault input from the fault channel 0 disables this PWM output.</description>
                    <reference id="dismap" label="Output disabled by " type="pwm_fault_disable_t" options="remove_from_struct_init">
                        <description>Select which fault input active state disables this channel PWM output.</description>
                    </reference>
                </struct>
                <struct id="fault_channel1" label="Fault channel 1 disable mapping" from="mine" options="remove_from_struct_init" available="$instance.getPeripheral().registerExists(`FSTS1`)">
                    <description>Choose which fault input from the fault channel 1 disables this PWM output.</description>                    
                    <reference id="dismap" label="Output disabled by " type="pwm_fault1_disable_t" options="remove_from_struct_init">
                        <description>Select which fault input active state disables this channel PWM output.</description>
                    </reference>
                </struct>
                <reference id="faultState" label="Output fault state" type="pwm_fault_state_t">
                    <description>When the channel output is disabled by the selected faults, select what the state of the output should be.</description>
                </reference>
            </struct>
            <enum id="pwm_dma_source_select_t" label="Read DMA request source" from="_pwm_dma_source_select">
                <assign when="true">
                    <register name="" name_expr="$parent.getParent().getSetting(`sm_prefix`).getValue() + `DMAEN`" bitfield="" bitfield_expr="(`CAPTDE`)" 
                       value="$this.getEnumItemId().toInt()" 
                       reverse_value="x -> x.toString()"/>
                </assign>
                <item id="0" label="Read DMA requests disabled">
                    <description>Read DMA requests disabled</description>
                </item>
                <item id="1" label="Exceeding FIFO watermark">
                    <description>A local sync (VAL1 matches counter) sets the read DMA request</description>
                </item>
                <item id="2" label="Local SYNC">
                    <description>A local sync (VAL1 matches counter) sets the read DMA request</description>
                </item>
                <item id="3" label="Local RELOAD">
                    <description>A local reload (STS[RF] being set) sets the read DMA request</description>
                </item>
            </enum>
            <enum id="pwm_watermark_control_t" label="Read DMA request source" from="_pwm_watermark_control">
                <assign when="true">
                    <register name="" name_expr="$parent.getParent().getSetting(`sm_prefix`).getValue() + `DMAEN`" bitfield="" bitfield_expr="(`FAND`)" 
                       value="$this.getEnumItemId().toInt()" 
                       reverse_value="x -> x.toString()"/>
                </assign>
                <item id="0" label="Capture watermarks are ORed">
                    <description>When capture DMA is enabled and Exceeding FIFO watermark is selected as DMA trigger source, selected FIFO watermarks are OR'ed together</description>
                </item>
                <item id="1" label="Capture watermarks are ANDed">
                    <description>When capture DMA is enabled and Exceeding FIFO watermark is selected as DMA trigger source, selected FIFO watermarks are AND'ed together</description>
                </item>                
            </enum>         
            <set id="pwm_dma_enable_t" label="List of capture DMA enable options">
                <description></description>                
                <item id="kPWM_CaptureA0DMAEnable" label="Capture A0">
                    <description>PWM capture A0 DMA</description>
                    <assign when="true">
                        <register name="" name_expr="$parent.getParent().getParent().getSetting(`sm_prefix`).getValue() + `DMAEN`" bitfield="" bitfield_expr="(`CA0DE`)" 
                           value="($this.getValue() ? 1 : 0)" 
                           reverse_value="x -> ((x != 0) ? true : false)"/>
                    </assign>
                </item>
                <item id="kPWM_CaptureA1DMAEnable" label="Capture A1">
                    <description>PWM capture A1 DMA</description>
                    <assign when="true">
                        <register name="" name_expr="$parent.getParent().getParent().getSetting(`sm_prefix`).getValue() + `DMAEN`" bitfield="" bitfield_expr="(`CA1DE`)" 
                           value="($this.getValue() ? 1 : 0)" 
                           reverse_value="x -> ((x != 0) ? true : false)"/>
                    </assign>
                </item>
                <item id="kPWM_CaptureB0DMAEnable" label="Capture B0">
                    <description>PWM capture B0 DMA</description>
                    <assign when="true">
                        <register name="" name_expr="$parent.getParent().getParent().getSetting(`sm_prefix`).getValue() + `DMAEN`" bitfield="" bitfield_expr="(`CB0DE`)" 
                           value="($this.getValue() ? 1 : 0)" 
                           reverse_value="x -> ((x != 0) ? true : false)"/>
                    </assign>
                </item>
                <item id="kPWM_CaptureB1DMAEnable" label="Capture B1">
                    <description>PWM capture B1 DMA</description>
                    <assign when="true">
                        <register name="" name_expr="$parent.getParent().getParent().getSetting(`sm_prefix`).getValue() + `DMAEN`" bitfield="" bitfield_expr="(`CB1DE`)" 
                           value="($this.getValue() ? 1 : 0)" 
                           reverse_value="x -> ((x != 0) ? true : false)"/>
                    </assign>
                </item>
                <item id="kPWM_CaptureX0DMAEnable" label="Capture X0">
                    <description>PWM capture X0 DMA</description>
                    <assign when="true">
                        <register name="" name_expr="$parent.getParent().getParent().getSetting(`sm_prefix`).getValue() + `DMAEN`" bitfield="" bitfield_expr="(`CX0DE`)" 
                           value="($this.getValue() ? 1 : 0)" 
                           reverse_value="x -> ((x != 0) ? true : false)"/>
                    </assign>
                </item>
                <item id="kPWM_CaptureX1DMAEnable" label="Capture X1">
                    <description>PWM capture X1 DMA</description>
                    <assign when="true">
                        <register name="" name_expr="$parent.getParent().getParent().getSetting(`sm_prefix`).getValue() + `DMAEN`" bitfield="" bitfield_expr="(`CX1DE`)" 
                           value="($this.getValue() ? 1 : 0)" 
                           reverse_value="x -> ((x != 0) ? true : false)"/>
                    </assign>
                </item>
            </set>
            <set id="outputEn_t" label="Output enable list">
                <item id="A" label="A">
                    <description>Enable PWM_A ouput</description>
                    <assign when="true">
                        <register name_expr="`OUTEN`" bitfield_expr="`PWMA_EN`" value="((getBitFieldValue($instance.getPeripheral(), `OUTEN`, `PWMA_EN`) &amp; ~(1 &lt;&lt; $parent.getParent().getSetting(`sm_number`).getValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $parent.getParent().getSetting(`sm_number`).getValue().toInt()) : 0))" 
                           reverse_value="x -> (((x &amp; (1 &lt;&lt; $parent.getParent().getSetting(`sm_number`).getValue().toInt())) != 0) ? true : false)"/>
                    </assign>
                </item>
                <item id="B" label="B">
                    <description>Enable PWM_B ouput</description>
                    <assign when="true">
                        <register name_expr="`OUTEN`" bitfield_expr="`PWMB_EN`" value="((getBitFieldValue($instance.getPeripheral(), `OUTEN`, `PWMB_EN`) &amp; ~(1 &lt;&lt; $parent.getParent().getSetting(`sm_number`).getValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $parent.getParent().getSetting(`sm_number`).getValue().toInt()) : 0))" 
                           reverse_value="x -> (((x &amp; (1 &lt;&lt; $parent.getParent().getSetting(`sm_number`).getValue().toInt())) != 0) ? true : false)"/>
                    </assign>
                </item>
                <item id="X" label="X">
                    <description>Enable PWM_X ouput</description>
                    <assign when="true">
                        <register name_expr="`OUTEN`" bitfield_expr="`PWMX_EN`" value="((getBitFieldValue($instance.getPeripheral(), `OUTEN`, `PWMX_EN`) &amp; ~(1 &lt;&lt; $parent.getParent().getSetting(`sm_number`).getValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $parent.getParent().getSetting(`sm_number`).getValue().toInt()) : 0))" 
                           reverse_value="x -> (((x &amp; (1 &lt;&lt; $parent.getParent().getSetting(`sm_number`).getValue().toInt())) != 0) ? true : false)"/>
                    </assign>
                </item>
            </set>
            <set id="outputMask_t" label="Output mask list">
                <item id="A" label="A">
                    <description>Mask PWM_A ouput</description>
                    <assign when="true">
                        <register name_expr="`MASK`" bitfield_expr="`MASKA`" value="((getBitFieldValue($instance.getPeripheral(), `MASK`, `MASKA`) &amp; ~(1 &lt;&lt; $parent.getParent().getSetting(`sm_number`).getValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $parent.getParent().getSetting(`sm_number`).getValue().toInt()) : 0))" 
                           reverse_value="x -> (((x &amp; (1 &lt;&lt; $parent.getParent().getSetting(`sm_number`).getValue().toInt())) != 0) ? true : false)"/>
                    </assign>
                </item>
                <item id="B" label="B">
                    <description>Mask PWM_B ouput</description>
                    <assign when="true">
                        <register name_expr="`MASK`" bitfield_expr="`MASKB`" value="((getBitFieldValue($instance.getPeripheral(), `MASK`, `MASKB`) &amp; ~(1 &lt;&lt; $parent.getParent().getSetting(`sm_number`).getValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $parent.getParent().getSetting(`sm_number`).getValue().toInt()) : 0))" 
                           reverse_value="x -> (((x &amp; (1 &lt;&lt; $parent.getParent().getSetting(`sm_number`).getValue().toInt())) != 0) ? true : false)"/>
                    </assign>
                </item>
                <item id="X" label="X">
                    <description>Mask PWM_X ouput</description>
                    <assign when="true">
                        <register name_expr="`MASK`" bitfield_expr="`MASKX`" value="((getBitFieldValue($instance.getPeripheral(), `MASK`, `MASKX`) &amp; ~(1 &lt;&lt; $parent.getParent().getSetting(`sm_number`).getValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $parent.getParent().getSetting(`sm_number`).getValue().toInt()) : 0))" 
                           reverse_value="x -> (((x &amp; (1 &lt;&lt; $parent.getParent().getSetting(`sm_number`).getValue().toInt())) != 0) ? true : false)"/>
                    </assign>
                </item>
            </set>
           <!--  <bool id="outputEn" label="Enable output" options="remove_from_struct_init">
                    <description>If checked, appropriate output is enabled.</description>
                    <assign when="true">
                        <register name_expr="`OUTEN`" bitfield_expr="`PWM` + $parent.channel_label.getValue() + `_EN`" value="((getBitFieldValue($instance.getPeripheral(), `OUTEN`, (`PWM` + $parent.channel_label.getValue() + `_EN`)) &amp; ~(1 &lt;&lt; $parent.sm_number.getValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $parent.sm_number.getValue().toInt()) : 0))" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $parent.sm_number.getValue().toInt())) != 0)"/>
                    </assign>
                </bool>
                <bool id="outputMask" label="Mask output" options="remove_from_struct_init">
                    <description>If checked, appropriate output is masked (signal is disconnected from output) when the FORCE_OUT event occures, or on the following clock if the Immediate mask update is selected.</description>
                    <assign when="true">
                        <register name_expr="`MASK`" bitfield_expr="`MASK` + $parent.channel_label.getValue()" value="((getBitFieldValue($instance.getPeripheral(), `MASK`, (`MASK` + $parent.channel_label.getValue())) &amp; ~(1 &lt;&lt; $parent.sm_number.getValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $parent.sm_number.getValue().toInt()) : 0))" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $parent.sm_number.getValue().toInt())) != 0)"/>
                    </assign>
                </bool> -->
            <set id="fractEn_t" label="Fractional enable list">
                <item id="A" label="FRACVAL2/FRACVAL3" options="REGISTERS_REFRESH">
                    <description>Enable fractional cycle placement for PWMA ouput (compare VAL2 and VAL3). Enable takes 25us startup time.</description>
                    <assign when="true">
                        <register name_expr="$parent.getParent().getParent().getSetting(`sm_prefix`).getValue() + `FRCTRL`" bitfield_expr="`FRAC23_EN`" value="($this.getValue() ? 1 : 0)" 
                           reverse_value="x -> ((x != 0) ? true : false)"/>
                    </assign>
                </item>
                <item id="period" label="Modulo (FRACVAL1)" options="REGISTERS_REFRESH">
                    <description>Enable fractional cycle placement for period (modulo) compare VAL1. Enable takes 25us startup time.</description>
                    <assign when="true">
                        <register name_expr="$parent.getParent().getParent().getSetting(`sm_prefix`).getValue() + `FRCTRL`" bitfield_expr="`FRAC1_EN`" value="($this.getValue() ? 1 : 0)" 
                           reverse_value="x -> ((x != 0) ? true : false)"/>
                    </assign>
                </item>
                <item id="B" label="FRACVAL4/FRACVAL5" options="REGISTERS_REFRESH">
                    <description>Enable fractional cycle placement for PWMA ouput (compare VAL4 and VAL5). Enable takes 25us startup time.</description>
                    <assign when="true">
                        <register name_expr="$parent.getParent().getParent().getSetting(`sm_prefix`).getValue() + `FRCTRL`" bitfield_expr="`FRAC45_EN`" value="($this.getValue() ? 1 : 0)" 
                           reverse_value="x -> ((x != 0) ? true : false)"/>
                    </assign>
                </item>
            </set>
            <struct id="fracControl_t" label="Frac config structure" from="_pwm_config">
                <reference id="fracEn" label="Enable fractional delay" type="fractEn_t">
                    <description>Selects which fractional delays will be used</description>
                    <validation>
                        <constraint when_expr="$parent.getParent().getSetting(`doubleSwitching.`).isAvailable()" cond_expr="(!$parent.getParent().getSetting(`doubleSwitching.doubleEn`).getValue()) || ($this.getCValue() == ``)"  
                         level="error" description="Fractional delay and double switching PWM are not compatible."/>                       
                        <dependency when_expr="($this.getCValue() != ``) &amp;&amp; ($configSet.clockSourceFreq.getEnumItemId() != `custom`)" resource_type="ClockOutput" resource_id_expr="getPeripheralClockSignal($instance.getPeripheral(),$configSet.clockSourceUId.getValue())"
                            description_expr="(getPeripheralClock($instance.getPeripheral(), $configSet.clockSourceUId.getValue()).regexMatch(`.*-.*`) ? ($configSet.inst_ID.getValue() + `: PWM clock (` + getPeripheralClock($instance.getPeripheral(), $configSet.clockSourceUId.getValue()).regexSubstr(`(.*)-`,1) + `) has to be running at 100 MHz for proper fractional delay logic function.`) : ($configSet.inst_ID.getValue() + `: PWM clock (` + getPeripheralClock($instance.getPeripheral(), $configSet.clockSourceUId.getValue()) + `)  has to be running at 100 MHz for proper fractional delay logic function.`))"
                            level="Error">
                            <feature name="frequency" evaluation="equal">
                                <data expr="100" unit="MHz" type="Frequency"/>
                            </feature>
                        </dependency>                        
                        <dependency when_expr="($this.getCValue() != ``)" resource_type="ClockOutput" resource_id_expr="getPeripheralClockSignal($instance.getPeripheral(),$configSet.fractionalClockSourceUId.getValue())"
                            description_expr="(getPeripheralClock($instance.getPeripheral(), $configSet.fractionalClockSourceUId.getValue()).regexMatch(`.*-.*`) ? ($configSet.inst_ID.getValue() + `: Nanoedge 2x clock (` + getPeripheralClock($instance.getPeripheral(), $configSet.fractionalClockSourceUId.getValue()).regexSubstr(`(.*)-`,1) + `) has to be running at 200 MHz for proper fractional delay logic function.`) : ($configSet.inst_ID.getValue() + `: Nanoedge 2x clock (` + getPeripheralClock($instance.getPeripheral(), $configSet.fractionalClockSourceUId.getValue()) + `) has to be running at 200 MHz for proper fractional delay logic function.`))"
                            level="Error">
                            <feature name="frequency" evaluation="equal">
                                <data expr="200" unit="MHz" type="Frequency"/>
                            </feature>
                        </dependency>
                    </validation>
                </reference>
                <bool id="powerUp" label="Power up fractional circuit">
                    <description>Power up the fractional delay analog block.</description>
                    <validation>
                        <dependency when_expr="$this.getValue() &amp;&amp; ($configSet.clockSourceFreq.getEnumItemId() != `custom`)" resource_type="ClockOutput" resource_id_expr="getPeripheralClockSignal($instance.getPeripheral(),$configSet.clockSourceUId.getValue())"
                            description_expr="(getPeripheralClock($instance.getPeripheral(), $configSet.clockSourceUId.getValue()).regexMatch(`.*-.*`) ? ($configSet.inst_ID.getValue() + `: PWM clock (` + getPeripheralClock($instance.getPeripheral(), $configSet.clockSourceUId.getValue()).regexSubstr(`(.*)-`,1) + `) has to be running at 100 MHz for proper fractional delay logic function.`) : ($configSet.inst_ID.getValue() + `: PWM clock (` + getPeripheralClock($instance.getPeripheral(), $configSet.clockSourceUId.getValue()) + `)  has to be running at 100 MHz for proper fractional delay logic function.`))"
                            level="Error">
                            <feature name="frequency" evaluation="equal">
                                <data expr="100" unit="MHz" type="Frequency"/>
                            </feature>
                        </dependency>
                        <dependency when_expr="$this.getValue()" resource_type="ClockOutput" resource_id_expr="getPeripheralClockSignal($instance.getPeripheral(),$configSet.fractionalClockSourceUId.getValue())"
                            description_expr="(getPeripheralClock($instance.getPeripheral(), $configSet.fractionalClockSourceUId.getValue()).regexMatch(`.*-.*`) ? ($configSet.inst_ID.getValue() + `: Nanoedge 2x clock (` + getPeripheralClock($instance.getPeripheral(), $configSet.fractionalClockSourceUId.getValue()).regexSubstr(`(.*)-`,1) + `) has to be running at 200 MHz for proper fractional delay logic function.`) : ($configSet.inst_ID.getValue() + `: Nanoedge 2x clock (` + getPeripheralClock($instance.getPeripheral(), $configSet.fractionalClockSourceUId.getValue()) + `) has to be running at 200 MHz for proper fractional delay logic function.`))"
                            level="Error">
                            <feature name="frequency" evaluation="equal">
                                <data expr="200" unit="MHz" type="Frequency"/>
                            </feature>
                        </dependency>
                    </validation>
                    <assign when="true">
                        <register name_expr="$parent.getParent().getSetting(`sm_prefix`).getValue() + `FRCTRL`" bitfield="FRAC_PU" value="($this.getValue() ? 1 : 0)" reverse_value="(x -> (x == 1) ? true : false)"/>
                    </assign>
                </bool>                
            </struct>
            <enum id="split_t" label="Split" from="_pwm_watermark_control">
                <assign when="true">
                    <register name="" name_expr="$parent.getParent().getSetting(`sm_prefix`).getValue() + `CTRL`" bitfield="" bitfield_expr="(`SPLIT`)" 
                       value="$this.getEnumItemId().toInt()" 
                       reverse_value="x -> x.toString()"/>
                </assign>
                <item id="0" label="No split">
                    <description>Double PWM is not split. PWMA and PWMB each have equal double pulses output.</description>
                </item>
                <item id="1" label="Split to PWMA and PWMB">
                    <description>Double PWM is split. PWMA has the first pulse and PWMB the second one.</description>
                </item>                
            </enum>   
            <struct id="doubleSwitching_t" label="Double switching structure" from="_pwm_config">
                <bool id="doubleEn" label="Enable double switching">
                    <description>Enables the double switching PWM behavior. Double switching is not compatible with fractional PWM clock generation. Double switching PWM means exclusive OR combination of PWMA and PWMB.</description>
                    <assign when="true">
                        <register name_expr="$parent.getParent().getSetting(`sm_prefix`).getValue() + `CTRL`" bitfield="DBLEN" value="($this.getValue() ? 1 : 0)" reverse_value="(x -> (x == 1) ? true : false)"/>
                    </assign>
                </bool>
                <bool id="doubleX" label="Feed PWMX with double pulses">
                    <description>Enables the double switching PWM to be taken as PWMX output source.</description>
                    <assign when="true">
                        <register name_expr="$parent.getParent().getSetting(`sm_prefix`).getValue() + `CTRL`" bitfield="DBLX" value="($this.getValue() ? 1 : 0)" reverse_value="(x -> (x == 1) ? true : false)"/>
                    </assign>
                </bool>
                <reference id="split" label="Double PWMA/B output" type="split_t">
                    <description>Selects what signal will be available on PWMA and PWMB when double switching PWM is used.</description>
                </reference>
            </struct>
            <struct id="pwm_config_t" label="PWM config structure" from="_pwm_config">
                <description>This structure holds the configuration settings for the PWM peripheral. To initialize this structure to reasonable defaults, call the PWM_GetDefaultConfig() function and pass a pointer to your config structure instance.The config struct can be made const so it resides in flash</description>                
                <variable id="sm_number" value="$parent.getParent().getSetting(`sm`).getEnumItemValue()"/>
                <variable id="sm_prefix" value="`SM` + $parent.sm_number.getValue()"/>
                <reference id="_clockSource" label="Clock source" type="pwm_clock_source_t" options="remove_from_struct_init" available="false"/> <!-- item used for clockSource dynamic enum implementation only -->
                <variable id="clockSourceUId" value="$parent.clockSource.getEnumItemValue()"/>
                <dynamic_enum id="clockSource" label="Clock source" items="enumItemsOf($configSet._busClockSource).merge(enumItemsOf($parent._clockSource)).arrayToEnumItems(
                   enumItem -> ((enumItem.getID() != `kPWM_Submodule0Clock`) || (($parent.getParent().getSetting(`sm`).getEnumItemValue())) != `0`),
                   enumItem -> enumItem.getID(),
                   enumItem -> (enumItem.getValue() == `Bus_clock`) ? (enumItem.getLabel()) : (getPeripheralClock($instance.getPeripheral(), enumItem.getValue())),
                   enumItem -> enumItem.getValue())">
                    <description>Clock source for the counter.</description>                    
                    <validation>
                        <dependency when_expr="($this.getEnumItemId() == `kPWM_ExternalClock`)"
                             resource_type="PeripheralUnifiedSignal" 
                             resource_id_expr="$instance.getPeripheral() + `.pwm_ext_clk`" 
                             description_expr="$instance.getPeripheral() + `.EXT_CLK pin needs to be routed`" level="Warning">
                            <feature name="routed" evaluation="equal">
                               <data expr="true"/>
                            </feature>
                        </dependency>
                    </validation>
                    <assign when="true">
                        <register name="" name_expr="$parent.sm_prefix.getValue() + `CTRL2`" bitfield="CLK_SEL" value="(($this.getEnumItemId() == `kPWM_BusClock`) ? 0 : (($this.getEnumItemId() == `kPWM_ExternalClock`) ? 1 : 2))" reverse_value="x -> ((x == 0) ? `kPWM_BusClock` : ((x == 1) ? `kPWM_ExternalClock` : `kPWM_Submodule0Clock`))"/>
                    </assign>                   
                </dynamic_enum>
                <integer type="uint32_t" id="extClockFrequency" label="EXT clock frequency [Hz]" options="remove_from_struct_init" available="($parent.clockSource.isAvailable() &amp;&amp; ($parent.clockSource.getEnumItemId() == `kPWM_ExternalClock`))" min_expr="1">
                  <description>Frequency of the EXT clock signal pin.</description>
                  <!-- <validation>
                        <constraint cond_expr="($parent.r_pwmFreq_Hz.getValue() != `N/A`) &amp;&amp; ($parent.r_pwmFreq_Hz.getValue() &lt; $parent.counterClock.getValue())"  
                         level="error" description="Clock source frequency is not sufficient."/>
                    </validation> -->
                </integer>
                <variable id="submodule0Clock" value="$configSet.submodules.filter(x -> x.getSetting(`sm`).getEnumItemValue() == 0).get(0).getSetting(`config.counterClock`).getValue()" options="remove_from_struct_init" available="($parent.clockSource.isAvailable() &amp;&amp; ($parent.clockSource.getEnumItemId() == `kPWM_Submodule0Clock`))">
                </variable>
                <info id="i_submodule0Clock" label="Submodule 0 clock frequency" value="(($parent.submodule0Clock.getValue() != `N/A`) ? frequencyToString($parent.submodule0Clock.getValue()) : `N/A`)" options="remove_from_struct_init" available="($parent.clockSource.isAvailable() &amp;&amp; ($parent.clockSource.getEnumItemId() == `kPWM_Submodule0Clock`))">
                   <description>Common frequency selected in Submodule 0</description>
                </info>
                <variable id="clockSource_Hz" value="($parent.clockSource.isAvailable() ? (($parent.clockSource.getEnumItemId() == `kPWM_BusClock`) ? ($configSet.clockSourceFreq.getEnumItemValue().toHertz()) : (($parent.clockSource.getEnumItemId() == `kPWM_ExternalClock`) ? ($parent.extClockFrequency.getValue()) : (($parent.clockSource.getEnumItemId() == `kPWM_Submodule0Clock`) ? ($parent.submodule0Clock.getValue()) : `N/A`))) : `N/A`)"/>
                <reference id="prescale" label="Counter prescaler" type="pwm_clock_prescale_t">
                    <description>Pre-scaler to divide down the clock</description>
                </reference>
                <variable id="counterClock" value="(($parent.clockSource_Hz.getValue() != `N/A`) ? (toHertz($parent.clockSource_Hz.getValue())/toHertz($parent.prescale.getEnumItemLabel())) : `N/A`)"/>
                <info id="i_counterClock" label_expr="`Counter clock` + ((($parent.getParent().getSetting(`sm`).getEnumItemValue()) == `0`) ? `/AUX clock source` : ``)" value="system::calculateFreqPeriodRationalClk(toHertz($parent.prescale.getEnumItemLabel()),toHertz($parent.clockSource_Hz.getValue()))">
                    <description expr="`Clock for the counter after divider, calculated as Clock source frequency or EXT clock frequency [Hz]/Counter prescaler` + ((($parent.getParent().getSetting(`sm`).getEnumItemValue()) == `0`) ? ` In case of the submodule 0 (SM0) it is also the AUX clock source, which can be used as synchronous clock for other submodules and may be additionally divided in the appropriate submodule.` : ``)"/>
                </info>
                <reference id="compareMode" label="Counter compare mode" type="compareMode_t">
                    <description>Selects compare mode of the counter equal/equal to or greater than.</description>
                </reference>
                <bool id="loadOK" label="Set LDOK in initialization" options="remove_from_struct_init">
                    <description>If checked, buffered register set is awaiting reload action to be copied to the innner working register set.</description>
                    <assign when="true">
                        <register name_expr="`MCTRL`" bitfield="LDOK" value="((getBitFieldValue($instance.getPeripheral(), `MCTRL`, `LDOK`) &amp; ~(1 &lt;&lt; $parent.sm_number.getValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $parent.sm_number.getValue().toInt()) : 0))" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $parent.sm_number.getValue().toInt())) != 0)"/>
                    </assign>
                </bool>
                <bool id="startCounter" label="Start counter in initialization" options="remove_from_struct_init">
                    <description>If checked counter in submodule starts counting, submodules counters start is synchronous.</description>
                    <assign when="true">
                        <register name_expr="`MCTRL`" bitfield="RUN" value="((getBitFieldValue($instance.getPeripheral(), `MCTRL`, `RUN`) &amp; ~(1 &lt;&lt; $parent.sm_number.getValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $parent.sm_number.getValue().toInt()) : 0))" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $parent.sm_number.getValue().toInt())) != 0)"/>
                    </assign>
                </bool>
                <enum id="signed_unsigned" label="Init and compare values approach" options="UI_LABEL_BOLD">
                    <description>Selects type of the user input to the items INIT and all VALx.</description>
                    <item id="unsigned" label="Unsigned">
                        <description>Range of the item value is from 0..65535 (0x0..0xFFFF).</description>
                    </item>
                    <item id="signed" label="Signed">
                        <description>Range of the item value is from -32768..32768 (0x8000..0x7FFF as a second addition format).</description>
                    </item>
                </enum>
                <info value="``" id="line0" options="UI_LINE_BREAK;UI_LABEL_HIDDEN;remove_from_struct_init"></info>
                <integer id="init" label="INIT - Initialization value" type="int32_t" min_expr="($parent.signed_unsigned.getEnumItemId() == `unsigned`) ? 0 : -32768" max_expr="65535" restriction="dec,hex">
                    <description>Counter initialization value, to which value it goes after modulo (VAL1) + 1 ticks of the counter</description>
                    <assign when="true">
                        <register name="" name_expr="$parent.sm_prefix.getValue() + `INIT`" bitfield="INIT" value=
                        "(system::signedToUnsignedInteger(toInt($parent.init_info_dec.getValue()),16) != `N/A`) ? 
                            system::signedToUnsignedInteger(toInt($parent.init_info_dec.getValue()),16) 
                            :
                            toInt($parent.init_info_dec.getValue())" reverse_value="x -> x"/>
                    </assign>
                </integer>
                <info id="init_info_dec" label="INIT dec value" value="
                (($parent.init.getValue() != 0 || $parent.init.getValue() == 0) &amp;&amp; ($parent.signed_unsigned.getEnumItemId() == `unsigned`) ? 
                    $parent.init.getValue() 
                    : 
                    ($parent.init.getUserEnteredValue().regexMatch(`0x.*`) ? 
                        ((toInt($parent.init.getValue()) &gt; 0x7FFF) ? 
                            ((-1) * (0x10000 - toInt($parent.init.getValue()))) 
                            : 
                            $parent.init.getValue()) 
                        : 
                        $parent.init.getValue())
                )"> 
                    <description>Decadic value calculated from input item above.</description>
                    <validation>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() != `unsigned`) &amp;&amp; ($parent.init.getValue() != 0 || $parent.init.getValue() == 0) &amp;&amp; !$parent.init.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="toInt($this.getValue()) &lt; 0"
                        level="warning"
                        description_expr="$parent.sm_prefix.getValue() + `: INIT value is expected to be in range -32768 to -1`"/>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() == `unsigned`) &amp;&amp; ($parent.init.getValue() != 0 || $parent.init.getValue() == 0) &amp;&amp; !$parent.init.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="toInt($this.getValue()) &lt; toInt($parent.val1_info_dec.getValue())"
                        level="warning"
                        description_expr="$parent.sm_prefix.getValue() + `: INIT value is expected to be smaller than VAL1: ` + $parent.val1_info_dec.getValue()"/>
                    </validation>
                </info>
                <info id="init_info_hex" label="INIT hex value" value="
                ((($parent.init.getValue() != 0 || $parent.init.getValue() == 0) &amp;&amp; ($parent.init.getUserEnteredValue().regexMatch(`0x.*`))) ?                     
                    $parent.init.getUserEnteredValue() 
                    : 
                    ($parent.signed_unsigned.getEnumItemId() == `unsigned`) ? 
                        toString($parent.init_info_dec.getValue(),16) 
                        : 
                        toString(((system::signedToUnsignedInteger(toInt($parent.init_info_dec.getValue()),16) != `N/A`) ? 
                            system::signedToUnsignedInteger(toInt($parent.init_info_dec.getValue()),16) 
                            : 
                            $parent.init_info_dec.getValue()),16)
                )">
                    <description>Hexadecimal value calculated from input item above.</description>                
                    <validation>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() != `unsigned`) &amp;&amp; ($parent.init.getValue() != 0 || $parent.init.getValue() == 0) &amp;&amp; $parent.init.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="toInt($this.getValue()) &gt; 0x7FFF"
                        level="warning"
                        description_expr="$parent.sm_prefix.getValue() + `: INIT value is expected to be in range 0x8000 to 0xFFFF`"/>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() == `unsigned`) &amp;&amp; ($parent.init.getValue() != 0 || $parent.init.getValue() == 0) &amp;&amp; $parent.init.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="toInt($this.getValue()) &lt; toInt($parent.val1_info_dec.getValue())"
                        level="warning"
                        description_expr="$parent.sm_prefix.getValue() + `: INIT value is expected to be smaller than VAL1: ` + $parent.val1_info_hex.getValue()"/>
                    </validation>
                </info>
                <info value="``" id="line1" options="UI_LINE_BREAK;UI_LABEL_HIDDEN;remove_from_struct_init"></info>
                <integer id="val1" label="VAL1 - Modulo value" type="int32_t" min_expr="($parent.signed_unsigned.getEnumItemId() == `unsigned`) ? 0 : -32768" max_expr="65535" restriction="dec,hex">
                    <description>Counter modulo value, VAL1 matches counter (VAL1 compare). This value also defines when the PWM_X signal is reset and the local SYNC signal is set.</description>
                    <assign when="true">
                        <register name="" name_expr="$parent.sm_prefix.getValue() + `VAL1`" bitfield="VAL1" value=
                        "(system::signedToUnsignedInteger(toInt($parent.val1_info_dec.getValue()),16) != `N/A`) ? 
                            system::signedToUnsignedInteger(toInt($parent.val1_info_dec.getValue()),16) 
                            :
                            toInt($parent.val1_info_dec.getValue())" reverse_value="x -> x"/>
                    </assign>
                </integer>
                <info id="val1_info_dec" label="VAL1 dec value" value="
                (($parent.val1.getValue() != 0 || $parent.val1.getValue() == 0) &amp;&amp; ($parent.signed_unsigned.getEnumItemId() == `unsigned`) ? 
                    $parent.val1.getValue() 
                    : 
                    ($parent.val1.getUserEnteredValue().regexMatch(`0x.*`) ? 
                        ((toInt($parent.val1.getValue()) &gt; 0x7FFF) ? 
                            ((-1) * (0x10000 - toInt($parent.val1.getValue()))) 
                            : 
                            $parent.val1.getValue()) 
                        : 
                        $parent.val1.getValue())
                )"> 
                    <description>Decadic value calculated from input item above.</description>                
                    <validation>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() != `unsigned`) &amp;&amp; ($parent.val1.getValue() != 0 || $parent.val1.getValue() == 0) &amp;&amp; !$parent.val1.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="toInt($this.getValue()) &gt; 0 &amp;&amp; toInt($this.getValue()) &lt;= 0x7FFF"
                        level="warning"
                        description_expr="$parent.sm_prefix.getValue() + `: VAL1 value is expected to be in range 1 to 32767`"/>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() == `unsigned`) &amp;&amp; ($parent.val1.getValue() != 0 || $parent.val1.getValue() == 0) &amp;&amp; !$parent.val1.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="toInt($this.getValue()) &gt; toInt($parent.init_info_dec.getValue())"
                        level="warning"
                        description_expr="$parent.sm_prefix.getValue() + `: VAL1 value is expected to be bigger than INIT: ` + $parent.init_info_dec.getValue()"/>
                    </validation>
                </info>
                <info id="val1_info_hex" label="VAL1 hex value" value="
                ((($parent.val1.getValue() != 0 || $parent.val1.getValue() == 0) &amp;&amp; ($parent.val1.getUserEnteredValue().regexMatch(`0x.*`))) ?                     
                    $parent.val1.getUserEnteredValue() 
                    : 
                    ($parent.signed_unsigned.getEnumItemId() == `unsigned`) ? 
                        toString($parent.val1_info_dec.getValue(),16) 
                        : 
                        toString(((system::signedToUnsignedInteger(toInt($parent.val1_info_dec.getValue()),16) != `N/A`) ? 
                            system::signedToUnsignedInteger(toInt($parent.val1_info_dec.getValue()),16) 
                            : 
                            $parent.val1_info_dec.getValue()),16)
                )">
                    <description>Hexadecimal value calculated from input item above.</description>                 
                    <validation>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() != `unsigned`) &amp;&amp; ($parent.val1.getValue() != 0 || $parent.val1.getValue() == 0) &amp;&amp; $parent.val1.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="toInt($this.getValue()) &gt; 0 &amp;&amp; toInt($this.getValue()) &lt;= 0x7FFF"
                        level="warning"
                        description_expr="$parent.sm_prefix.getValue() + `: VAL1 value is expected to be in range 0x1 to 0x7FFF`"/>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() == `unsigned`) &amp;&amp; ($parent.val1.getValue() != 0 || $parent.val1.getValue() == 0) &amp;&amp; $parent.val1.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="toInt($this.getValue()) &gt; toInt($parent.init_info_dec.getValue())"
                        level="warning"
                        description_expr="$parent.sm_prefix.getValue() + `: VAL1 value is expected to be bigger than INIT: ` + $parent.init_info_hex.getValue()"/>
                    </validation>
                </info>
                <integer id="fracval1" label="FRACVAL1" type="uint16_t" min_expr="0" max_expr="31" available="$instance.getPeripheral().registerExists($parent.sm_prefix.getValue() + `FRCTRL`)" restriction="dec,hex">
                    <description>Fractional addition to the Counter modulo value VAL1. This value extend VAL1 by this value * 1/32.</description>
                    <assign when="true">
                        <register name="" name_expr="$parent.sm_prefix.getValue() + `FRACVAL1`" bitfield="FRACVAL1" value="$this.getValue()" reverse_value="x -> x"/>
                    </assign>
                </integer>
                <info value="``" id="line2" options="UI_LINE_BREAK;UI_LABEL_HIDDEN;remove_from_struct_init"></info>
                <integer id="val0" label="VAL0 - Half cycle value" type="int32_t" min_expr="($parent.signed_unsigned.getEnumItemId() == `unsigned`) ? 0 : -32768" max_expr="65535" restriction="dec,hex">
                    <description>Mid-cycle reload point for the PWM in PWM clock periods. This value also defines when the PWM_X signal is set and the local SYNC signal is reset.</description>
                    <assign when="true">
                        <register name="" name_expr="$parent.sm_prefix.getValue() + `VAL0`" bitfield="VAL0" value=
                        "(system::signedToUnsignedInteger(toInt($parent.val0_info_dec.getValue()),16) != `N/A`) ? 
                            system::signedToUnsignedInteger(toInt($parent.val0_info_dec.getValue()),16) 
                            :
                            toInt($parent.val0_info_dec.getValue())" reverse_value="x -> x"/>
                    </assign>
                </integer>
                <info id="val0_info_dec" label="VAL0 dec value" value="
                (($parent.val0.getValue() != 0 || $parent.val0.getValue() == 0) &amp;&amp; ($parent.signed_unsigned.getEnumItemId() == `unsigned`) ? 
                    $parent.val0.getValue() 
                    : 
                    ($parent.val0.getUserEnteredValue().regexMatch(`0x.*`) ? 
                        ((toInt($parent.val0.getValue()) &gt; 0x7FFF) ? 
                            ((-1) * (0x10000 - toInt($parent.val0.getValue()))) 
                            : 
                            $parent.val0.getValue()) 
                        : 
                        $parent.val0.getValue())
                )">
                    <description>Decadic value calculated from input item above.</description>                
                    <validation>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() != `unsigned`) &amp;&amp; ($parent.val0.getValue() != 0 || $parent.val0.getValue() == 0) &amp;&amp; !$parent.val0.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="toInt($this.getValue()) &gt;= toInt($parent.init_info_dec.getValue()) &amp;&amp; toInt($this.getValue()) &lt;= toInt($parent.val1_info_dec.getValue())"
                        level="warning"
                        description_expr="$parent.sm_prefix.getValue() + `: VAL0 value is expected to be in range INIT to VAL1 (through 0): ` + toInt($parent.init_info_dec.getValue()) + ` to ` + toInt($parent.val1_info_dec.getValue())"/>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() == `unsigned`) &amp;&amp; ($parent.val0.getValue() != 0 || $parent.val0.getValue() == 0) &amp;&amp; $parent.val0.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="(toInt($this.getValue()) &gt;= toInt($parent.init_info_dec.getValue())) &amp;&amp; (toInt($this.getValue()) &lt;= toInt($parent.val1_info_dec.getValue()))"
                        level="warning"
                        description_expr="$parent.sm_prefix.getValue() + `: VAL0 value is expected to be in range INIT to VAL1: ` + $parent.init_info_dec.getValue() + ` to ` + $parent.val1_info_dec.getValue()"/>
                    </validation>
                </info>
                <info id="val0_info_hex" label="VAL0 hex value" value="
                ((($parent.val0.getValue() != 0 || $parent.val0.getValue() == 0) &amp;&amp; ($parent.val0.getUserEnteredValue().regexMatch(`0x.*`))) ?                     
                    $parent.val0.getUserEnteredValue() 
                    : 
                    ($parent.signed_unsigned.getEnumItemId() == `unsigned`) ? 
                        toString($parent.val0_info_dec.getValue(),16) 
                        : 
                        toString(((system::signedToUnsignedInteger(toInt($parent.val0_info_dec.getValue()),16) != `N/A`) ? 
                            system::signedToUnsignedInteger(toInt($parent.val0_info_dec.getValue()),16) 
                            : 
                            $parent.val0_info_dec.getValue()),16)
                )">
                    <description>Hexadecimal value calculated from input item above.</description>                 
                    <validation>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() != `unsigned`) &amp;&amp; ($parent.val0.getValue() != 0 || $parent.val0.getValue() == 0) &amp;&amp; $parent.val0.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="(toInt($this.getValue()) &gt;= toInt($parent.init_info_hex.getValue()) &amp;&amp; toInt($this.getValue()) &lt;= 0xFFFF)  || ((toInt($this.getValue()) &gt;= 0x0) &amp;&amp; (toInt($this.getValue()) &lt;= toInt($parent.val1_info_hex.getValue())))"
                        level="warning"
                        description_expr="$parent.sm_prefix.getValue() + `: VAL0 value is expected to be in range INIT to VAL1 (through 0x0): ` + $parent.init_info_hex.getValue() + ` to ` + $parent.val1_info_hex.getValue()"/>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() == `unsigned`) &amp;&amp; ($parent.val0.getValue() != 0 || $parent.val0.getValue() == 0) &amp;&amp; $parent.val0.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="(toInt($this.getValue()) &gt;= toInt($parent.init_info_hex.getValue())) &amp;&amp; (toInt($this.getValue()) &lt;= toInt($parent.val1_info_hex.getValue()))"
                        level="warning"
                        description_expr="$parent.sm_prefix.getValue() + `: VAL0 value is expected to be in range INIT to VAL1: ` + $parent.init_info_hex.getValue() + ` to ` + $parent.val1_info_hex.getValue()"/>
                    </validation>
                </info>
                <info value="``" id="line3" options="UI_LINE_BREAK;UI_LABEL_HIDDEN;remove_from_struct_init"></info>
                <integer id="val2" label="VAL2" type="int32_t" min_expr="($parent.signed_unsigned.getEnumItemId() == `unsigned`) ? 0 : -32768" max_expr="65535" restriction="dec,hex">
                    <description>Specifies compare value for the VAL2 register.</description>
                    <assign when="true">
                        <register name="" name_expr="$parent.sm_prefix.getValue() + `VAL2`" bitfield="VAL2" value=
                        "(system::signedToUnsignedInteger(toInt($parent.val2_info_dec.getValue()),16) != `N/A`) ? 
                            system::signedToUnsignedInteger(toInt($parent.val2_info_dec.getValue()),16) 
                            :
                            toInt($parent.val2_info_dec.getValue())" reverse_value="x -> x"/>
                    </assign>
                </integer>
                <info id="val2_info_dec" label="VAL2 dec value" value="
                (($parent.val2.getValue() != 0 || $parent.val2.getValue() == 0) &amp;&amp; ($parent.signed_unsigned.getEnumItemId() == `unsigned`) ? 
                    $parent.val2.getValue() 
                    : 
                    ($parent.val2.getUserEnteredValue().regexMatch(`0x.*`) ? 
                        ((toInt($parent.val2.getValue()) &gt; 0x7FFF) ? 
                            ((-1) * (0x10000 - toInt($parent.val2.getValue()))) 
                            : 
                            $parent.val2.getValue()) 
                        : 
                        $parent.val2.getValue())
                )">
                    <description>Decadic value calculated from input item above.</description>
                    <!-- <validation>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() != `unsigned`) &amp;&amp; ($parent.val2.getValue() != 0 || $parent.val2.getValue() == 0) &amp;&amp; !$parent.val2.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="toInt($this.getValue()) &gt;= toInt($parent.init_info_dec.getValue()) &amp;&amp; toInt($this.getValue()) &lt;= 0"
                        level="warning"
                        description_expr="`VAL2 value is expected to be in range INIT to 0: ` + toInt($parent.init_info_dec.getValue()) + ` to 0`"/>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() == `unsigned`) &amp;&amp; ($parent.val2.getValue() != 0 || $parent.val2.getValue() == 0) &amp;&amp; !$parent.val2.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="(toInt($this.getValue()) &gt;= toInt($parent.init_info_dec.getValue())) &amp;&amp; (toInt($this.getValue()) &lt;= toInt($parent.val1_info_dec.getValue()))"
                        level="warning"
                        description_expr="`VAL2 value is expected to be in range INIT to VAL1: ` + $parent.init_info_dec.getValue() + ` to ` + $parent.val1_info_dec.getValue()"/>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() == `unsigned`) &amp;&amp; ($parent.val2.getValue() != 0 || $parent.val2.getValue() == 0) &amp;&amp; !$parent.val2.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="(toInt($this.getValue()) &lt;= toInt($parent.val3_info_dec.getValue()))"
                        level="warning"
                        description_expr="`VAL2 value is expected to be smaller than VAL3: ` + $parent.val3_info_dec.getValue()"/>
                    </validation> -->
                </info>
                <info id="val2_info_hex" label="VAL2 hex value" value="
                ((($parent.val2.getValue() != 0 || $parent.val2.getValue() == 0) &amp;&amp; ($parent.val2.getUserEnteredValue().regexMatch(`0x.*`))) ?                     
                    $parent.val2.getUserEnteredValue() 
                    : 
                    ($parent.signed_unsigned.getEnumItemId() == `unsigned`) ? 
                        toString($parent.val2_info_dec.getValue(),16) 
                        : 
                        toString(((system::signedToUnsignedInteger(toInt($parent.val2_info_dec.getValue()),16) != `N/A`) ? 
                            system::signedToUnsignedInteger(toInt($parent.val2_info_dec.getValue()),16) 
                            : 
                            $parent.val2_info_dec.getValue()),16)
                )">
                    <description>Hexadecimal value calculated from input item above.</description>                 
                    <!-- <validation>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() != `unsigned`) &amp;&amp; ($parent.val2.getValue() != 0 || $parent.val2.getValue() == 0) &amp;&amp; $parent.val2.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="(toInt($this.getValue()) &gt;= toInt($parent.init_info_hex.getValue()) &amp;&amp; toInt($this.getValue()) &lt;= 0xFFFF)  || (toInt($this.getValue()) == 0x0)"
                        level="warning"
                        description_expr="`VAL2 value is expected to be in range INIT to 0x0 (through 0xFFFF): ` + $parent.init_info_hex.getValue() + ` to 0xFFFF or equal 0x0`"/>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() == `unsigned`) &amp;&amp; ($parent.val2.getValue() != 0 || $parent.val2.getValue() == 0) &amp;&amp; $parent.val2.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="(toInt($this.getValue()) &gt;= toInt($parent.init_info_hex.getValue())) &amp;&amp; (toInt($this.getValue()) &lt;= toInt($parent.val1_info_hex.getValue()))"
                        level="warning"
                        description_expr="`VAL2 value is expected to be in range INIT to VAL1: ` + $parent.init_info_hex.getValue() + ` to ` + $parent.val1_info_hex.getValue()"/>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() == `unsigned`) &amp;&amp; ($parent.val2.getValue() != 0 || $parent.val2.getValue() == 0) &amp;&amp; $parent.val2.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="(toInt($this.getValue()) &lt;= toInt($parent.val3_info_hex.getValue()))"
                        level="warning"
                        description_expr="`VAL2 value is expected to be smaller than VAL3: ` + $parent.val3_info_hex.getValue()"/>
                    </validation> -->
                </info>                
                <integer id="fracval2" label="FRACVAL2" type="uint16_t" min_expr="0" max_expr="31" available="$instance.getPeripheral().registerExists($parent.sm_prefix.getValue() + `FRCTRL`)" restriction="dec,hex">
                    <description>Fractional addition to the value VAL2. This value extend VAL2 by this value * 1/32.</description>
                    <assign when="true">
                        <register name="" name_expr="$parent.sm_prefix.getValue() + `FRACVAL2`" bitfield="FRACVAL2" value="$this.getValue()" reverse_value="x -> x"/>
                    </assign>
                </integer>
                <info value="``" id="line4" options="UI_LINE_BREAK;UI_LABEL_HIDDEN;remove_from_struct_init"></info>
                <integer id="val3" label="VAL3" type="int32_t" min_expr="($parent.signed_unsigned.getEnumItemId() == `unsigned`) ? 0 : -32768" max_expr="65535" restriction="dec,hex">
                    <description>Specifies compare value for the VAL3 register.</description>
                    <assign when="true">
                        <register name="" name_expr="$parent.sm_prefix.getValue() + `VAL3`" bitfield="VAL3" value=
                        "(system::signedToUnsignedInteger(toInt($parent.val3_info_dec.getValue()),16) != `N/A`) ? 
                            system::signedToUnsignedInteger(toInt($parent.val3_info_dec.getValue()),16) 
                            :
                            toInt($parent.val3_info_dec.getValue())" reverse_value="x -> x"/>
                    </assign>
                </integer>
                <info id="val3_info_dec" label="VAL3 dec value" value="
                (($parent.val3.getValue() != 0 || $parent.val3.getValue() == 0) &amp;&amp; ($parent.signed_unsigned.getEnumItemId() == `unsigned`) ? 
                    $parent.val3.getValue() 
                    : 
                    ($parent.val3.getUserEnteredValue().regexMatch(`0x.*`) ? 
                        ((toInt($parent.val3.getValue()) &gt; 0x7FFF) ? 
                            ((-1) * (0x10000 - toInt($parent.val3.getValue()))) 
                            : 
                            $parent.val3.getValue()) 
                        : 
                        $parent.val3.getValue())
                )">
                    <description>Decadic value calculated from input item above.</description>                
                    <!-- <validation>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() != `unsigned`) &amp;&amp; ($parent.val3.getValue() != 0 || $parent.val3.getValue() == 0) &amp;&amp; !$parent.val3.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="toInt($this.getValue()) &lt;= toInt($parent.val1_info_dec.getValue()) &amp;&amp; toInt($this.getValue()) &gt;= 0"
                        level="warning"
                        description_expr="`VAL3 value is expected to be in range 0 to VAL1: 0 to ` + toInt($parent.val1_info_dec.getValue())"/>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() == `unsigned`) &amp;&amp; ($parent.val3.getValue() != 0 || $parent.val3.getValue() == 0) &amp;&amp; !$parent.val3.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="(toInt($this.getValue()) &gt;= toInt($parent.init_info_dec.getValue())) &amp;&amp; (toInt($this.getValue()) &lt;= toInt($parent.val1_info_dec.getValue()))"
                        level="warning"
                        description_expr="`VAL3 value is expected to be in range INIT to VAL1: ` + $parent.init_info_dec.getValue() + ` to ` + $parent.val1_info_dec.getValue()"/>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() == `unsigned`) &amp;&amp; ($parent.val3.getValue() != 0 || $parent.val3.getValue() == 0) &amp;&amp; !$parent.val3.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="(toInt($this.getValue()) &gt;= toInt($parent.val2_info_dec.getValue()))"
                        level="warning"
                        description_expr="`VAL3 value is expected to be greater than VAL2: ` + $parent.val2_info_dec.getValue()"/>
                    </validation> -->
                </info>
                <info id="val3_info_hex" label="VAL3 hex value" value="
                ((($parent.val3.getValue() != 0 || $parent.val3.getValue() == 0) &amp;&amp; ($parent.val3.getUserEnteredValue().regexMatch(`0x.*`))) ?                     
                    $parent.val3.getUserEnteredValue() 
                    : 
                    ($parent.signed_unsigned.getEnumItemId() == `unsigned`) ? 
                        toString($parent.val3_info_dec.getValue(),16) 
                        : 
                        toString(((system::signedToUnsignedInteger(toInt($parent.val3_info_dec.getValue()),16) != `N/A`) ? 
                            system::signedToUnsignedInteger(toInt($parent.val3_info_dec.getValue()),16) 
                            : 
                            $parent.val3_info_dec.getValue()),16)
                )">
                    <description>Hexadecimal value calculated from input item above.</description>                 
                    <!-- <validation>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() != `unsigned`) &amp;&amp; ($parent.val3.getValue() != 0 || $parent.val3.getValue() == 0) &amp;&amp; $parent.val3.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="toInt($this.getValue()) &gt;= 0 &amp;&amp; toInt($this.getValue()) &lt;= toInt($parent.val1_info_hex.getValue())"
                        level="warning"
                        description_expr="`VAL3 value is expected to be in range 0x0 to VAL1: 0x0 to ` + $parent.val1_info_hex.getValue()"/>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() == `unsigned`) &amp;&amp; ($parent.val3.getValue() != 0 || $parent.val3.getValue() == 0) &amp;&amp; $parent.val3.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="(toInt($this.getValue()) &gt;= toInt($parent.init_info_hex.getValue())) &amp;&amp; (toInt($this.getValue()) &lt;= toInt($parent.val1_info_hex.getValue()))"
                        level="warning"
                        description_expr="`VAL3 value is expected to be in range INIT to VAL1: ` + $parent.init_info_hex.getValue() + ` to ` + $parent.val1_info_hex.getValue()"/>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() == `unsigned`) &amp;&amp; ($parent.val3.getValue() != 0 || $parent.val3.getValue() == 0) &amp;&amp; $parent.val3.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="(toInt($this.getValue()) &gt;= toInt($parent.val2_info_hex.getValue()))"
                        level="warning"
                        description_expr="`VAL3 value is expected to be greater than VAL2: ` + $parent.val2_info_hex.getValue()"/>
                    </validation> -->
                </info>
                <integer id="fracval3" label="FRACVAL3" type="uint16_t" min_expr="0" max_expr="31" available="$instance.getPeripheral().registerExists($parent.sm_prefix.getValue() + `FRCTRL`)" restriction="dec,hex">
                    <description>Fractional addition to the value VAL3. This value extend VAL3 by this value * 1/32.</description>
                    <assign when="true">
                        <register name="" name_expr="$parent.sm_prefix.getValue() + `FRACVAL3`" bitfield="FRACVAL3" value="$this.getValue()" reverse_value="x -> x"/>
                    </assign>
                </integer>
                <info value="``" id="line5" options="UI_LINE_BREAK;UI_LABEL_HIDDEN;remove_from_struct_init"></info>
                <integer id="val4" label="VAL4" type="int32_t" min_expr="($parent.signed_unsigned.getEnumItemId() == `unsigned`) ? 0 : -32768" max_expr="65535" restriction="dec,hex">
                    <description>Specifies compare value for the VAL4 register.</description>
                    <assign when="true">
                        <register name="" name_expr="$parent.sm_prefix.getValue() + `VAL4`" bitfield="VAL4" value=
                        "(system::signedToUnsignedInteger(toInt($parent.val4_info_dec.getValue()),16) != `N/A`) ? 
                            system::signedToUnsignedInteger(toInt($parent.val4_info_dec.getValue()),16) 
                            :
                            toInt($parent.val4_info_dec.getValue())" reverse_value="x -> x"/>
                    </assign>
                </integer>
                <info id="val4_info_dec" label="VAL4 dec value" value="
                (($parent.val4.getValue() != 0 || $parent.val4.getValue() == 0) &amp;&amp; ($parent.signed_unsigned.getEnumItemId() == `unsigned`) ? 
                    $parent.val4.getValue() 
                    : 
                    ($parent.val4.getUserEnteredValue().regexMatch(`0x.*`) ? 
                        ((toInt($parent.val4.getValue()) &gt; 0x7FFF) ? 
                            ((-1) * (0x10000 - toInt($parent.val4.getValue()))) 
                            : 
                            $parent.val4.getValue()) 
                        : 
                        $parent.val4.getValue())
                )">
                    <description>Decadic value calculated from input item above.</description>                
                    <!-- <validation>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() != `unsigned`) &amp;&amp; ($parent.val4.getValue() != 0 || $parent.val4.getValue() == 0) &amp;&amp; !$parent.val4.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="toInt($this.getValue()) &gt;= toInt($parent.init_info_dec.getValue()) &amp;&amp; toInt($this.getValue()) &lt;= 0"
                        level="warning"
                        description_expr="`VAL4 value is expected to be in range INIT to 0: ` + toInt($parent.init_info_dec.getValue()) + ` to 0`"/>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() == `unsigned`) &amp;&amp; ($parent.val4.getValue() != 0 || $parent.val4.getValue() == 0) &amp;&amp; !$parent.val4.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="(toInt($this.getValue()) &gt;= toInt($parent.init_info_dec.getValue())) &amp;&amp; (toInt($this.getValue()) &lt;= toInt($parent.val1_info_dec.getValue()))"
                        level="warning"
                        description_expr="`VAL4 value is expected to be in range INIT to VAL1: ` + $parent.init_info_dec.getValue() + ` to ` + $parent.val1_info_dec.getValue()"/>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() == `unsigned`) &amp;&amp; ($parent.val4.getValue() != 0 || $parent.val4.getValue() == 0) &amp;&amp; !$parent.val4.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="(toInt($this.getValue()) &lt;= toInt($parent.val5_info_dec.getValue()))"
                        level="warning"
                        description_expr="`VAL4 value is expected to be smaller than VAL5: ` + $parent.val5_info_dec.getValue()"/>
                    </validation> -->
                </info>
                <info id="val4_info_hex" label="VAL4 hex value" value="
                ((($parent.val4.getValue() != 0 || $parent.val4.getValue() == 0) &amp;&amp; ($parent.val4.getUserEnteredValue().regexMatch(`0x.*`))) ?                     
                    $parent.val4.getUserEnteredValue() 
                    : 
                    ($parent.signed_unsigned.getEnumItemId() == `unsigned`) ? 
                        toString($parent.val4_info_dec.getValue(),16) 
                        : 
                        toString(((system::signedToUnsignedInteger(toInt($parent.val4_info_dec.getValue()),16) != `N/A`) ? 
                            system::signedToUnsignedInteger(toInt($parent.val4_info_dec.getValue()),16) 
                            : 
                            $parent.val4_info_dec.getValue()),16)
                )">
                    <description>Hexadecimal value calculated from input item above.</description>                 
                    <!-- <validation>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() != `unsigned`) &amp;&amp; ($parent.val4.getValue() != 0 || $parent.val4.getValue() == 0) &amp;&amp; $parent.val4.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="(toInt($this.getValue()) &gt;= toInt($parent.init_info_hex.getValue()) &amp;&amp; toInt($this.getValue()) &lt;= 0xFFFF)  || (toInt($this.getValue()) == 0x0)"
                        level="warning"
                        description_expr="`VAL4 value is expected to be in range INIT to 0x0 (through 0xFFFF): ` + $parent.init_info_hex.getValue() + ` to 0xFFFF or equal 0x0`"/>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() == `unsigned`) &amp;&amp; ($parent.val4.getValue() != 0 || $parent.val4.getValue() == 0) &amp;&amp; $parent.val4.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="(toInt($this.getValue()) &gt;= toInt($parent.init_info_hex.getValue())) &amp;&amp; (toInt($this.getValue()) &lt;= toInt($parent.val1_info_hex.getValue()))"
                        level="warning"
                        description_expr="`VAL4 value is expected to be in range INIT to VAL1: ` + $parent.init_info_hex.getValue() + ` to ` + $parent.val1_info_hex.getValue()"/>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() == `unsigned`) &amp;&amp; ($parent.val4.getValue() != 0 || $parent.val4.getValue() == 0) &amp;&amp; $parent.val4.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="(toInt($this.getValue()) &lt;= toInt($parent.val5_info_hex.getValue()))"
                        level="warning"
                        description_expr="`VAL4 value is expected to be smaller than VAL5: ` + $parent.val5_info_hex.getValue()"/>
                    </validation> -->
                </info>
                <integer id="fracval4" label="FRACVAL4" type="uint16_t" min_expr="0" max_expr="31" available="$instance.getPeripheral().registerExists($parent.sm_prefix.getValue() + `FRCTRL`)" restriction="dec,hex">
                    <description>Fractional addition to the value VAL4. This value extend VAL4 by this value * 1/32.</description>
                    <assign when="true">
                        <register name="" name_expr="$parent.sm_prefix.getValue() + `FRACVAL4`" bitfield="FRACVAL4" value="$this.getValue()" reverse_value="x -> x"/>
                    </assign>
                </integer>
                <info value="``" id="line6" options="UI_LINE_BREAK;UI_LABEL_HIDDEN;remove_from_struct_init"></info>
                <integer id="val5" label="VAL5" type="int32_t" min_expr="($parent.signed_unsigned.getEnumItemId() == `unsigned`) ? 0 : -32768" max_expr="65535" restriction="dec,hex">
                    <description>Specifies compare value for the VAL5 register.</description>
                    <assign when="true">
                        <register name="" name_expr="$parent.sm_prefix.getValue() + `VAL5`" bitfield="VAL5" value=
                        "(system::signedToUnsignedInteger(toInt($parent.val5_info_dec.getValue()),16) != `N/A`) ? 
                            system::signedToUnsignedInteger(toInt($parent.val5_info_dec.getValue()),16) 
                            :
                            toInt($parent.val5_info_dec.getValue())" reverse_value="x -> x"/>
                    </assign>
                </integer>
                <info id="val5_info_dec" label="VAL5 dec value" value="
                (($parent.val5.getValue() != 0 || $parent.val5.getValue() == 0) &amp;&amp; ($parent.signed_unsigned.getEnumItemId() == `unsigned`) ? 
                    $parent.val5.getValue() 
                    : 
                    ($parent.val5.getUserEnteredValue().regexMatch(`0x.*`) ? 
                        ((toInt($parent.val5.getValue()) &gt; 0x7FFF) ? 
                            ((-1) * (0x10000 - toInt($parent.val5.getValue()))) 
                            : 
                            $parent.val5.getValue()) 
                        : 
                        $parent.val5.getValue())
                )">
                    <description>Decadic value calculated from input item above.</description>                
                    <!-- <validation>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() != `unsigned`) &amp;&amp; ($parent.val5.getValue() != 0 || $parent.val5.getValue() == 0) &amp;&amp; !$parent.val5.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="toInt($this.getValue()) &lt;= toInt($parent.val1_info_dec.getValue()) &amp;&amp; toInt($this.getValue()) &gt;= 0"
                        level="warning"
                        description_expr="`VAL5 value is expected to be in range 0 to VAL1: 0 to ` + toInt($parent.val1_info_dec.getValue())"/>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() == `unsigned`) &amp;&amp; ($parent.val5.getValue() != 0 || $parent.val5.getValue() == 0) &amp;&amp; !$parent.val5.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="(toInt($this.getValue()) &gt;= toInt($parent.init_info_dec.getValue())) &amp;&amp; (toInt($this.getValue()) &lt;= toInt($parent.val1_info_dec.getValue()))"
                        level="warning"
                        description_expr="`VAL5 value is expected to be in range INIT to VAL1: ` + $parent.init_info_dec.getValue() + ` to ` + $parent.val1_info_dec.getValue()"/>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() == `unsigned`) &amp;&amp; ($parent.val5.getValue() != 0 || $parent.val5.getValue() == 0) &amp;&amp; !$parent.val5.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="(toInt($this.getValue()) &gt;= toInt($parent.val4_info_dec.getValue()))"
                        level="warning"
                        description_expr="`VAL5 value is expected to be greater than VAL4: ` + $parent.val4_info_dec.getValue()"/>
                    </validation> -->
                </info>
                <info id="val5_info_hex" label="VAL5 hex value" value="
                ((($parent.val5.getValue() != 0 || $parent.val5.getValue() == 0) &amp;&amp; ($parent.val5.getUserEnteredValue().regexMatch(`0x.*`))) ?                     
                    $parent.val5.getUserEnteredValue() 
                    : 
                    ($parent.signed_unsigned.getEnumItemId() == `unsigned`) ? 
                        toString($parent.val5_info_dec.getValue(),16) 
                        : 
                        toString(((system::signedToUnsignedInteger(toInt($parent.val5_info_dec.getValue()),16) != `N/A`) ? 
                            system::signedToUnsignedInteger(toInt($parent.val5_info_dec.getValue()),16) 
                            : 
                            $parent.val5_info_dec.getValue()),16)
                )">
                    <description>Hexadecimal value calculated from input item above.</description>                 
                    <!-- <validation>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() != `unsigned`) &amp;&amp; ($parent.val5.getValue() != 0 || $parent.val5.getValue() == 0) &amp;&amp; $parent.val5.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="toInt($this.getValue()) &gt;= 0 &amp;&amp; toInt($this.getValue()) &lt;= toInt($parent.val1_info_hex.getValue())"
                        level="warning"
                        description_expr="`VAL5 value is expected to be in range 0x0 to VAL1: 0x0 to ` + $parent.val1_info_hex.getValue()"/>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() == `unsigned`) &amp;&amp; ($parent.val5.getValue() != 0 || $parent.val5.getValue() == 0) &amp;&amp; $parent.val5.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="(toInt($this.getValue()) &gt;= toInt($parent.init_info_hex.getValue())) &amp;&amp; (toInt($this.getValue()) &lt;= toInt($parent.val1_info_hex.getValue()))"
                        level="warning"
                        description_expr="`VAL5 value is expected to be in range INIT to VAL1: ` + $parent.init_info_hex.getValue() + ` to ` + $parent.val1_info_hex.getValue()"/>
                        <constraint when_expr="($parent.signed_unsigned.getEnumItemId() == `unsigned`) &amp;&amp; ($parent.val5.getValue() != 0 || $parent.val5.getValue() == 0) &amp;&amp; $parent.val5.getUserEnteredValue().regexMatch(`0x.*`)"
                        cond_expr="(toInt($this.getValue()) &gt;= toInt($parent.val4_info_hex.getValue()))"
                        level="warning"
                        description_expr="`VAL5 value is expected to be greater than VAL4: ` + $parent.val4_info_hex.getValue()"/>
                    </validation> -->
                </info>
                <integer id="fracval5" label="FRACVAL5" type="uint16_t" min_expr="0" max_expr="31" available="$instance.getPeripheral().registerExists($parent.sm_prefix.getValue() + `FRCTRL`)" restriction="dec,hex">
                    <description>Fractional addition to the value VAL5. This value extend VAL5 by this value * 1/32.</description>
                    <assign when="true">
                        <register name="" name_expr="$parent.sm_prefix.getValue() + `FRACVAL5`" bitfield="FRACVAL5" value="$this.getValue()" reverse_value="x -> x"/>
                    </assign>
                </integer>
                <info value="``" id="line7" options="UI_LINE_BREAK;UI_LABEL_HIDDEN;remove_from_struct_init"></info>
                <reference id="initializationControl" label="Initialize counter by" type="pwm_init_source_t">
                    <description>Option to initialize the counter</description>
                    <validation>
                        <dependency when_expr="($this.getEnumItemId() == `kPWM_Initialize_ExtSync`)"
                             resource_type="PeripheralUnifiedSignal" 
                             resource_id_expr="$instance.getPeripheral() + `.pwm_ext_sync.` + ($parent.getParent().getSetting(`sm`).getEnumItemValue())" 
                             description_expr="$instance.getPeripheral() + `.EXT_SYNC, ` + ($parent.getParent().getSetting(`sm`).getEnumItemValue()) + ` pin needs to be routed`" level="Warning">
                            <feature name="routed" evaluation="equal">
                               <data expr="true"/>
                            </feature>
                        </dependency>
                    </validation>
                </reference>
                <integer id="phaseDly" label="Phase delay" type="uint16_t" enable="$parent.initializationControl.getEnumItemId() == `2`" available="$parent.sm_number.getValue() != `0`">
                    <description>Number of ticks before the INIT signal takes action after the Master SYNC signal arrives.</description>
                    <assign when="true">
                        <register name="" name_expr="$parent.sm_prefix.getValue() + `PHASEDLY`" bitfield="PHASEDLY" value="$this.getValue()" reverse_value="x -> x"/>
                    </assign>
                </integer>
                <info id="counterFrequency" label="Counter frequency/period" value="
                (($parent.initializationControl.getEnumItemId() == `0`) 
                ? 
                    ((((toInt($parent.val1_info_dec.getValue()) - toInt($parent.init_info_dec.getValue())) &gt; 0) ? 
                        frequencyToString(1.0 * ($parent.counterClock.getValue()) / (1.0 * ((toInt($parent.val1_info_dec.getValue()) - toInt($parent.init_info_dec.getValue())) + 1))) + `; ` + 
                        timeToString(1000000.0 / (1.0 * ($parent.counterClock.getValue()) / (1.0 * ((toInt($parent.val1_info_dec.getValue()) - toInt($parent.init_info_dec.getValue())) + 1)))) 
                    : 
                        `N/A`)
                    + ($parent.fracval1.isAvailable() 
                        ? 
                            (`  |  Fractional used: ` + ((($parent.counterClock.getValue() != `N/A`) &amp;&amp; ($parent.counterClock.getValue() &gt; 0) &amp;&amp; (((toInt($parent.val1_info_dec.getValue()) - toInt($parent.init_info_dec.getValue())) + ($parent.fracval1.getValue())) &gt; 0)) 
                            ? 
                                frequencyToString(1.0 * ($parent.counterClock.getValue() / (1.0 * ((toInt($parent.val1_info_dec.getValue()) - toInt($parent.init_info_dec.getValue())) + 1) + (1.0 *  $parent.fracval1.getValue() / 32)))) + `; ` + 
                                timeToString(1000000.0 / (1.0 * ($parent.counterClock.getValue() / (1.0 * ((toInt($parent.val1_info_dec.getValue()) - toInt($parent.init_info_dec.getValue())) + 1) + (1.0 *  $parent.fracval1.getValue() / 32))))) 
                            : 
                                `N/A`)) 
                        : 
                            ``)) 
                :
                    (($parent.initializationControl.getEnumItemId() == `3`) 
                    ?
                        `External signal dependent`
                    :
                        `Master counter frequency dependent`)
                )">
                    <description>
Frequency of the counter calculated as Clock source divided by Counter prescaler and then divided by 
* in case of Local SYNC: ((Modulo VAL1 - INIT + 1) + Frac VAL1(if used))
* in case of Master RELOAD: N/A - Master counter frequency dependent
* in case of Master SYNC: N/A - Master counter frequency dependent
* in case of EXT_SYNC: N/A - External signal dependent
 and the period is 1/calculated frequency.
                    </description>
                </info>                
                <bool id="enableDebugMode" label="Run in DEBUG mode">
                    <description>If checked PWM continues to run in DEBUG mode else PWM is paused</description>
                    <assign when="true">
                        <register name_expr="$parent.sm_prefix.getValue() + `CTRL2`" bitfield="DBGEN" value="($this.getValue() ? 1 : 0)" reverse_value="(x -> (x == 1) ? true : false)"/>
                    </assign>
                </bool>
                <bool id="enableWait" label="Run in WAIT mode">
                    <description>If checked PWM continues to run in WAIT mode else PWM is paused</description>
                    <assign when="true">
                        <register name_expr="$parent.sm_prefix.getValue() + `CTRL2`" bitfield="WAITEN" value="($this.getValue() ? 1 : 0)" reverse_value="(x -> (x == 1) ? true : false)"/>
                    </assign>
                </bool>
                <reference id="pairOperation" label="PWMA and PWMB output mode" type="pwm_chnl_pair_operation_t">
                    <description>
* **Indepedent mode**:
    * Deadtime is not accessible, due the channels are taken independently - do not interconnect outputs to the transistor half-bridge
* **Complementary mode**:
    * Deadtime has to be specified (to prevent damage of the half-bridge transistors), expects the outputs to be interconnect with the transistors of the half-bridge
    * When the channel is not main one, its duty is taken as complement of the main channel
                    </description>
                </reference>
                <reference id="pairMain" label="Complementary mode control source" type="pwm_main_chnl_pair_operation_t">
                    <description>Selects main channel for the complementary mode</description>
                </reference>
                <reference id="deadtime_logic_inputs" label="Deadtime logic inputs settings" type="deadtime_logic_inputs_t" options="UI_LABEL_HIDDEN; UI_BORDER_HIDDEN">
                    <description>Parameters for the deadtime logic inputs</description>
                </reference>
                <reference id="deadtime_params" label="Deadtime settings" type="deadtime_params_t" options="UI_LABEL_HIDDEN; UI_BORDER_HIDDEN">
                    <description>Parameters for the deadtime</description>
                </reference>
                <reference id="reloadControl" label="Reload settings" type="reloadControl_t" options="remove_from_struct_init">
                    <description>Settings related to the Reload event</description>
                </reference>                
                <reference id="forceControl" label="Force settings" type="forceControl_t" options="remove_from_struct_init">
                    <description>Settings related to the FORCE signal</description>
                </reference>
                <reference id="fracControl" label="Fractional circuit settings" type="fracControl_t" options="remove_from_struct_init" available="$instance.getPeripheral().registerExists($parent.sm_prefix.getValue() + `FRCTRL`)">
                    <description>Settings related to the fractional circuit</description>
                </reference>
                <reference id="doubleSwitching" label="Double switching PWM settings" type="doubleSwitching_t" options="remove_from_struct_init">
                    <description>Settings related to double switching PWM</description>
                </reference>
                <reference id="outputEn" label="Enable outputs" type="outputEn_t" options="remove_from_struct_init; UI_MULTI_COLUMN=3">
                    <description>Selects which output will be enabled in initialization.</description>
                </reference>
                <reference id="outputMask" label="Mask outputs" type="outputMask_t" options="remove_from_struct_init; UI_MULTI_COLUMN=3">
                    <description>Selects which output will be masked (disconnected from PWM signal) in initialization.</description>
                </reference>
                <bool id="maskImmediately" label="Mask outputs immediately" options="remove_from_struct_init">
                    <description>If checked, masked outputs are immediately (following clock edge after mask register write) disconected, else selected outputs masking awaiting FORCE_OUT signal.</description>
                    <assign when="true">
                        <register name_expr="`MASK`" bitfield="UPDATE_MASK" value="((getBitFieldValue($instance.getPeripheral(), `MASK`, `UPDATE_MASK`) &amp; ~(1 &lt;&lt; $parent.sm_number.getValue().toInt())) | ($this.getValue() ? (1 &lt;&lt; $parent.sm_number.getValue().toInt()) : 0))" 
                           reverse_value="x -> ((x &amp; (1 &lt;&lt; $parent.sm_number.getValue().toInt())) != 0)"/>
                    </assign>
                </bool>
                <reference id="outputTrigger_sel" label="Output triggers sources" type="pwm_value_register_t" options="remove_from_struct_init">
                    <description>Selection of the two output trigger (Trigger 0 and Trigger 1) sources. Trigger 0 (first column) can be activated by match of the VAL0, VAL2, VAL4 registers. Trigger 0 (second column) can be activated by match of the VAL1, VAL3, VAL5 registers.</description>
                </reference>
                <reference id="triggerFrequency" label="Output triggers frequency" type="triggerFrequency_t" options="remove_from_struct_init">
                    <description>Selection takes control over the frequency of the trigger outputs when using non-zero values of CTRL[LDFQ].</description>
                </reference>
                <reference id="triggerSource0" label="PWM_MUX_TRIG0 source" type="triggerSource0_t" options="remove_from_struct_init">
                    <description>Selects what will be source of output trigger signal PWM_MUX_TRIG0.</description>
                </reference>
                <reference id="triggerSource1" label="PWM_MUX_TRIG1 source" type="triggerSource1_t" options="remove_from_struct_init">
                    <description>Selects what will be source of output trigger signal PWM_MUX_TRIG1.</description>
                </reference>                
                <reference id="interrupt_sel" label="Interrupt sources" type="main_config_interrupt_enable_t" options="remove_from_struct_init">
                    <validation>
                        <constraint when_expr="$parent.getParent().getSetting(`common_interrupt_exist`).getValue() &amp;&amp; $this.getSetting(`kPWM_CompareVal0InterruptEnable`).getValue()"
                        cond_expr="$parent.getParent().getSetting(`common_interruptEn`).getValue()"
                        level="warning"
                        description_expr="`VAL0 compare interrupt source is enabled, but the INTC settings not. See Enable compare` + (($configSet.oRedCapture_interrupt_exist.getValue()) ? `` : `/capture`) + `/reload interrupt vector item.`"/>
                        <constraint when_expr="!($parent.getParent().getSetting(`common_interrupt_exist`).getValue()) &amp;&amp; $this.getSetting(`kPWM_CompareVal0InterruptEnable`).getValue()"
                        cond_expr="$parent.getParent().getSetting(`compare_interruptEn`).getValue()"
                        level="warning"
                        description_expr="`VAL0 compare interrupt source is enabled, but the INTC settings not. See Enable compare interrupt vector item.`"/>
                        <constraint when_expr="$parent.getParent().getSetting(`common_interrupt_exist`).getValue() &amp;&amp; $this.getSetting(`kPWM_CompareVal1InterruptEnable`).getValue()"
                        cond_expr="$parent.getParent().getSetting(`common_interruptEn`).getValue()"
                        level="warning"
                        description_expr="`VAL1 compare interrupt source is enabled, but the INTC settings not. See Enable compare` + (($configSet.oRedCapture_interrupt_exist.getValue()) ? `` : `/capture`) + `/reload interrupt vector item.`"/>
                        <constraint when_expr="!($parent.getParent().getSetting(`common_interrupt_exist`).getValue()) &amp;&amp; $this.getSetting(`kPWM_CompareVal1InterruptEnable`).getValue()"
                        cond_expr="$parent.getParent().getSetting(`compare_interruptEn`).getValue()"
                        level="warning"
                        description_expr="`VAL1 compare interrupt source is enabled, but the INTC settings not. See Enable compare interrupt vector item.`"/>
                        <constraint when_expr="$parent.getParent().getSetting(`common_interrupt_exist`).getValue() &amp;&amp; $this.getSetting(`kPWM_CompareVal2InterruptEnable`).getValue()"
                        cond_expr="$parent.getParent().getSetting(`common_interruptEn`).getValue()"
                        level="warning"
                        description_expr="`VAL2 compare interrupt source is enabled, but the INTC settings not. See Enable compare` + (($configSet.oRedCapture_interrupt_exist.getValue()) ? `` : `/capture`) + `/reload interrupt vector item.`"/>
                        <constraint when_expr="!($parent.getParent().getSetting(`common_interrupt_exist`).getValue()) &amp;&amp; $this.getSetting(`kPWM_CompareVal2InterruptEnable`).getValue()"
                        cond_expr="$parent.getParent().getSetting(`compare_interruptEn`).getValue()"
                        level="warning"
                        description_expr="`VAL2 compare interrupt source is enabled, but the INTC settings not. See Enable compare interrupt vector item.`"/>
                        <constraint when_expr="$parent.getParent().getSetting(`common_interrupt_exist`).getValue() &amp;&amp; $this.getSetting(`kPWM_CompareVal3InterruptEnable`).getValue()"
                        cond_expr="$parent.getParent().getSetting(`common_interruptEn`).getValue()"
                        level="warning"
                        description_expr="`VAL3 compare interrupt source is enabled, but the INTC settings not. See Enable compare` + (($configSet.oRedCapture_interrupt_exist.getValue()) ? `` : `/capture`) + `/reload interrupt vector item.`"/>
                        <constraint when_expr="!($parent.getParent().getSetting(`common_interrupt_exist`).getValue()) &amp;&amp; $this.getSetting(`kPWM_CompareVal3InterruptEnable`).getValue()"
                        cond_expr="$parent.getParent().getSetting(`compare_interruptEn`).getValue()"
                        level="warning"
                        description_expr="`VAL3 compare interrupt source is enabled, but the INTC settings not. See Enable compare interrupt vector item.`"/>
                        <constraint when_expr="$parent.getParent().getSetting(`common_interrupt_exist`).getValue() &amp;&amp; $this.getSetting(`kPWM_CompareVal4InterruptEnable`).getValue()"
                        cond_expr="$parent.getParent().getSetting(`common_interruptEn`).getValue()"
                        level="warning"
                        description_expr="`VAL4 compare interrupt source is enabled, but the INTC settings not. See Enable compare` + (($configSet.oRedCapture_interrupt_exist.getValue()) ? `` : `/capture`) + `/reload interrupt vector item.`"/>
                        <constraint when_expr="!($parent.getParent().getSetting(`common_interrupt_exist`).getValue()) &amp;&amp; $this.getSetting(`kPWM_CompareVal4InterruptEnable`).getValue()"
                        cond_expr="$parent.getParent().getSetting(`compare_interruptEn`).getValue()"
                        level="warning"
                        description_expr="`VAL4 compare interrupt source is enabled, but the INTC settings not. See Enable compare interrupt vector item.`"/>
                        <constraint when_expr="$parent.getParent().getSetting(`common_interrupt_exist`).getValue() &amp;&amp; $this.getSetting(`kPWM_CompareVal5InterruptEnable`).getValue()"
                        cond_expr="$parent.getParent().getSetting(`common_interruptEn`).getValue()"
                        level="warning"
                        description_expr="`VAL5 compare interrupt source is enabled, but the INTC settings not. See Enable compare` + (($configSet.oRedCapture_interrupt_exist.getValue()) ? `` : `/capture`) + `/reload interrupt vector item.`"/>
                        <constraint when_expr="!($parent.getParent().getSetting(`common_interrupt_exist`).getValue()) &amp;&amp; $this.getSetting(`kPWM_CompareVal5InterruptEnable`).getValue()"
                        cond_expr="$parent.getParent().getSetting(`compare_interruptEn`).getValue()"
                        level="warning"
                        description_expr="`VAL5 compare interrupt source is enabled, but the INTC settings not. See Enable compare interrupt vector item.`"/>
                        
                        <constraint when_expr="$parent.getParent().getSetting(`common_interrupt_exist`).getValue() &amp;&amp; !($configSet.oRedCapture_interrupt_exist.getValue()) &amp;&amp; $this.getSetting(`kPWM_CaptureA0InterruptEnable`).getValue()"
                        cond_expr="$parent.getParent().getSetting(`common_interruptEn`).getValue()"
                        level="warning"
                        description_expr="`Capture A0 interrupt source is enabled, but the INTC settings not. See Enable compare` + (($configSet.oRedCapture_interrupt_exist.getValue()) ? `` : `/capture`) + `/reload interrupt vector item.`"/>
                        <constraint when_expr="($configSet.oRedCapture_interrupt_exist.getValue()) &amp;&amp; $this.getSetting(`kPWM_CaptureA0InterruptEnable`).getValue()"
                        cond_expr="($configSet.capture_interruptEn.getValue())"
                        level="warning"
                        description_expr="`Capture A0 interrupt source is enabled, but the INTC settings not. See Enable capture interrupt vector item.`"/>
                        <constraint when_expr="$parent.getParent().getSetting(`common_interrupt_exist`).getValue() &amp;&amp; !($configSet.oRedCapture_interrupt_exist.getValue()) &amp;&amp; $this.getSetting(`kPWM_CaptureA1InterruptEnable`).getValue()"
                        cond_expr="$parent.getParent().getSetting(`common_interruptEn`).getValue()"
                        level="warning"
                        description_expr="`Capture A1 interrupt source is enabled, but the INTC settings not. See Enable compare` + (($configSet.oRedCapture_interrupt_exist.getValue()) ? `` : `/capture`) + `/reload interrupt vector item.`"/>                        
                        <constraint when_expr="($configSet.oRedCapture_interrupt_exist.getValue()) &amp;&amp; $this.getSetting(`kPWM_CaptureA1InterruptEnable`).getValue()"
                        cond_expr="($configSet.capture_interruptEn.getValue())"
                        level="warning"
                        description_expr="`Capture A1 interrupt source is enabled, but the INTC settings not. See Enable capture interrupt vector item.`"/>
                        <constraint when_expr="$parent.getParent().getSetting(`common_interrupt_exist`).getValue() &amp;&amp; !($configSet.oRedCapture_interrupt_exist.getValue()) &amp;&amp; $this.getSetting(`kPWM_CaptureB0InterruptEnable`).getValue()"
                        cond_expr="$parent.getParent().getSetting(`common_interruptEn`).getValue()"
                        level="warning"
                        description_expr="`Capture B0 interrupt source is enabled, but the INTC settings not. See Enable compare` + (($configSet.oRedCapture_interrupt_exist.getValue()) ? `` : `/capture`) + `/reload interrupt vector item.`"/>
                        <constraint when_expr="($configSet.oRedCapture_interrupt_exist.getValue()) &amp;&amp; $this.getSetting(`kPWM_CaptureB0InterruptEnable`).getValue()"
                        cond_expr="($configSet.capture_interruptEn.getValue())"
                        level="warning"
                        description_expr="`Capture B0 interrupt source is enabled, but the INTC settings not. See Enable capture interrupt vector item.`"/>
                        <constraint when_expr="$parent.getParent().getSetting(`common_interrupt_exist`).getValue() &amp;&amp; !($configSet.oRedCapture_interrupt_exist.getValue()) &amp;&amp; $this.getSetting(`kPWM_CaptureB1InterruptEnable`).getValue()"
                        cond_expr="$parent.getParent().getSetting(`common_interruptEn`).getValue()"
                        level="warning"
                        description_expr="`Capture B1 interrupt source is enabled, but the INTC settings not. See Enable compare` + (($configSet.oRedCapture_interrupt_exist.getValue()) ? `` : `/capture`) + `/reload interrupt vector item.`"/>                        
                        <constraint when_expr="($configSet.oRedCapture_interrupt_exist.getValue()) &amp;&amp; $this.getSetting(`kPWM_CaptureB1InterruptEnable`).getValue()"
                        cond_expr="($configSet.capture_interruptEn.getValue())"
                        level="warning"
                        description_expr="`Capture B1 interrupt source is enabled, but the INTC settings not. See Enable capture interrupt vector item.`"/>
                        <constraint when_expr="$parent.getParent().getSetting(`common_interrupt_exist`).getValue() &amp;&amp; !($configSet.oRedCapture_interrupt_exist.getValue()) &amp;&amp; $this.getSetting(`kPWM_CaptureX0InterruptEnable`).getValue()"
                        cond_expr="$parent.getParent().getSetting(`common_interruptEn`).getValue()"
                        level="warning"
                        description_expr="`Capture X0 interrupt source is enabled, but the INTC settings not. See Enable compare` + (($configSet.oRedCapture_interrupt_exist.getValue()) ? `` : `/capture`) + `/reload interrupt vector item.`"/>
                        <constraint when_expr="($configSet.oRedCapture_interrupt_exist.getValue()) &amp;&amp; $this.getSetting(`kPWM_CaptureX0InterruptEnable`).getValue()"
                        cond_expr="($configSet.capture_interruptEn.getValue())"
                        level="warning"
                        description_expr="`Capture X0 interrupt source is enabled, but the INTC settings not. See Enable capture interrupt vector item.`"/>
                        <constraint when_expr="$parent.getParent().getSetting(`common_interrupt_exist`).getValue() &amp;&amp; !($configSet.oRedCapture_interrupt_exist.getValue()) &amp;&amp; $this.getSetting(`kPWM_CaptureX1InterruptEnable`).getValue()"
                        cond_expr="$parent.getParent().getSetting(`common_interruptEn`).getValue()"
                        level="warning"
                        description_expr="`Capture X1 interrupt source is enabled, but the INTC settings not. See Enable compare` + (($configSet.oRedCapture_interrupt_exist.getValue()) ? `` : `/capture`) + `/reload interrupt vector item.`"/>                        
                        <constraint when_expr="($configSet.oRedCapture_interrupt_exist.getValue()) &amp;&amp; $this.getSetting(`kPWM_CaptureX1InterruptEnable`).getValue()"
                        cond_expr="($configSet.capture_interruptEn.getValue())"
                        level="warning"
                        description_expr="`Capture X1 interrupt source is enabled, but the INTC settings not. See Enable capture interrupt vector item.`"/>
                        
                        
                        <constraint when_expr="$parent.getParent().getSetting(`common_interrupt_exist`).getValue() &amp;&amp; $this.getSetting(`kPWM_ReloadInterruptEnable`).getValue()"
                        cond_expr="$parent.getParent().getSetting(`common_interruptEn`).getValue()"
                        level="warning"
                        description_expr="`Reload interrupt source is enabled, but the INTC settings not. See Enable compare` + (($configSet.oRedCapture_interrupt_exist.getValue()) ? `` : `/capture`) + `/reload interrupt vector item.`"/>
                        <constraint when_expr="!($parent.getParent().getSetting(`common_interrupt_exist`).getValue()) &amp;&amp; $this.getSetting(`kPWM_ReloadInterruptEnable`).getValue()"
                        cond_expr="$parent.getParent().getSetting(`reload_interruptEn`).getValue()"
                        level="warning"
                        description_expr="`Reload interrupt source is enabled, but the INTC settings not. See Enable reload interrupt vector item.`"/>
                        
                        <constraint when_expr="($configSet.fault_error_interrupt_exist.getValue()) &amp;&amp; $this.getSetting(`kPWM_ReloadErrorInterruptEnable`).getValue()"
                        cond_expr="($configSet.fault_error_interruptEn.getValue())"
                        level="warning"
                        description_expr="`Reload error interrupt source is enabled, but the INTC settings not. See Enable fault/reload error interrupt vector item.`"/>
                        <constraint when_expr="!($configSet.fault_error_interrupt_exist.getValue()) &amp;&amp; $this.getSetting(`kPWM_ReloadErrorInterruptEnable`).getValue()"
                        cond_expr="($configSet.error_interruptEn.getValue())"
                        level="warning"
                        description_expr="`Reload error interrupt source is enabled, but the INTC settings not. See Enable reload error interrupt vector item.`"/>                        
                        
                        <constraint when_expr="$this.getSetting(`kPWM_CaptureA0InterruptEnable`).getValue() &amp;&amp; $parent.dma_used.getValue()"
                        cond_expr="!$parent.dma.captureDMA_enable.getSetting(`kPWM_CaptureA0DMAEnable`).getValue()"
                        level="error"
                        description_expr="`Interrupt Capture A0 cannot be enabled together with DMA Capture A0.`"/>                    
                        <constraint when_expr="$this.getSetting(`kPWM_CaptureA1InterruptEnable`).getValue() &amp;&amp; $parent.dma_used.getValue()"
                        cond_expr="!$parent.dma.captureDMA_enable.getSetting(`kPWM_CaptureA1DMAEnable`).getValue()"
                        level="error"
                        description_expr="`Interrupt Capture A1 cannot be enabled together with DMA Capture A1.`"/>                    
                        <constraint when_expr="$this.getSetting(`kPWM_CaptureB0InterruptEnable`).getValue() &amp;&amp; $parent.dma_used.getValue()"
                        cond_expr="!$parent.dma.captureDMA_enable.getSetting(`kPWM_CaptureB0DMAEnable`).getValue()"
                        level="error"
                        description_expr="`Interrupt Capture B0 cannot be enabled together with DMA Capture B0.`"/>                    
                        <constraint when_expr="$this.getSetting(`kPWM_CaptureB1InterruptEnable`).getValue() &amp;&amp; $parent.dma_used.getValue()"
                        cond_expr="!$parent.dma.captureDMA_enable.getSetting(`kPWM_CaptureB1DMAEnable`).getValue()"
                        level="error"
                        description_expr="`Interrupt Capture B1 cannot be enabled together with DMA Capture B1.`"/>                   
                        <constraint when_expr="$this.getSetting(`kPWM_CaptureX0InterruptEnable`).getValue() &amp;&amp; $parent.dma_used.getValue()"
                        cond_expr="!$parent.dma.captureDMA_enable.getSetting(`kPWM_CaptureX0DMAEnable`).getValue()"
                        level="error"
                        description_expr="`Interrupt Capture X0 cannot be enabled together with DMA Capture X0.`"/>                    
                        <constraint when_expr="$this.getSetting(`kPWM_CaptureX1InterruptEnable`).getValue() &amp;&amp; $parent.dma_used.getValue()"
                        cond_expr="!$parent.dma.captureDMA_enable.getSetting(`kPWM_CaptureX1DMAEnable`).getValue()"
                        level="error"
                        description_expr="`Interrupt Capture X1 cannot be enabled together with DMA Capture X1.`"/>
                    </validation>
                </reference>
                <variable id="compare_IntSourceRequest" value="(
                ($parent.interrupt_sel.getSetting(`kPWM_CompareVal0InterruptEnable`).getValue() == true) || ($parent.interrupt_sel.getSetting(`kPWM_CompareVal1InterruptEnable`).getValue() == true) || ($parent.interrupt_sel.getSetting(`kPWM_CompareVal2InterruptEnable`).getValue() == true) || ($parent.interrupt_sel.getSetting(`kPWM_CompareVal3InterruptEnable`).getValue() == true) || ($parent.interrupt_sel.getSetting(`kPWM_CompareVal4InterruptEnable`).getValue() == true) || ($parent.interrupt_sel.getSetting(`kPWM_CompareVal5InterruptEnable`).getValue() == true)) ? true : false"/>
                <variable id="capture_IntSourceRequest" value="(
                ($parent.interrupt_sel.getSetting(`kPWM_CaptureA0InterruptEnable`).getValue() == true) || ($parent.interrupt_sel.getSetting(`kPWM_CaptureA1InterruptEnable`).getValue() == true) || ($parent.interrupt_sel.getSetting(`kPWM_CaptureB0InterruptEnable`).getValue() == true) || ($parent.interrupt_sel.getSetting(`kPWM_CaptureB1InterruptEnable`).getValue() == true) || ($parent.interrupt_sel.getSetting(`kPWM_CaptureX0InterruptEnable`).getValue() == true) || ($parent.interrupt_sel.getSetting(`kPWM_CaptureX1InterruptEnable`).getValue() == true)) ? true : false"/>
                <variable id="reload_IntSourceRequest" value="($parent.interrupt_sel.getSetting(`kPWM_ReloadInterruptEnable`).getValue() == true) ? true : false"/>
                <variable id="reload_err_IntSourceRequest" value="($parent.interrupt_sel.getSetting(`kPWM_ReloadErrorInterruptEnable`).getValue() == true) ? true : false"/>
                <reference id="interrupt_flags" label="Clear interrupt flags" type="main_config_interrupt_flags_t" options="remove_from_struct_init"/>
                <bool id="dma_used" label="DMA configuration" options="remove_from_struct_init;UI_LABEL_BOLD">
                    <description>If checked, DMA settings are enabled.</description>
                    <!-- <validation>
                       <constraint when_expr="$this.value() == true &amp;&amp; featureDefined(`FSL_FEATURE_SOC_DMA_COUNT`) &amp;&amp; getFeature(`FSL_FEATURE_SOC_DMA_COUNT`)"
                        cond_expr="$root.anyMatch(function -> function.anyMatch(instance -> ((instance.getParent().getID() == `dma`)  &amp;&amp; instance.isAvailable() &amp;&amp; instance.isEnabled())) &amp;&amp; (function.isCalledFromDefaultInit() || function.getID() == $instance.getFnGroupName()))"
                        level="warning"
                        description_expr="$components.system.#global.warn_dma_component.getValue()"/>
                        <constraint when_expr="$this.value() == true &amp;&amp; featureDefined(`FSL_FEATURE_SOC_EDMA_COUNT`) &amp;&amp; getFeature(`FSL_FEATURE_SOC_EDMA_COUNT`)"
                        cond_expr="$root.anyMatch(function -> function.anyMatch(instance -> ((instance.getParent().getID() == `edma`)  &amp;&amp; instance.isAvailable() &amp;&amp; instance.isEnabled())) &amp;&amp; (function.isCalledFromDefaultInit() || function.getID() == $instance.getFnGroupName()))"
                        level="warning"
                        description_expr="$components.system.#global.warn_edma_component.getValue()"/>
                    </validation> -->
                </bool>
                <struct id="dma" label="DMA configuration" from="mine" options="remove_from_struct_init;UI_LABEL_HIDDEN" enable="$parent.dma_used.getValue()">
                    <bool id="pwmDMA_activate" label="Enable DMA for PWM output feeding" options="remove_from_struct_init">
                        <description>If checked, DMA write request to the  VALx and FRACVALx (if available) registers is enabled.</description>
                        <assign when="true">
                            <register name_expr="$parent.getParent().getSetting(`sm_prefix`).getValue() + `DMAEN`" bitfield="VALDE" value="($this.getValue() ? 1 : 0)" 
                               reverse_value="x -> ((x != 0) ? true : false)"/>
                        </assign>
                    </bool>
                    <reference id="captureDMA_enable" label="Enable DMA for capture input reading" type="pwm_dma_enable_t" options="remove_from_struct_init">
                        <description>Enables DMA for the selected capture circuit</description>
                        <validation>
                            <constraint when_expr="$this.getSetting(`kPWM_CaptureA0DMAEnable`).getValue() &amp;&amp; $parent.getParent().getSetting(`dma_used`).getValue()"
                            cond_expr="!$parent.getParent().getSetting(`interrupt_sel.kPWM_CaptureA0InterruptEnable`).getValue()"
                            level="error"
                            description_expr="`DMA Capture A0 cannot be enabled together with interrupt Capture A0.`"/>  
                            <constraint when_expr="$this.getSetting(`kPWM_CaptureA1DMAEnable`).getValue() &amp;&amp; $parent.getParent().getSetting(`dma_used`).getValue()"
                            cond_expr="!$parent.getParent().getSetting(`interrupt_sel.kPWM_CaptureA1InterruptEnable`).getValue()"
                            level="error"
                            description_expr="`DMA Capture A1 cannot be enabled together with interrupt Capture A1.`"/>
                            <constraint when_expr="$this.getSetting(`kPWM_CaptureB0DMAEnable`).getValue() &amp;&amp; $parent.getParent().getSetting(`dma_used`).getValue()"
                            cond_expr="!$parent.getParent().getSetting(`interrupt_sel.kPWM_CaptureB0InterruptEnable`).getValue()"
                            level="error"
                            description_expr="`DMA Capture B0 cannot be enabled together with interrupt Capture B0.`"/>  
                            <constraint when_expr="$this.getSetting(`kPWM_CaptureB1DMAEnable`).getValue() &amp;&amp; $parent.getParent().getSetting(`dma_used`).getValue()"
                            cond_expr="!$parent.getParent().getSetting(`interrupt_sel.kPWM_CaptureB1InterruptEnable`).getValue()"
                            level="error"
                            description_expr="`DMA Capture B1 cannot be enabled together with interrupt Capture B1.`"/>
                            <constraint when_expr="$this.getSetting(`kPWM_CaptureX0DMAEnable`).getValue() &amp;&amp; $parent.getParent().getSetting(`dma_used`).getValue()"
                            cond_expr="!$parent.getParent().getSetting(`interrupt_sel.kPWM_CaptureX0InterruptEnable`).getValue()"
                            level="error"
                            description_expr="`DMA Capture X0 cannot be enabled together with interrupt Capture X0.`"/>  
                            <constraint when_expr="$this.getSetting(`kPWM_CaptureX1DMAEnable`).getValue() &amp;&amp; $parent.getParent().getSetting(`dma_used`).getValue()"
                            cond_expr="!$parent.getParent().getSetting(`interrupt_sel.kPWM_CaptureX1InterruptEnable`).getValue()"
                            level="error"
                            description_expr="`DMA Capture X1 cannot be enabled together with interrupt Capture X1.`"/>
                        </validation>
                    </reference>
                    <reference id="captureDMA_source" label="Capture DMA trigger source" type="pwm_dma_source_select_t" options="remove_from_struct_init">
                        <description>Specifies which action invokes the DMA request. Capture DMA watermark control is enabled after selection of the Exceeding FIFO watermark value in this item.</description>
                    </reference>
                    <reference id="captureDMA_watermark_control" label="Capture DMA watermark control" type="pwm_watermark_control_t" options="remove_from_struct_init">
                        <description>Specifies which action invokes the DMA request</description>
                    </reference>                    
                </struct>                
            </struct>
            <enum id="clock_source_t" label="Sample clock source selection" from="_pwm_clock_source">
               <item id="SystemClock" label="System clock selected" value="BusInterfaceClock_b00"/> <!-- value = clock_unify_ID -->
            </enum>
            <enum id="fractional_clock_source_t" label="Fractional clock source selection" from="_pwm_clock_source">
               <item id="fractionalClock" label="Fractional edge clock selected" value="Nanoedge2xClock"/> <!-- value = clock_unify_ID -->
            </enum>
            <struct id="commonFaultSetting_t" label="Structure is used to hold the parameters to configure a PWM fault" from="_pwm_fault_param">
                <variable id="fault_channel_num" value="$parent.getParent().getId()"/>
                <dynamic_enum id="clockSource" label="Filter clock source" options="remove_from_struct_init" items="enumItemsOf($configSet._busClockSource).arrayToEnumItems(
                   enumItem -> true,
                   enumItem -> enumItem.getID(),
                   enumItem -> enumItem.getLabel(),
                   enumItem -> enumItem.getValue())">
                   <description>Clock source for the filter.</description>                  
                </dynamic_enum>
               <integer id="faultFilterPeriod" label="Sample clock divider" type="uint8_t" min_expr="0" max_expr="255">
                  <description>Filter Sample Period in ticks of PWM clock source. Value equal to 0 means the fiter is bypassed. The divider of the PWM clock. Available range is 0-255.</description>
                  <assign when="true">
                        <register name_expr="`FFILT` + $parent.fault_channel_num.getValue()" bitfield="FILT_PER" value="($this.getValue())" reverse_value="(x -> (x))"/>
                  </assign>
               </integer>
               <integer id="faultFilterCount" label="Filter sample count" type="uint8_t" min_expr="3" max_expr="10">
                    <description>Filter Sample Count - number of consecutive samples that must agree to filter out glitches. Available range is 3-10.</description>
                    <assign when="true">
                        <register name_expr="`FFILT` + $parent.fault_channel_num.getValue()" bitfield="FILT_CNT" value="($this.getValue() - 3)" reverse_value="(x -> (x + 3))"/>
                    </assign>
               </integer>
               <bool id="faultGlitchStretch" label="Fault glitch stretch">
                    <description>When checked, input fault signals will be stretched to at least 2 IPBus clock cycle</description>
                    <assign when="true">
                        <register name_expr="`FFILT` + $parent.fault_channel_num.getValue()" bitfield="GSTR" value="($this.getValue() ? 1 : 0)" reverse_value="(x -> (x == 1) ? true : false)"/>
                    </assign>
                </bool>
               <info id="filterClockFrequency" label="Sample clock frequency/period" value="system::calculateFreqPeriodRationalClk(toHertz($parent.faultFilterPeriod.getValue()), toHertz($configSet.clockSourceFreq.getEnumItemValue()))">
                   <description>
                      Frequency of the sample filter clock calculated as Clock source divided by Sample clock divider value and the period is 1/calculated frequency.
                   </description>
                </info>
                <info id="filterDelay" label="Filtering delay" value="system::calculatePeriodRationalClk(toHertz($parent.faultFilterCount.getValue()), system::calculateRealFreqRationalClk(toHertz($parent.faultFilterPeriod.getValue()), toHertz($configSet.clockSourceFreq.getEnumItemValue())))">
                   <description>
                      Time which takes signal to go through the filtering/sampling block. 
                      Delay of the filtering/sampling block is calculated as Clock source period * Filter sample count.
                   </description>
                </info>
               <bool id="testFault" label="Fault test">
                    <description>When checked, fault simulation begins. Fault condition propagates to the fault flags and possibly the PWM outputs depending on the DISMAPn settings.</description>
                    <assign when="true">
                        <register name_expr="`FTST` + $parent.fault_channel_num.getValue()" bitfield="FTEST" value="($this.getValue() ? 1 : 0)" reverse_value="(x -> (x == 1) ? true : false)"/>
                    </assign>
                </bool>
            </struct>            
            <struct id="pwm_fault_param_t" label="Structure is used to hold the parameters to configure a PWM fault" from="_pwm_fault_param">
                <description></description>                
                <variable id="fault_channel_num" value="$parent.getParent().getParent().getId()"/>
                <variable id="fault_pins_num" value="((4 * $parent.fault_channel_num.getValue().toInt()) + $parent.getId().toInt())"/>
                <variable id="dependency_only" value="">
                    <validation>
                        <dependency when_expr="($configSet.submodules.filter(x -> x.getSetting(`fault_pin_needed_` + ($parent.fault_pins_num.getValue().toString())).getValue()).size() &gt; 0)" 
                             resource_type="PeripheralUnifiedSignal" 
                             resource_id_expr="$instance.getPeripheral() + `.pwm_fault.` + ($parent.fault_pins_num.getValue().toString())" 
                             description_expr="$instance.getPeripheral() + `.FAULT, ` + ($parent.fault_pins_num.getValue().toString()) + ` pin needs to be routed`" level="Warning">
                            <feature name="routed" evaluation="equal">
                               <data expr="true"/>
                            </feature>
                        </dependency>
                    </validation>
                </variable>
                <reference id="faultClearingMode" label="Clearing mode" type="pwm_fault_clear_t">
                    <description>Fault clearing mode to use</description>
                </reference>
                <reference id="faultLevelR" label="Active level" type="faultLevelE" options="remove_from_struct_init">
                    <description>Select which logic level invoke FAULT</description>
                </reference>
                <variable id="faultLevel" value="$parent.faultLevelR.getEnumItemValue()" options="add_to_struct"/>                              
                <reference id="enableCombinationalPathR" label="Path to output" type="enableCombinationalPathE" options="remove_from_struct_init">
                    <description>Select Fault input to PWM output path</description>
                </reference>                
                <variable id="enableCombinationalPath" value="$parent.enableCombinationalPathR.getEnumItemValue()" options="add_to_struct"/>
                <reference id="recoverMode" label="Fault recovery" type="pwm_fault_recovery_mode_t">
                   <description>Specify when to re-enable the PWM output</description>
                </reference>
                <bool id="fault_int_source" label="Interrupt source" options="remove_from_struct_init">
                    <description>Enables appropriate fault event to be source of fault interrupt</description>
                    <validation>
                        <constraint when_expr="$this.getValue() &amp;&amp; ($configSet.fault_error_interrupt_exist.getValue())"
                        cond_expr="($configSet.fault_error_interruptEn.getValue())"
                        level="warning"
                        description_expr="`Interrupt Fault ` + ($parent.fault_channel_num.getValue().toInt() + $parent.getId().toInt()) + ` is enabled, but the INTC settings not. See Enable fault/reload error interrupt vector item.`"/>
                        <constraint when_expr="$this.getValue() &amp;&amp; !($configSet.fault_error_interrupt_exist.getValue())"
                        cond_expr="($configSet.fault_interruptEn.getValue())"
                        level="warning"
                        description_expr="`Interrupt Fault ` + ((4 * $parent.fault_channel_num.getValue().toInt()) + $parent.getId().toInt()) + ` is enabled, but the INTC settings not. See Enable fault error interrupt vector item.`"/>
                    </validation>    
                    <assign when="true">
                        <register name="" name_expr="`FCTRL` + $parent.fault_channel_num.getValue()" bitfield="FIE" value="((getBitFieldValue($instance.getPeripheral(), `FCTRL` + $parent.fault_channel_num.getValue(), `FIE`) &amp; ~(1 &lt;&lt; $parent.getId().toInt())) | (($this.getValue() ? 1 : 0) &lt;&lt; $parent.getId().toInt()))" reverse_value="x -> (((x &amp; (1 &lt;&lt; $parent.getId().toInt())) != 0) ? true : false)"/>
                    </assign>
                </bool>
            </struct>
            <struct id="fault_template_params_t" options="UI_LABEL_HIDDEN;UI_BORDER_HIDDEN">
               <variable id="PERIPHERAL" value="$instance.getPeripheral()"></variable>
               <variable id="VPREFIX" value="$configSet.inst_ID_def.getValue()"></variable>
               <variable id="FAULT_CHANNEL" value="$parent.getParent().getId()"></variable>
            </struct>
            <struct id="faultChannel_t" label="" from="mine">
                <reference id="commonFaultSetting" label="Common faults settings" type="commonFaultSetting_t">
                   <description>Configuration of the time base, reload and force logic</description>
                </reference>
                <array id="faults" label="Fault inputs" type="pwm_fault_param_t" size="4" options="ShowContentAs=Table;UI_TABLE_COLUMN_WIDTHS=-1,8,8,8,8;UI_ARRAY_LAYOUT_HORIZONTAL;UI_ARRAY_FIXED;remove_from_struct_init" key_selector_expr="x -> (x.getSetting(`fault_pins_num`).getValue())" available="true">         
                   <description>Setup faults parameters.</description>
                </array>
                <variable id="faultIntSourceRequest" value="($parent.faults.filter(x -> x.getSetting(`fault_int_source`).getValue() == true).size() &gt; 0) ? true : false"/>
                <reference id="fault_template_params" type="fault_template_params_t" label="" options="UI_LABEL_HIDDEN;UI_BORDER_HIDDEN"/>
            </struct>
            <struct id="pwm_input_capture_param_t" label="Structure is used to hold parameters to configure the capture capability of a signal pin" from="_pwm_input_capture_param">
                <description></description>
                <variable id="sm_number" value="$parent.getParent().getParent().getParent().getSetting(`sm`).getEnumItemValue()"/>
                <variable id="sm_prefix" value="`SM` + $parent.sm_number.getValue()"/>
                <variable id="channel_label" value="$parent.getParent().getSetting(`channel`).getValue()"/>
                <reference id="captureInputSelR" label="Circuits source" type="captureInputSelE" options="remove_from_struct_init">
                    <description>Selects between the raw pin input signal and the output of the edge counter/compare circuitry as the source for the input capture circuit.</description>
                </reference>
                <variable id="captureInputSel" value="($parent.captureInputSelR.getEnumItemId() == `edgeCounter`) ? `true` : `false`" options="add_to_struct"/>
                <integer id="edgeCompareValue" label="Edge counter compare value" type="uint8_t">
                    <description>Compare value, used only if edge counter is used as source</description>
                    <assign when="true">
                        <register name="" name_expr="$parent.sm_prefix.getValue() + `CAPTCOMP` + $parent.channel_label.getValue()" bitfield="" bitfield_expr="`EDGCMP` + $parent.channel_label.getValue()" value="$this.getValue()" reverse_value="x -> x"/>
                    </assign>
                </integer>
                <bool id="edgeCounterEnable" label="Enable edge counter" options="remove_from_struct_init">
                    <description>Enables edge counter in initialization</description>
                    <assign when="true">
                        <register name="" name_expr="$parent.sm_prefix.getValue() + `CAPTCTRL` + $parent.channel_label.getValue()" bitfield_expr="`EDGCNT` + $parent.channel_label.getValue() + `_EN`" value="($this.getValue() ? 1 : 0)" reverse_value="x -> ((x != 0) ? true : false)"/>
                    </assign>
                </bool>
                <reference id="edge0" label="Circuit 0 edge" type="pwm_input_capture_edge_t">
                    <description>Specify which edge causes a capture for input circuitry 0</description>
                </reference>
                <reference id="edge1" label="Circuit 1 edge" type="pwm_input_capture_edge_t">
                    <description>Specify which edge causes a capture for input circuitry 1</description>
                </reference>
                <reference id="enableOneShotCaptureR" label="Mode" type="enableOneShotCaptureE" options="remove_from_struct_init">
                    <description>Selects between the one-shot and the free-running capture mode.</description>
                </reference>
                <variable id="enableOneShotCapture" value="($parent.enableOneShotCaptureR.getEnumItemId() == `one`) ? `true` : `false`" options="add_to_struct"/>
                <bool id="armCapture" label="Arm capture operation" options="remove_from_struct_init">
                    <description>Input capture operation as specified by Circuit 0/1 edge items is enabled</description>
                    <assign when="true">
                        <register name="" name_expr="$parent.sm_prefix.getValue() + `CAPTCTRL` + $parent.channel_label.getValue()" bitfield_expr="`ARM` + $parent.channel_label.getValue()" value="($this.getValue() ? 1 : 0)" reverse_value="x -> ((x != 0) ? true : false)"/>
                    </assign>
                </bool>
                <integer id="fifoWatermark" label="FIFOs watermark" type="uint8_t" max_expr="3">
                    <description>Watermark level for capture FIFOs of circuit 0 and 1. The capture flags in the status register will set if the word count in the FIFO is greater than this watermark level.</description>
                    <assign when="true">
                        <register name="" name_expr="$parent.sm_prefix.getValue() + `CAPTCTRL` + $parent.channel_label.getValue()" bitfield="" bitfield_expr="`CF` + $parent.channel_label.getValue() + `WM`" value="$this.getValue()" reverse_value="x -> x"/>
                    </assign>
                </integer>
                <!-- <reference id="interrupt_sel" label="Interrupt sources" type="capture_interrupt_enable_t" options="remove_from_struct_init"/> -->
            </struct>
            <enum id="fuction_sel" label="Function">
                <description></description>
                <item id="notUsed" label="Not used">
                    <description>Channel is not used.</description>
                </item>
                <item id="pwmOutput" label="PWM"> <!-- available="($parent.getId() != 2)" -->
                    <description>Channel is used as PWM output.</description>
                </item>
                <item id="inputCapture" label="Capture">
                    <description>Channel is used as input capture.</description>
                </item>
            </enum>
            <struct id="channel_struct" label="Structure is used to hold parameters to configure the capture capability of a signal pin" from="mine">
                <variable id="abx" value="toArray(`A`,`B`,`X`)"/>
                <info id="channel" label="Channel" value="($parent.abx.getValue().get($parent.getId().toInt()))"/>
                <variable id="channel_enum_value" value="`kPWM_Pwm` + ($parent.abx.getValue().get($parent.getId().toInt()))"/>
                <variable id="channel_index_value" value="$parent.getId().toInt()"/>
                <reference id="functionSel" label="Function" type="fuction_sel" options="REGISTERS_REFRESH">
                    <description>Select channel function</description>
                    <validation>
                        <dependency when_expr="($this.getEnumItemId() == `pwmOutput`)"
                             resource_type="PeripheralUnifiedSignal" 
                             resource_id_expr="$instance.getPeripheral() + `.pwm_` + toLowerCase($parent.channel.getValue()) + `.` + $parent.getParent().getParent().getSetting(`sm`).getEnumItemValue()" 
                             description_expr="$instance.getPeripheral() + `.PWM_` + ($parent.channel.getValue()) + `, ` + $parent.getParent().getParent().getSetting(`sm`).getEnumItemValue() + ` pin needs to be routed`" level="Warning">
                            <feature name="routed" evaluation="equal">
                               <data expr="true"/>
                            </feature>
                        </dependency>
                        <dependency when_expr="($this.getEnumItemId() == `pwmOutput`)"
                             resource_type="PeripheralUnifiedSignal" 
                             resource_id_expr="$instance.getPeripheral() + `.pwm_` + toLowerCase($parent.channel.getValue()) + `.` + $parent.getParent().getParent().getSetting(`sm`).getEnumItemValue()" 
                             description_expr="$instance.getPeripheral() + `.PWM_` + ($parent.channel.getValue()) + `, ` + $parent.getParent().getParent().getSetting(`sm`).getEnumItemValue() + ` pin needs to be routed as output`" level="Warning">
                            <feature name="direction" evaluation="equal">
                               <data expr="`OUTPUT`"/>
                            </feature>
                        </dependency>
                        <dependency when_expr="($this.getEnumItemId() == `inputCapture`)"
                             resource_type="PeripheralUnifiedSignal" 
                             resource_id_expr="$instance.getPeripheral() + `.pwm_` + toLowerCase($parent.channel.getValue()) + `.` + $parent.getParent().getParent().getSetting(`sm`).getEnumItemValue()" 
                             description_expr="$instance.getPeripheral() + `.PWM_` + ($parent.channel.getValue()) + `, ` + $parent.getParent().getParent().getSetting(`sm`).getEnumItemValue() + ` pin needs to be routed`" level="Warning">
                            <feature name="routed" evaluation="equal">
                               <data expr="true"/>
                            </feature>
                        </dependency>
                        <dependency when_expr="($this.getEnumItemId() == `inputCapture`)"
                             resource_type="PeripheralUnifiedSignal" 
                             resource_id_expr="$instance.getPeripheral() + `.pwm_` + toLowerCase($parent.channel.getValue()) + `.` + $parent.getParent().getParent().getSetting(`sm`).getEnumItemValue()" 
                             description_expr="$instance.getPeripheral() + `.PWM_` + ($parent.channel.getValue()) + `, ` + $parent.getParent().getParent().getSetting(`sm`).getEnumItemValue() + ` pin needs to be routed as input`" level="Warning">
                            <feature name="direction" evaluation="equal">
                               <data expr="`INPUT`"/>
                            </feature>
                        </dependency>
                    </validation>
                </reference>
                <reference id="pwm" label="PWM" type="pwm_signal_param_t" available="($parent.functionSel.getEnumItemId() == `pwmOutput`)">
                    <description>Configuration of the time base, reload and force logic</description>
                </reference>
                <reference id="capture" label="Capture" type="pwm_input_capture_param_t" available="($parent.functionSel.getEnumItemId() == `inputCapture`)">
                    <description>Configuration of the time base, reload and force logic</description>
                </reference>                
            </struct>
            <struct id="submodule_struct" label="Structure is used to hold parameters to configure the capture capability of a signal pin" from="mine">
                <reference id="sm" label="Submodule (SM) number" type="pwm_submodule_t" options="remove_from_struct_init;REGISTERS_REFRESH">
                    <description>Submodule (SM) number, selects submodule and related signals/pins that should be routed in pins tool.</description>
                </reference>
                <variable id="sm_id" value="`SM` + $parent.sm.getEnumItemValue().toString()" options="remove_from_struct_init"/>
                <variable id="maskSmOuten" value="toArray(0x111, 0x222, 0x444, 0x888).get($parent.sm.getEnumItemValue().toInt())"/>
                <variable id="maskSmMask" value="toArray(0x1111, 0x2222, 0x4444, 0x8888).get($parent.sm.getEnumItemValue().toInt())"/>
                <variable id="maskSmSwCout" value="toArray(0x03, 0x0C, 0x30, 0xC0).get($parent.sm.getEnumItemValue().toInt())"/>
                <variable id="maskSmDtsrcsel" value="toArray(0xF, 0xF0, 0xF00, 0xF000).get($parent.sm.getEnumItemValue().toInt())"/>
                <variable id="maskSmMctrl" value="toArray(0x1111, 0x2222, 0x4444, 0x8888).get($parent.sm.getEnumItemValue().toInt())"/>
                <reference id="sm_template_params" type="sm_template_params_t" label="" options="UI_LABEL_HIDDEN;UI_BORDER_HIDDEN"/>
                <reference id="config" label="Main configuration" type="pwm_config_t">
                    <description>Configuration of the time base, reload and force logic</description>
                </reference>
                <variable id="fault_pin_needed_0" value="($parent.channels.filter(x -> (x.getSetting(`functionSel`).getEnumItemId() == `pwmOutput`) &amp;&amp; (x.getSetting(`pwm.fault_channel0.dismap.s0`).getValue())).size() &gt; 0)" options="remove_from_struct_init"/>                
                <variable id="fault_pin_needed_1" value="($parent.channels.filter(x -> (x.getSetting(`functionSel`).getEnumItemId() == `pwmOutput`) &amp;&amp; (x.getSetting(`pwm.fault_channel0.dismap.s1`).getValue())).size() &gt; 0)" options="remove_from_struct_init"/>                
                <variable id="fault_pin_needed_2" value="($parent.channels.filter(x -> (x.getSetting(`functionSel`).getEnumItemId() == `pwmOutput`) &amp;&amp; (x.getSetting(`pwm.fault_channel0.dismap.s2`).getValue())).size() &gt; 0)" options="remove_from_struct_init"/>                
                <variable id="fault_pin_needed_3" value="($parent.channels.filter(x -> (x.getSetting(`functionSel`).getEnumItemId() == `pwmOutput`) &amp;&amp; (x.getSetting(`pwm.fault_channel0.dismap.s3`).getValue())).size() &gt; 0)" options="remove_from_struct_init"/>                
                <variable id="fault_pin_needed_4" value="($parent.channels.filter(x -> (x.getSetting(`functionSel`).getEnumItemId() == `pwmOutput`) &amp;&amp; (x.getSetting(`pwm.fault_channel1.dismap.s0`).getValue())).size() &gt; 0)" options="remove_from_struct_init"/>                
                <variable id="fault_pin_needed_5" value="($parent.channels.filter(x -> (x.getSetting(`functionSel`).getEnumItemId() == `pwmOutput`) &amp;&amp; (x.getSetting(`pwm.fault_channel1.dismap.s1`).getValue())).size() &gt; 0)" options="remove_from_struct_init"/>                
                <variable id="fault_pin_needed_6" value="($parent.channels.filter(x -> (x.getSetting(`functionSel`).getEnumItemId() == `pwmOutput`) &amp;&amp; (x.getSetting(`pwm.fault_channel1.dismap.s2`).getValue())).size() &gt; 0)" options="remove_from_struct_init"/>                
                <variable id="fault_pin_needed_7" value="($parent.channels.filter(x -> (x.getSetting(`functionSel`).getEnumItemId() == `pwmOutput`) &amp;&amp; (x.getSetting(`pwm.fault_channel1.dismap.s3`).getValue())).size() &gt; 0)" options="remove_from_struct_init"/>                
                <array id="channels" label="Channels" type="channel_struct" size="3" options="ShowContentAs=Tabs;UI_ARRAY_FIXED;remove_from_struct_init" key_selector_expr="x -> (x.getSetting(`channel`).getValue())" available="true">
                    <description>Setup channels A, B and X.</description>
                    <item_defaults>
                        <set_default id="pwm.fault_channel0.dismap.s0" value_expr="x -> true"/>
                        <set_default id="pwm.fault_channel0.dismap.s1" value_expr="x -> true"/>
                        <set_default id="pwm.fault_channel0.dismap.s2" value_expr="x -> true"/>
                        <set_default id="pwm.fault_channel0.dismap.s3" value_expr="x -> true"/>
                        <set_default id="pwm.fault_channel1.dismap.s0" value_expr="x -> true"/>
                        <set_default id="pwm.fault_channel1.dismap.s1" value_expr="x -> true"/>
                        <set_default id="pwm.fault_channel1.dismap.s2" value_expr="x -> true"/>
                        <set_default id="pwm.fault_channel1.dismap.s3" value_expr="x -> true"/>
                    </item_defaults>
                </array>
                <!-- <info id="compareIntSourceRequest" value="($parent.faults.filter(x -> x.getSetting(`fault_int_source`).getValue() == true).size() &gt; 0) ? true : false"/>
                <info id="captureIntSourceRequest" value="($parent.faults.filter(x -> x.getSetting(`fault_int_source`).getValue() == true).size() &gt; 0) ? true : false"/> -->
                <variable id="pwmOutputCount" value="$parent.channels.countOccurrences((item -> ((item.getSetting(`channel`).getValue() != `X`) &amp;&amp; (item.getSetting(`functionSel`).getEnumItemId() == `pwmOutput`))), false)"/>
              <variable id="common_interrupt_exist" value="(getResource(`interrupts`, $instance.getCoreId()).countOccurrences(item -> (
                  (item.getSetting(`devices`).searchInArray(
                        devItem -> (devItem.getSetting(`id`).getValue() == $instance.getPeripheral()) &amp;&amp; 
                                   (devItem.getSetting(`channel`).getValue() == $parent.getId()) &amp;&amp; 
                                   (devItem.getSetting(`function`).getValue() == `Compare`)
                  ) >= 0) &amp;&amp; (item.getSetting(`devices`).searchInArray(
                        devItem -> (devItem.getSetting(`id`).getValue() == $instance.getPeripheral()) &amp;&amp; 
                                   (devItem.getSetting(`channel`).getValue() == $parent.getId()) &amp;&amp; 
                                   (devItem.getSetting(`function`).getValue() == `Capture`)
                  ) >= 0) &amp;&amp; (item.getSetting(`devices`).searchInArray(
                        devItem -> (devItem.getSetting(`id`).getValue() == $instance.getPeripheral()) &amp;&amp; 
                                   (devItem.getSetting(`channel`).getValue() == $parent.getId()) &amp;&amp; 
                                   (devItem.getSetting(`function`).getValue() == `Reload`)
                  ) >= 0)
              ), false)) > 0"/>
           <bool id="common_interruptEn" label_expr="`Enable compare` + (($configSet.oRedCapture_interrupt_exist.getValue()) ? `` : `/capture`) + `/reload interrupt vector`" options="UI_LABEL_BOLD" available="$parent.common_interrupt_exist.getValue()">
                <description expr="`Enable initialization of the interrupt vector in the ` + $parent.common_interrupt.intControllerName.getValue() + ` and providing definition of the interrupt routine name.`"></description>
                <validation>
                    <constraint when_expr="$this.getValue()" cond_expr="$parent.config.compare_IntSourceRequest.getValue() || (($configSet.oRedCapture_interrupt_exist.getValue()) ? false : $parent.config.capture_IntSourceRequest.getValue()) || $parent.config.reload_IntSourceRequest.getValue()" level="warning" description_expr="`The interrupt is enabled (in the interrupt controller) but Compare ` + (($configSet.oRedCapture_interrupt_exist.getValue()) ? `and ` : `, Capture and`) + `Reload interrupt sources are disabled (interrupt will not be invoked).`"/>
                </validation>
             </bool>
             <reference id="common_interrupt" label="Interrupt vector" type="interrupt_vector_t" config_set_id="fsl_interrupt_peripheral" component_id="system" options="irq_function=Compare;irq_function_replace=Common_SM;UI_LABEL_HIDDEN" enable="$parent.common_interruptEn.getValue()" available="$parent.common_interrupt_exist.getValue()">
                <options_expr>
                   <option id="irq_channel" expr="$parent.getId()"/>
                </options_expr>
                <description expr="`Interrupt vector controller ( ` + $this.intControllerName.getValue() + ` ) settings that provide configuration of interrupt vectors and their enabling.`"></description>
             </reference>
             <bool id="compare_interruptEn" label="Enable compare interrupt vector" options="UI_LABEL_BOLD" available="!($parent.common_interrupt_exist.getValue())">
                <description expr="`Enable initialization of the interrupt vector in the ` + $parent.compare_interrupt.intControllerName.getValue() + ` and providing definition of the interrupt routine name.`"></description>
                <validation>
                    <constraint when_expr="$this.getValue()" cond_expr="$parent.config.compare_IntSourceRequest.getValue()" level="warning" description_expr="`The interrupt is enabled (in the interrupt controller) but Compare error interrupt sources are disabled (interrupt will not be invoked).`"/>
                </validation>
             </bool>
             <reference id="compare_interrupt" label="Interrupt vector" type="interrupt_vector_t" config_set_id="fsl_interrupt_peripheral" component_id="system" options="irq_function=Compare;UI_LABEL_HIDDEN" enable="$parent.compare_interruptEn.getValue()" available="!($parent.common_interrupt_exist.getValue())">
                <options_expr>
                   <option id="irq_channel" expr="$parent.getId()"/>
                </options_expr>
                <description expr="`Interrupt vector controller ( ` + $this.intControllerName.getValue() + ` ) settings that provide configuration of interrupt vectors and their enabling.`"></description>
             </reference>           
             <bool id="reload_interruptEn" label="Enable reload interrupt vector" options="UI_LABEL_BOLD" available="!($parent.common_interrupt_exist.getValue())">
                <description expr="`Enable initialization of the interrupt vector in the ` + $parent.reload_interrupt.intControllerName.getValue() + ` and providing definition of the interrupt routine name.`"></description>
                <validation>
                    <constraint when_expr="$this.getValue()" cond_expr="$parent.config.reload_IntSourceRequest.getValue()" level="warning" description_expr="`The interrupt is enabled (in the interrupt controller) but Reload error interrupt source are disabled (interrupt will not be invoked).`"/>
                </validation>
             </bool>
             <reference id="reload_interrupt" label="Interrupt vector" type="interrupt_vector_t" config_set_id="fsl_interrupt_peripheral" component_id="system" options="irq_function=Reload;UI_LABEL_HIDDEN" enable="$parent.reload_interruptEn.getValue()" available="!($parent.common_interrupt_exist.getValue())">
                <options_expr>
                   <option id="irq_channel" expr="$parent.getId()"/>
                </options_expr>
                <description expr="`Interrupt vector controller ( ` + $this.intControllerName.getValue() + ` ) settings that provide configuration of interrupt vectors and their enabling.`"></description>
             </reference>
            </struct>
            <struct id="sm_template_params_t" options="UI_LABEL_HIDDEN;UI_BORDER_HIDDEN">
               <variable id="PERIPHERAL" value="$instance.getPeripheral()"></variable>
               <variable id="VPREFIX" value="$configSet.inst_ID_def.getValue()"></variable>
               <variable id="SUBMODULE" value="$parent.getParent().getSetting(`sm`).getEnumItemValue()"></variable>
           </struct>
            <struct id="pwm_common_template_params_t" options="UI_LABEL_HIDDEN;UI_BORDER_HIDDEN">
               <variable id="PERIPHERAL" value="$instance.getPeripheral()"></variable>
               <variable id="VPREFIX" value="$configSet.inst_ID_def.getValue()"></variable>
           </struct>
        </user_types>
        <settings>
            <reference id="_clockSource" label="Clock source" type="clock_source_t" options="remove_from_struct_init" available="false"/> <!-- item used for clockSource dynamic enum implementation only -->
           <variable id="clockSourceUId" value="$parent.clockSource.getEnumItemValue()"/>
           <dynamic_enum id="clockSource" label="PWM clock source" options="remove_from_struct_init" items="enumItemsOf($parent._clockSource).arrayToEnumItems(
              enumItem -> true,
              enumItem -> enumItem.getID(),
              enumItem -> getPeripheralClock($instance.getPeripheral(), enumItem.getValue()),
              enumItem -> enumItem.getValue())">
              <description>PWM clock source selection, used as the fault filter clock, deadtime clock source and optionally as counter clock source.</description>
           </dynamic_enum>
           <dynamic_enum id="clockSourceFreq" label="PWM clock source frequency" options="remove_from_struct_init" available="($parent.clockSource.isAvailable())" 
           items="(getClockFunctionalGroups().arrayToEnumItems(
              enumItem -> true,
              enumItem -> enumItem,
              enumItem -> frequencyToString(getPeripheralClockFrequency($instance.getPeripheral(), $parent.clockSource.getEnumItemValue(), enumItem)) + ` (` + enumItem + `)`,
              enumItem -> getPeripheralClockFrequency($instance.getPeripheral(), $parent.clockSource.getEnumItemValue(), enumItem)))" >
              <description>Selection of the clock source frequency</description>
              <validation>
                 <constraint cond_expr="$this.getEnumItemValue() != 0" level="error" description="Clock source frequency cannot be 0 when it is used."/>
              </validation>
              <custom_value_support default="4 MHz" validation_expr="(x -> (x.isFreq() &amp;&amp; (x.getFreq(`Hz`, `Hz`) &gt;= 0)))" />
           </dynamic_enum>
            <reference id="_busClockSource" label="Clock source" type="bus_clock_source_t" options="remove_from_struct_init" available="false"/> <!-- item used for clockSource dynamic enum implementation only -->
            <reference id="_fractionalClockSource" label="Clock source" type="fractional_clock_source_t" options="remove_from_struct_init" available="false"/><!-- item used for clockSource dynamic enum implementation only -->
           <variable id="fractionalClockSourceUId" value="$parent._fractionalClockSource.getEnumItemValue()"/>
           <!-- <dynamic_enum id="fractionalClockSource" label="Fractional clock source" options="remove_from_struct_init" available="$instance.getPeripheral().registerExists(`SM0FRCTRL`)" items="enumItemsOf($parent._fractionalClockSource).arrayToEnumItems(
              enumItem -> true,
              enumItem -> enumItem.getID(),
              enumItem -> getPeripheralClock($instance.getPeripheral(), enumItem.getValue()),
              enumItem -> enumItem.getValue())">
              <description>Fractional clock source selection, used as the fault filter clock and deadtime clock source.</description>
           </dynamic_enum>
           <dynamic_enum id="fractionalClockSourceFreq" label="Fractional clock source frequency" options="remove_from_struct_init" available="($parent.fractionalClockSource.isAvailable())" 
           items="(getClockFunctionalGroups().arrayToEnumItems(
              enumItem -> true,
              enumItem -> enumItem,
              enumItem -> frequencyToString(getPeripheralClockFrequency($instance.getPeripheral(), $parent.fractionalClockSource.getEnumItemValue(), enumItem)) + ` (` + enumItem + `)`,
              enumItem -> getPeripheralClockFrequency($instance.getPeripheral(), $parent.fractionalClockSource.getEnumItemValue(), enumItem)))" >
              <description>Selection of the fractional clock source frequency</description>
              <validation>
                 <constraint cond_expr="$this.getEnumItemValue() != 0" level="error" description="Clock source frequency cannot be 0 when it is used."/>
              </validation>
              <custom_value_support default="8 MHz" validation_expr="(x -> (x.isFreq() &amp;&amp; (x.getFreq(`Hz`, `Hz`) &gt;= 0)))" />
           </dynamic_enum> -->
            <reference id="pllMonitor" label="PLL monitor options" type="pllMonitor_t" available="$instance.getPeripheral().bitfieldExists(`MCTRL2`,`MONPLL`)">
                <description>Selects wheter PLL will be monitored and in case of PLL problems the fractional delay block will be disabled automatically or module won't be monitored and the disable and enable again should be done by SW. Disabling and enabling takes 25us startup time.</description>
            </reference>
            <reference id="writeProtect" label="Write protection" type="writeProtect_t" available="$instance.getPeripheral().bitfieldExists(`MCTRL2`,`WRPROT`)">
                <description>  
Selects options for the write protection of the bitfields:  
* SMxCTRL2 - all bitfields
* SMxCTRL - LDFQ, HALF, FULL, SPLIT, LDMOD, DBLX and DBLEN
* SMxOCTRL - all bitfields 
* SMxDMAEN - all bitfields
* SMxTCTRL - all bitfields
* SMxDISMAP0 - all bitfields
* SMxDISMAP1 - all bitfields
* SMxCAPTCTRLA - all bitfields
* SMxCAPTCTRLB - all bitfields
* SMxCAPTCTRLX - all bitfields
* SMxCAPTCOMPA - all bitfields
* SMxCAPTCOMPB - all bitfields
* SMxCAPTCOMPX - all bitfields
* OUTEN - all bitfields
* DTSRCSEL - all bitfields
* FCTRL0,1 - all bitfields
* FSTS0,1 - FHALF and FFULL
* FFILT0,1 - all bitfields
* FTST0,1 - FTEST
* FCTRL20,1 - NOCOMB
                </description>
            </reference>
            <variable id="sm0VAL1" value="$parent.submodules.filter(x -> (x.getSetting(`sm`).getEnumItemValue().toInt()) == 0).get(0).getSetting(`config.val1`).getValue()"/>
            <variable id="sm0FRACVAL1" value="$parent.submodules.filter(x -> (x.getSetting(`sm`).getEnumItemValue().toInt()) == 0).get(0).getSetting(`config.fracval1`).getValue()"/>
           <array id="submodules" label="Submodules" type="submodule_struct" min_expr="1" max_expr="4" options="ShowContentAs=Tabs;remove_from_struct_init" key_selector_expr="x -> x.getSetting(`sm_id`).getValue()" available="true">         
               <description>Setup submodules selected for usage.</description>
               <validation>
                    <constraint cond_expr="($this.findDuplicates(x -> x.getSetting(`sm`).getEnumItemValue()).size() == 0)" level="error" description="There are some duplicated submodules."/>
               </validation>
               <item_defaults>
                    <set_default id="sm" value_expr="x -> `kPWM_Module_` + x.getId().toString()"/>
                    <set_default id="config.reloadControl.reloadLogic" value_expr="x -> `kPWM_ReloadPwmFullCycle`"/>
                    <set_default id="config.deadtime_params.deadTime0.deadtimeValue" value_expr="x -> 0x07ff"/>
                    <set_default id="config.deadtime_params.deadTime1.deadtimeValue" value_expr="x -> 0x07ff"/>
               </item_defaults>
           </array>           
           <variable id="maskOuten" value="toString($parent.submodules.reduce(0,(x,y) -> (x | y.getSetting(`maskSmOuten`).getValue().toInt())),16)"/>
           <variable id="maskMask" value="toString($parent.submodules.reduce(0,(x,y) -> (x | y.getSetting(`maskSmMask`).getValue().toInt())),16)"/>
           <variable id="maskSwCout" value="toString($parent.submodules.reduce(0,(x,y) -> (x | y.getSetting(`maskSmSwCout`).getValue().toInt())),16)"/>
           <variable id="maskDtsrcsel" value="toString($parent.submodules.reduce(0,(x,y) -> (x | y.getSetting(`maskSmDtsrcsel`).getValue().toInt())),16)"/>
           <variable id="maskMctrl" value="toString($parent.submodules.reduce(0,(x,y) -> (x | y.getSetting(`maskSmMctrl`).getValue().toInt())),16)"/>
           <array id="faultChannels" label="Fault channels" type="faultChannel_t" size="$instance.getPeripheral().registerExists(`FSTS1`) ? 2 : 1" options="ShowContentAs=Tabs;remove_from_struct_init" available="true">
               <description>Fault channels configuration</description>
               <item_defaults>
                   <set_default id="faultFilterPeriod" value_expr="x -> `0`"/>
               </item_defaults>
           </array>
            <variable id="oRedCapture_interrupt_exist" value="(getResource(`interrupts`, $instance.getCoreId()).countOccurrences(item -> (
                  (item.getSetting(`devices`).searchInArray(
                        devItem -> (devItem.getSetting(`id`).getValue() == $instance.getPeripheral()) &amp;&amp; 
                                   (devItem.getSetting(`function`).getValue() == `ORedCapture`)
                  ) >= 0)
              ), false)) > 0"/>
              <bool id="capture_interruptEn" label="Enable capture interrupt vector" options="UI_LABEL_BOLD" available="($parent.oRedCapture_interrupt_exist.getValue())">
                <description expr="`Enable initialization of the interrupt vector in the ` + $parent.capture_interrupt.intControllerName.getValue() + ` and providing definition of the interrupt routine name.`"></description>
                <validation>
                    <constraint when_expr="$this.getValue()" cond_expr="($configSet.submodules.filter(x -> x.getSetting(`config.capture_IntSourceRequest`).getValue()).size() &gt; 0)" level="warning" description_expr="`The interrupt is enabled (in the interrupt controller) but Capture (each submodule has own) sources are disabled (interrupt will not be invoked).`"/>
                </validation>
             </bool>
             <reference id="capture_interrupt" label="Interrupt vector" type="interrupt_vector_t" config_set_id="fsl_interrupt_peripheral" component_id="system" options="irq_function=ORedCapture;UI_LABEL_HIDDEN" enable="$parent.capture_interruptEn.getValue()" available="($parent.oRedCapture_interrupt_exist.getValue())">
                <description expr="`Interrupt vector controller ( ` + $this.intControllerName.getValue() + ` ) settings that provide configuration of interrupt vectors and their enabling.`"></description>
             </reference>
             <variable id="fault_error_interrupt_exist" value="(getResource(`interrupts`, $instance.getCoreId()).countOccurrences(item -> (
                (item.getSetting(`devices`).searchInArray(
                    devItem -> (devItem.getSetting(`id`).getValue() == $instance.getPeripheral()) &amp;&amp; 
                    (devItem.getSetting(`function`).getValue() == `Fault`)
                ) >= 0) &amp;&amp; (item.getSetting(`devices`).searchInArray(
                    devItem -> (devItem.getSetting(`id`).getValue() == $instance.getPeripheral()) &amp;&amp; 
                    (devItem.getSetting(`function`).getValue() == `Reload_Error`)
                ) >= 0)
             ), false)) > 0"/>
           <bool id="fault_error_interruptEn" label="Enable fault/reload error interrupt vector" options="UI_LABEL_BOLD" available="$parent.fault_error_interrupt_exist.getValue()">
                <description expr="`Enable initialization of the interrupt vector in the ` + $parent.fault_error_interrupt.intControllerName.getValue() + ` and providing definition of the interrupt routine name.`"></description>
                <validation>
                    <constraint when_expr="$this.getValue()" cond_expr="($configSet.submodules.filter(x -> x.getSetting(`config.reload_err_IntSourceRequest`).getValue()).size() &gt; 0) || (($configSet.faultChannels.size() == 1) ? $configSet.faultChannels.get(0).getSetting(`faultIntSourceRequest`).getValue() : $configSet.faultChannels.get(0).getSetting(`faultIntSourceRequest`).getValue() || $configSet.faultChannels.get(1).getSetting(`faultIntSourceRequest`).getValue())" level="warning" description_expr="`The interrupt is enabled (in the interrupt controller) but Reload error (each submodule has own) and Fault interrupt sources are disabled (interrupt will not be invoked).`"/>
                </validation>
             </bool>
             <reference id="fault_error_interrupt" label="Interrupt vector" type="interrupt_vector_t" config_set_id="fsl_interrupt_peripheral" component_id="system" options="irq_function=Fault;irq_function_replace=Fault_Error;UI_LABEL_HIDDEN" enable="$parent.fault_error_interruptEn.getValue()" available="$parent.fault_error_interrupt_exist.getValue()">
                <description expr="`Interrupt vector controller ( ` + $this.intControllerName.getValue() + ` ) settings that provide configuration of interrupt vectors and their enabling.`"></description>
             </reference>
             <bool id="fault_interruptEn" label="Enable fault interrupt vector" options="UI_LABEL_BOLD" available="!($parent.fault_error_interrupt_exist.getValue())">
                <description expr="`Enable initialization of the interrupt vector in the ` + $parent.fault_interrupt.intControllerName.getValue() + ` and providing definition of the interrupt routine name.`"></description>
                <validation>
                    <constraint when_expr="$this.getValue()" cond_expr="(($configSet.faultChannels.size() == 1 ) ? $configSet.faultChannels.get(0).getSetting(`faultIntSourceRequest`).getValue() : $configSet.faultChannels.get(0).getSetting(`faultIntSourceRequest`).getValue() || $configSet.faultChannels.get(1).getSetting(`faultIntSourceRequest`).getValue())" level="warning" description_expr="`The interrupt is enabled (in the interrupt controller) but Fault interrupt sources are disabled (interrupt will not be invoked).`"/>                        
                </validation>
             </bool>
             <reference id="fault_interrupt" label="Interrupt vector" type="interrupt_vector_t" config_set_id="fsl_interrupt_peripheral" component_id="system" options="irq_function=Fault;UI_LABEL_HIDDEN" enable="$parent.fault_interruptEn.getValue()" available="!($parent.fault_error_interrupt_exist.getValue())">
                <description expr="`Interrupt vector controller ( ` + $this.intControllerName.getValue() + ` ) settings that provide configuration of interrupt vectors and their enabling.`"></description>
             </reference>
           <bool id="error_interruptEn" label="Enable reload error interrupt vector" options="UI_LABEL_BOLD" available="!($parent.fault_error_interrupt_exist.getValue())">
                <description expr="`Enable initialization of the interrupt vector in the ` + $parent.error_interrupt.intControllerName.getValue() + ` and providing definition of the interrupt routine name.`"></description>
                <validation>
                    <constraint when_expr="$this.getValue()" cond_expr="($configSet.submodules.filter(x -> x.getSetting(`config.reload_err_IntSourceRequest`).getValue()).size() &gt; 0)" level="warning" description_expr="`The interrupt is enabled (in the interrupt controller) but Reload error (each submodule has own) interrupt sources are disabled (interrupt will not be invoked).`"/>                        
                </validation>
           </bool>
           <reference id="error_interrupt" label="Interrupt vector" type="interrupt_vector_t" config_set_id="fsl_interrupt_peripheral" component_id="system" options="irq_function=Error;UI_LABEL_HIDDEN" enable="$parent.error_interruptEn.getValue()" available="!($parent.fault_error_interrupt_exist.getValue())">
                <description expr="`Interrupt vector controller ( ` + $this.intControllerName.getValue() + ` ) settings that provide configuration of interrupt vectors and their enabling.`"></description>
           </reference>
           <variable id="inst_ID" value="$instance.getFnGroupPrefix() + $instance.getID()"></variable>
           <variable id="inst_ID_def" value="toUpperCase($parent.inst_ID.getValue())"></variable>
           <variable id="inst_peripheral_ID" value="$parent.inst_ID_def.getValue() + `_PERIPHERAL`"></variable>
           <!-- Template parameters -->
           <reference id="pwm_common_template_params" type="pwm_common_template_params_t" label="" options="UI_LABEL_HIDDEN;UI_BORDER_HIDDEN"/>
        </settings>
        <fragment_defs>
            <import>
                <from component_id="system" config_set_id="common_code_templates"/>
                <from component_id="system" config_set_id="fsl_interrupt_peripheral"/>
            </import>            
            <def fragment="defines_submodules">
                <fragment id="define" if_expr="$this.getSetting(`config.clockSource_Hz`).getValue() != `N/A`">
                   <param id="name" expr="toUpperCase($configSet.inst_ID.getValue() + `_` + $this.sm_id.getValue() + `_` + `SM_CLK_SOURCE_FREQ_HZ`)"/>
                   <param id="value" expr="$this.getSetting(`config.clockSource_Hz`).getValue().toHertz() + `U`"/>
                   <param id="description" expr="`Definition of clock source of submodule ` + $this.sm.getEnumItemValue() + ` frequency in Hertz`"></param>
                </fragment>
                <fragment id="define" if_expr="$this.getSetting(`config.counterClock`).getValue() != `N/A`">
                   <param id="name" expr="toUpperCase($configSet.inst_ID.getValue() + `_` + $this.sm_id.getValue() + `_` + `COUNTER_CLK_SOURCE_FREQ_HZ`)"/>
                   <param id="value" expr="$this.getSetting(`config.counterClock`).getValue().toHertz() + `U`"/>
                   <param id="description" expr="`Definition of submodule ` + $this.sm.getEnumItemValue() + ` counter clock source frequency in Hertz - ` + toUpperCase($configSet.inst_ID.getValue() + `_` + $this.sm_id.getValue() + `_` + `SM_CLK_SOURCE_FREQ_HZ`) + ` divided by prescaler`"></param>
                </fragment>
                <fragment id="IRQ_definitions" apply_to="$this.common_interrupt" if_expr="$this.common_interrupt_exist.getValue() &amp;&amp; $this.common_interruptEn.getValue()"/>
                <fragment id="IRQ_definitions" apply_to="$this.compare_interrupt" if_expr="!($this.common_interrupt_exist.getValue()) &amp;&amp; $this.compare_interruptEn.getValue()"/>
                <fragment id="IRQ_definitions" apply_to="$this.reload_interrupt" if_expr="!($this.common_interrupt_exist.getValue()) &amp;&amp; $this.reload_interruptEn.getValue()"/>
            </def>
            <def fragment="sm1_3_template_params">
                <fragment id="template" apply_to="$this" if_expr="$this.sm.getEnumItemValue() != `0`">
                   <param id="file">fsl_pwm_sm.template</param>
                   <param id="setting" expr="$this.sm_template_params"></param>
                   <param id="separators"></param>
                   <param id="description" expr="`Submodule ` + $this.getId() + ` initialization`"></param>
               </fragment>
            </def>
            <def fragment="sm0_template_params">
                <fragment id="template" apply_to="$this" if_expr="$this.sm.getEnumItemValue() == `0`">
                   <param id="file">fsl_pwm_sm.template</param>
                   <param id="setting" expr="$this.sm_template_params"></param>
                   <param id="separators"></param>
                   <param id="description" expr="`Submodule ` + $this.getId() + ` initialization`"></param>
               </fragment>
            </def>
        </fragment_defs>
        <code>
            <section target="includes">
                <fragment id="include">
                   <param id="name">device_registers</param>
                    <param id="filename">fsl_device_registers.h</param>
                </fragment>
            </section>
            <section target="defines">
                <fragment id="define">
                   <param id="name" expr="$configSet.inst_peripheral_ID.getValue()"/>
                   <param id="value" expr="$instance.getPeripheral()"/>
                   <param id="description">Definition of peripheral ID</param>
                </fragment>
                <fragment id="defines_submodules" for_elements_of="$this.submodules"/>
                <fragment id="IRQ_definitions" apply_to="$this.capture_interrupt" if_expr="$this.oRedCapture_interrupt_exist.getValue() &amp;&amp; $this.capture_interruptEn.getValue()"/>
                <fragment id="IRQ_definitions" apply_to="$this.fault_error_interrupt" if_expr="$this.fault_error_interrupt_exist.getValue() &amp;&amp; $this.fault_error_interruptEn.getValue()"/>
                <fragment id="IRQ_definitions" apply_to="$this.fault_interrupt" if_expr="!($this.fault_error_interrupt_exist.getValue()) &amp;&amp; $this.fault_interruptEn.getValue()"/>
                <fragment id="IRQ_definitions" apply_to="$this.error_interrupt" if_expr="!($this.fault_error_interrupt_exist.getValue()) &amp;&amp; $this.error_interruptEn.getValue()"/>
                <fragment id="all_assigned_regs_init">
                    <param id="name" expr="$configSet.inst_ID_def.getValue()"/>
                </fragment>
               <fragment id="define">
                   <param id="name" expr="$configSet.inst_ID_def.getValue() + `_OUTEN_INIT_MASK`"></param>
                   <param id="value" expr="$configSet.maskOuten.getValue() + `U`"/>
                   <param id="description" expr="`OUTEN register mask`"/>
               </fragment>
               <fragment id="define">
                   <param id="name" expr="$configSet.inst_ID_def.getValue() + `_MASK_INIT_MASK`"></param>
                   <param id="value" expr="$configSet.maskMask.getValue() + `U`"/>
                   <param id="description" expr="`MASK register mask`"/>
               </fragment>
               <fragment id="define">
                   <param id="name" expr="$configSet.inst_ID_def.getValue() + `_SWCOUT_INIT_MASK`"></param>
                   <param id="value" expr="$configSet.maskSwCout.getValue() + `U`"/>
                   <param id="description" expr="`SWCOUT register mask`"/>
               </fragment>
               <fragment id="define">
                   <param id="name" expr="$configSet.inst_ID_def.getValue() + `_DTSRCSEL_INIT_MASK`"></param>
                   <param id="value" expr="$configSet.maskDtsrcsel.getValue() + `U`"/>
                   <param id="description" expr="`DTSRCSEL register mask`"/>
               </fragment>
               <fragment id="define">
                   <param id="name" expr="$configSet.inst_ID_def.getValue() + `_MCTRL_INIT_MASK`"></param>
                   <param id="value" expr="$configSet.maskMctrl.getValue() + `U`"/>
                   <param id="description" expr="`MCTRL register mask`"/>
               </fragment>
               <br/>
            </section>
            <section target="global_vars">
            </section>
            <section target="global_vars_extern">
            </section>
            <section target="common_pre_init_function">
                <!-- Clock gate enable -->
                <fragment id="clock_gate_enable_init" for_elements_of="$this.submodules">
                    <param id="submodule" expr="`SM` + $this.sm.getEnumItemValue()"/>
                </fragment>
            </section>
            <section target="init_function_body">
                <fragment id="sm1_3_template_params" for_elements_of="$this.submodules"/>
                <fragment id="sm0_template_params" for_elements_of="$this.submodules"/>
                <fragment id="template" for_elements_of="$configSet.faultChannels">
                   <param id="file">fsl_pwm_fault.template</param>
                   <param id="setting" expr="$this.fault_template_params"></param>
                   <param id="separators"></param>
                   <param id="description" expr="`Fault channel` + $this.getId() + ` initialization`"></param>
                </fragment>
                <fragment id="template" apply_to="$configSet.pwm_common_template_params">
                    <param id="file">fsl_pwm.template</param>
                    <param id="setting" expr="$this"></param>
                    <param id="separators"></param>
                    <param id="description" expr="$instance.getPeripheral() + ` initialization`"></param>
                </fragment>                              
            </section>
        </code>
        <validation>
        </validation>
        <quick_selections>
         <quick_selection id="QS_IRQ_priority1" label="Default">
            <description>Default IRQ setting.</description>
            <set id="interruptSources.commonSource">false</set>
            <set id="interrupt.priority">0</set>
            <set id="submodules.0.sm">kPWM_Module_0</set>
         </quick_selection>
         <default>QS_IRQ_priority1</default>
        </quick_selections>
    </config_set>
</component:config_component>