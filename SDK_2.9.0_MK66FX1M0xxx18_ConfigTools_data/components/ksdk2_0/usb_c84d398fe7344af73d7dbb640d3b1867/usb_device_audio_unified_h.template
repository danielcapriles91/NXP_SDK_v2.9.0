${<code>
// Interface implmentation task
var InterfaceTask_Function = "USB_Device" + idCamelCase + "Task";
// Audio unified global variable
var USB_AudioUnified_Name = "USB_" + idCamelCase + "AudioUnified";
var USB_AudioPlayDataBuffer_Name = "USB_" + idCamelCase + "DataBuff";
var USB_AudioRecDataBuffer_Name = "USB_" + idCamelCase + "RecDataBuff";

var USB_ProcessNextAudioData_Name = "USB_" + idCamelCase + "ProcessNextAudioData"; 
var USB_ProcessRecAudioData_Name = "USB_" + idCamelCase + "ProcessRecAudioData"; 
// Audio version global variable
var AudioVersion20 = interfaceProtocol == CONST.AUDIO_PROTOCOL_IPV20;

</code>}$
#include "usb_device_config.h"
#include "usb_device_descriptor.h"
#include "usb_device_audio.h"

#ifndef __USB_DEVICE_${idSnakeCase}$_H__
#define __USB_DEVICE_${idSnakeCase}$_H__ 1U

/******************************************************************************
* Definitions
******************************************************************************/
#define AUDIO_IN_SAMPLING_RATE_KHZ (48)
#define AUDIO_OUT_SAMPLING_RATE_KHZ (48)
#define AUDIO_SAMPLING_RATE_16KHZ (16)
#define AUDIO_IN_SAMPLING_RATE (AUDIO_IN_SAMPLING_RATE_KHZ * 1000)
#define AUDIO_OUT_SAMPLING_RATE (AUDIO_OUT_SAMPLING_RATE_KHZ * 1000)
#define AUDIO_SAMPLING_RATE (AUDIO_OUT_SAMPLING_RATE)
#define AUDIO_RECORDER_DATA_WHOLE_BUFFER_LENGTH (16 * 2)
#define AUDIO_SPEAKER_DATA_WHOLE_BUFFER_LENGTH (16 * 2)
#define AUDIO_BUFFER_UPPER_LIMIT(x) (((x)*5) / 8)
#define AUDIO_BUFFER_LOWER_LIMIT(x) (((x)*3) / 8)${<code>
if(AudioVersion20){ </code>}$
#define AUDIO_CALCULATE_Ff_INTERVAL (256) /* suggest: 1024U, 512U, 256U */${<code>
}else{ </code>}$
#define AUDIO_CALCULATE_Ff_INTERVAL (1024)${<code>
} </code>}$
#define TSAMFREQ2BYTES(f) (f & 0xFFU), ((f >> 8U) & 0xFFU), ((f >> 16U) & 0xFFU)
#define TSAMFREQ2BYTESHS(f) (f & 0xFFU), ((f >> 8U) & 0xFFU), ((f >> 16U) & 0xFFU), ((f >> 24U) & 0xFFU)
#define AUDIO_ADJUST_MIN_STEP (0x01)
#define MUTE_CODEC_TASK (1UL << 0U)
#define UNMUTE_CODEC_TASK (1UL << 1U)
#define VOLUME_CHANGE_TASK (1UL << 2U)

#define USB_DEVICE_INTERRUPT_PRIORITY (3U)
typedef struct _usb_audio_unified_struct
{
    uint8_t copyProtect;
    uint8_t curMute;
    uint8_t curVolume[2]; /* need to consider the endians */
    uint8_t minVolume[2]; /* need to consider the endians */
    uint8_t maxVolume[2]; /* need to consider the endians */
    uint8_t resVolume[2]; /* need to consider the endians */
    uint8_t curBass;
    uint8_t minBass;
    uint8_t maxBass;
    uint8_t resBass;
    uint8_t curMid;
    uint8_t minMid;
    uint8_t maxMid;
    uint8_t resMid;
    uint8_t curTreble;
    uint8_t minTreble;
    uint8_t maxTreble;
    uint8_t resTreble;
    uint8_t curAutomaticGain;
    uint8_t curDelay[2]; /* need to consider the endians */
    uint8_t minDelay[2]; /* need to consider the endians */
    uint8_t maxDelay[2]; /* need to consider the endians */
    uint8_t resDelay[2]; /* need to consider the endians */
    uint8_t curLoudness;
    uint8_t curSamplingFrequency[3]; /* need to consider the endians */
    uint8_t minSamplingFrequency[3]; /* need to consider the endians */
    uint8_t maxSamplingFrequency[3]; /* need to consider the endians */
    uint8_t resSamplingFrequency[3]; /* need to consider the endians */${<code>
if(AudioVersion20){ </code>}$
    uint8_t curMute20;
    uint8_t curClockValid;
    uint8_t curVolume20[2];
    uint32_t curSampleFrequency;
    usb_device_control_range_layout3_struct_t freqControlRange;
    usb_device_control_range_layout2_struct_t volumeControlRange;${<code>
} </code>}$
    volatile uint8_t startPlay;
    volatile uint8_t startPlayHalfFull;
    volatile uint8_t startRec;
    volatile uint8_t startRecHalfFull;
    volatile uint32_t tdReadNumberPlay;
    volatile uint32_t tdWriteNumberPlay;
    volatile uint32_t tdReadNumberRec;
    volatile uint32_t tdWriteNumberRec;
    volatile uint32_t audioSendCount;
    volatile uint32_t lastAudioSendCount;
    volatile uint32_t usbRecvCount;
    volatile uint32_t audioSendTimes;
    volatile uint32_t usbRecvTimes;
    volatile uint32_t audioRecvCount;
    volatile uint32_t usbSendTimes;
    volatile uint32_t speakerIntervalCount;
    volatile uint32_t speakerReservedSpace;
    volatile uint32_t recorderReservedSpace;
    volatile uint32_t timesFeedbackCalculate;
    volatile uint32_t speakerDetachOrNoInput;
    volatile uint32_t codecTask;
} usb_audio_unified_struct_t;

/*******************************************************************************
 * Variables
 ******************************************************************************/
extern usb_audio_unified_struct_t ${USB_AudioUnified_Name}$;
extern uint8_t ${USB_AudioPlayDataBuffer_Name}$[];
extern uint8_t ${USB_AudioRecDataBuffer_Name}$[];

/*
 * Function for processing of the audio unified task.
 */
void ${InterfaceTask_Function}$(void);

/*
 * Function for procession of next audio data from the data buffer. It can be used as a callback.
 */
void ${USB_ProcessNextAudioData_Name}$(void);

/*
 * Function for procession of received audio data from the data buffer. It can be used as a callback.
 */
void ${USB_ProcessRecAudioData_Name}$(void);


#endif /* __USB_DEVICE_${idSnakeCase}$_H__ */
