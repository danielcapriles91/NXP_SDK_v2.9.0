${<code>
var nrToHexStr = function(nr){
    return "0x" + ("0" + nr.toString(16).toUpperCase()).substr(-2);
};
</code>}$#ifndef __USB_DEVICE_DESCRIPTOR_H__
#define __USB_DEVICE_DESCRIPTOR_H__

/*******************************************************************************
 * Definitions
 ******************************************************************************/

#define USB_DEVICE_SPECIFIC_BCD_VERSION (0x0200U)
#define USB_DEVICE_DEMO_BCD_VERSION (0x0101U)

#define USB_DEVICE_CLASS (${nrToHexStr(deviceClass)}$U)
#define USB_DEVICE_SUBCLASS (${nrToHexStr(deviceSubClass)}$U)
#define USB_DEVICE_PROTOCOL (${nrToHexStr(deviceProtocol)}$U)
/*! @brief Maximum current USB device can draw from bus in milliamperes.*/
#define USB_DEVICE_MAX_POWER (${nrToHexStr(maxPower)}$U)	

#define USB_DEVICE_CONFIGURATION_COUNT (1U)
#define USB_DEVICE_STRING_COUNT (3U)
#define USB_DEVICE_LANGUAGE_COUNT (1U)

#define USB_COMPOSITE_CONFIGURATION_INDEX (1U)
${<code>
if (cicCount) {
</code>}$
/* Header Functional Descriptor, which marks the beginning of the concatenated set of functional descriptors for the interface */
#define USB_CDC_HEADER_FUNC_DESC (0x00U)
/* Call Management Functional Descriptor */
#define USB_CDC_CALL_MANAGEMENT_FUNC_DESC (0x01U)
/* Abstract Control Management Functional Descriptor */
#define USB_CDC_ABSTRACT_CONTROL_FUNC_DESC (0x02U)
/* Direct Line Management Functional Descriptor */
#define USB_CDC_DIRECT_LINE_FUNC_DESC (0x03U)
/* Telephone Ringer Functional Descriptor */
#define USB_CDC_TELEPHONE_RINGER_FUNC_DESC (0x04U)
/* Telephone Call and Line State Reporting Capabilities Functional Descriptor */
#define USB_CDC_TELEPHONE_REPORT_FUNC_DESC (0x05U)
/* Union Functional Descriptor */
#define USB_CDC_UNION_FUNC_DESC (0x06U)
/* Country Selection Functional Descriptor */
#define USB_CDC_COUNTRY_SELECT_FUNC_DESC (0x07U)
/* Telephone Operational Modes Functional Descriptor */
#define USB_CDC_TELEPHONE_MODES_FUNC_DESC (0x08U)
/* USB Terminal Functional Descriptor */
#define USB_CDC_TERMINAL_FUNC_DESC (0x09U)
/* Network Channel Terminal Descriptor */
#define USB_CDC_NETWORK_CHANNEL_FUNC_DESC (0x0AU)
/* Protocol Unit Functional Descriptor */
#define USB_CDC_PROTOCOL_UNIT_FUNC_DESC (0x0BU)
/* Extension Unit Functional Descriptor */
#define USB_CDC_EXTENSION_UNIT_FUNC_DESC (0x0CU)
/* Multi-Channel Management Functional Descriptor */
#define USB_CDC_MULTI_CHANNEL_FUNC_DESC (0x0DU)
/* CAPI Control Management Functional Descriptor */
#define USB_CDC_CAPI_CONTROL_FUNC_DESC (0x0EU)
/* Ethernet Networking Functional Descriptor */
#define USB_CDC_ETHERNET_NETWORKING_FUNC_DESC (0x0FU)
/* ATM Networking Functional Descriptor */
#define USB_CDC_ATM_NETWORKING_FUNC_DESC (0x10U)
/* Wireless Handset Control Model Functional Descriptor */
#define USB_CDC_WIRELESS_CONTROL_FUNC_DESC (0x11U)
/* Mobile Direct Line Model Functional Descriptor */
#define USB_CDC_MOBILE_DIRECT_LINE_FUNC_DESC (0x12U)
/* MDLM Detail Functional Descriptor */
#define USB_CDC_MDLM_DETAIL_FUNC_DESC (0x13U)
/* Device Management Model Functional Descriptor */
#define USB_CDC_DEVICE_MANAGEMENT_FUNC_DESC (0x14U)
/* OBEX Functional Descriptor */
#define USB_CDC_OBEX_FUNC_DESC (0x15U)
/* Command Set Functional Descriptor */
#define USB_CDC_COMMAND_SET_FUNC_DESC (0x16U)
/* Command Set Detail Functional Descriptor */
#define USB_CDC_COMMAND_SET_DETAIL_FUNC_DESC (0x17U)
/* Telephone Control Model Functional Descriptor */
#define USB_CDC_TELEPHONE_CONTROL_FUNC_DESC (0x18U)
/* OBEX Service Identifier Functional Descriptor */
#define USB_CDC_OBEX_SERVICE_ID_FUNC_DESC (0x19U)

/* Length of Interface Association Descriptor in bytes */
#define USB_IAD_DESC_SIZE (8U)
/* Length of Header Functional Descriptor in bytes */
#define USB_DESCRIPTOR_LENGTH_CDC_HEADER_FUNC (5U)
/* Length of Call Management Functional Descriptor in bytes */
#define USB_DESCRIPTOR_LENGTH_CDC_CALL_MANAG (5U)
/* Length of Abstract Control Management Functional Descriptor in bytes */
#define USB_DESCRIPTOR_LENGTH_CDC_ABSTRACT (4U)${<code>
interfaces.forEach(function(interface) {
    switch (interface.interfaceClass) {
        case CONST.USB_CLASS_CIC:
</code>}$
#define USB_DESCRIPTOR_LENGTH_${interface.idSnakeCase}$_UNION_FUNC (${4 + interface.dataInterfaceCount}$U)${<code>
        break;
    }
});
</code>}$

#define USB_DESCRIPTOR_TYPE_CDC_CS_INTERFACE (0x24U)
#define USB_DESCRIPTOR_TYPE_CDC_CS_ENDPOINT (0x25U)
${<code>
}
var endpointCounter = 0;
var reportDescriptorLengths = "";
var compositeInterfaceCounts = "";
var firstInterface = true;
interfaces.forEach(function(interface) {
    if (!isSubordinateInterface(interface, interfaces)) {
        if (firstInterface) {
            firstInterface = false;
        } else {
            compositeInterfaceCounts += " + "
        }
        compositeInterfaceCounts += "USB_" + interface.idSnakeCase + "_INTERFACE_COUNT";
    }
</code>}$
#define USB_${interface.idSnakeCase}$_CLASS (${nrToHexStr(interface.interfaceClass)}$U)
#define USB_${interface.idSnakeCase}$_SUBCLASS (${nrToHexStr(interface.interfaceSubClass)}$U)
#define USB_${interface.idSnakeCase}$_PROTOCOL (${nrToHexStr(interface.interfaceProtocol)}$U)
#define USB_${interface.idSnakeCase}$_INTERFACE_COUNT (${interface.interfaceCount + interface.dataInterfaceCount}$U)
#define USB_${interface.idSnakeCase}$_INDEX (${interface.index}$U)${<code>
switch (interface.interfaceClass) {
    case CONST.USB_CLASS_HID:
        reportDescriptorLengths += "#define USB_DESCRIPTOR_LENGTH_" + interface.idSnakeCase + "_REPORT (sizeof(g_UsbDevice" + interface.idCamelCase + "ReportDescriptor))\n";
</code>}$
#define USB_${interface.idSnakeCase}$_INPUT_REPORT_LENGTH (${interface.inputReportLength}$U)
#define USB_${interface.idSnakeCase}$_OUTPUT_REPORT_LENGTH (${interface.outputReportLength}$U)
#define USB_${interface.idSnakeCase}$_FEATURE_REPORT_LENGTH (${interface.featureReportLength}$U)
${<code>
        break;
}
</code>}$
#define USB_${interface.idSnakeCase}$_ENDPOINT_COUNT (${interface.endpoints.length}$U)
${<code>
    interface.endpoints.forEach(function(endpoint) {
</code>}$
#define USB_${endpoint.idSnakeCase}$ (${endpoint.index}$U)
#define USB_${endpoint.idSnakeCase}$_DIRECTION USB_DESCRIPTOR_ENDPOINT_ADDRESS_DIRECTION_${endpoint.directionSnakeCase}$
#define FS_${endpoint.idSnakeCase}$_PACKET_SIZE (${endpoint.packetSizeFs}$U)
#define HS_${endpoint.idSnakeCase}$_PACKET_SIZE (${endpoint.packetSizeHs}$U)
#define FS_${endpoint.idSnakeCase}$_INTERVAL (${endpoint.intervalFs}$U)
#define HS_${endpoint.idSnakeCase}$_INTERVAL (${endpoint.intervalHs}$U)
${<code>
    });
});
</code>}$
#define USB_DESCRIPTOR_LENGTH_CONFIGURATION_ALL (sizeof(g_UsbDeviceConfigurationDescriptor))
${reportDescriptorLengths<code>
if (hidCount) {
</code>}$#define USB_DESCRIPTOR_LENGTH_HID (9U)${<code>
}
</code>}$
#define USB_DESCRIPTOR_LENGTH_STRING0 (sizeof(g_UsbDeviceString0))
#define USB_DESCRIPTOR_LENGTH_STRING1 (sizeof(g_UsbDeviceString1))
#define USB_DESCRIPTOR_LENGTH_STRING2 (sizeof(g_UsbDeviceString2))

#define USB_COMPOSITE_INTERFACE_COUNT (${compositeInterfaceCounts}$)

#define USB_ALTERNATE_SETTING_0 (0U)

/*******************************************************************************
 * API
 ******************************************************************************/

/*!
* @brief Configure the device according to the USB speed.
*
* Due to the difference of HS and FS descriptors, the device descriptors and configurations need to be updated to match
* the current speed.
* As the default, the device descriptors and configurations are configured by using FS parameters for both EHCI and
* KHCI.
* When the EHCI is enabled, the application needs to call this fucntion to update device by using current speed.
* The updated information includes endpoint max packet size, endpoint interval, etc.
*
* @param usb_device_handle Handle to USB device.
* @param uint8_t Value contains information on speed in coded form:
* @verbatim
*    0 - full speed
*    1 - low speed
*    2 - high speed
* @endverbatim
* @retval kStatus_USB_Success Function always returns kStatus_USB_Success value.
*/
usb_status_t USB_DeviceSetSpeed(usb_device_handle handle, uint8_t speed);

#if (defined(USB_DEVICE_CONFIG_CV_TEST) && (USB_DEVICE_CONFIG_CV_TEST > 0U))
/*!
* @brief Get device qualifier descriptor request.
*
* @param usb_device_handle Handle to USB device.
* @param usb_device_get_device_qualifier_descriptor_struct_t USB device qualifier descriptor request structure that will be set by this function.
* @retval kStatus_USB_Success Function always returns kStatus_USB_Success value.
*/
usb_status_t USB_DeviceGetDeviceQualifierDescriptor(
    usb_device_handle handle, usb_device_get_device_qualifier_descriptor_struct_t *deviceQualifierDescriptor);
#endif

/*!
* @brief Gets device descriptor request.
*
* @param usb_device_handle Handle to USB device.
* @param usb_device_get_configuration_descriptor_struct_t USB device descriptor request structure.
* @retval kStatus_USB_Success Function always returns kStatus_USB_Success value.
*/
usb_status_t USB_DeviceGetDeviceDescriptor(usb_device_handle handle,
                                           usb_device_get_device_descriptor_struct_t *deviceDescriptor);

/*!
* @brief Get device configuration descriptor request .
*
* @param usb_device_handle Handle to USB device.
* @param usb_device_get_configuration_descriptor_struct_t USB device configuration descriptor request structure that will be set by this function.
* @retval kStatus_USB_Success Function always returns kStatus_USB_Success value.
*/
usb_status_t USB_DeviceGetConfigurationDescriptor(
    usb_device_handle handle, usb_device_get_configuration_descriptor_struct_t *configurationDescriptor);

/*!
* @brief Get device string descriptor request.
*
* @param usb_device_handle Handle to USB device.
* @param usb_device_get_string_descriptor_struct_t USB device string descriptor request structure that will be set by this function.
* @retval kStatus_USB_Success Function always returns kStatus_USB_Success value.
*/
usb_status_t USB_DeviceGetStringDescriptor(usb_device_handle handle,
                                           usb_device_get_string_descriptor_struct_t *stringDescriptor);
${<code>
if (hidCount) {
</code>}$

/*!
* @brief Get device HID descriptor request.
*
* @param usb_device_handle Handle to USB device.
* @param usb_device_get_hid_descriptor_struct_t USB device HID descriptor request structure that will be set by this function.
* @retval kStatus_USB_Success Function always returns kStatus_USB_Success value.
*/
usb_status_t USB_DeviceGetHidDescriptor(usb_device_handle handle,
                                        usb_device_get_hid_descriptor_struct_t *hidDescriptor);

/*!
* @brief Get device HID report descriptor request.
*
* @param usb_device_handle Handle to USB device.
* @param usb_device_get_hid_report_descriptor_struct_t USB device HID report descriptor request structure that will be set by this function.
* @retval kStatus_USB_Success Function always returns kStatus_USB_Success value.
*/
usb_status_t USB_DeviceGetHidReportDescriptor(usb_device_handle handle,
                                              usb_device_get_hid_report_descriptor_struct_t *hidReportDescriptor);

/*!
* @brief Get device HID report descriptor request.
*
* @param usb_device_handle Handle to USB device.
* @param usb_device_get_hid_physical_descriptor_struct_t USB device physical descriptor request structure that will be set by this function.
* @retval kStatus_USB_Success Function always returns kStatus_USB_Success value.
*/
usb_status_t USB_DeviceGetHidPhysicalDescriptor(usb_device_handle handle,
                                                usb_device_get_hid_physical_descriptor_struct_t *hidPhysicalDescriptor);
${<code>
}
</code>}$
#endif /* __USB_DEVICE_DESCRIPTOR_H__ */