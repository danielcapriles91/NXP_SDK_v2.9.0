#include "usb_host_config.h"
#include "usb_host.h"
#include "usb_host_printer.h"
#include "usb_host_common.h"
#include "usb_host_app.h"
#include "usb_host_${idLowerSnakeCase}$.h"
#include "string.h"
#include "stdlib.h"

/*******************************************************************************
 * Definitions
 ******************************************************************************/

#define DEVICE_ID_STRING_POSTSCRIPT "POSTSCRIPT"
#define DEVICE_ID_STRING_PJL "PJL"
#define DEVICE_ID_NXP_STRING "MFG:NXP"
#define DEVICE_ID_STRING_PCL "PCL"

#define USB_HOST_PRINTER_APP_RECEIVE_TRY_DELAY (500)
#define USB_HOST_PRINTER_APP_ONEMS_COUNT (200)
#define USB_HOST_PRINTER_APP_BUFFER_SIZE (300)

#define ESCAPE 0x1BU

typedef enum _usb_host_printer_device_type
{
    kPrinter_NXPVirtual = 0u,
    kPrinter_PJLPostscriptor,
} usb_host_printer_device_type_t;

typedef struct _usb_host_printer_app
{
    usb_host_configuration_handle configHandle; /*!< the printer\'s configuration handle */
    usb_device_handle deviceHandle;             /*!< the printer\'s device handle */
    usb_host_class_handle classHandle;          /*!< the printer\'s class handle */
    usb_host_interface_handle interfaceHandle;  /*!< the printer\'s interface handle */
    usb_status_t callbackStatus;                /*!< keep the callback status */
    uint8_t *deviceIdBuffer;                    /*!< get device id */
    uint32_t receiveLength;                     /*!< received data length */
    uint32_t receiveDelay;                      /*!< receive periodical delay */
    uint8_t *printerAppBuffer;                  /*!< get device id and receive buffer, increasing 1 for \\0 character */
    uint8_t deviceState;                        /*!< device attach/detach status */
    uint8_t prevState;                          /*!< device attach/detach previous status */
    uint8_t runState;                           /*!< printer application run status */
    uint8_t runWaitState; /*!< printer application wait status, go to next run status when the wait status success */
    uint8_t selectAlternateSetting; /*!< the supported alternate setting interface */
    uint8_t waitCallback;           /*!< wait callback label */
    uint8_t deviceLanguageType;     /*!< reference to #usb_host_printer_device_type_t */
} usb_host_printer_app_t;

/*******************************************************************************
 * Prototypes
 ******************************************************************************/


/*******************************************************************************
* Variables
******************************************************************************/

extern usb_host_handle g_HostHandle;

static usb_host_printer_app_t s_Printer;

USB_DMA_NONINIT_DATA_ALIGN(USB_DATA_ALIGN_SIZE) static uint8_t s_HostPrinterBuffer[USB_HOST_PRINTER_APP_BUFFER_SIZE + 1];

USB_DMA_NONINIT_DATA_ALIGN(USB_DATA_ALIGN_SIZE) static const uint8_t nxpVirtualPrinterTestStr[] =
    "\\r\\n"
    \\
"                file name\\r\\n"
    \\
"        NXP host printer test\\r\\n";

USB_DMA_NONINIT_DATA_ALIGN(USB_DATA_ALIGN_SIZE) static const uint8_t pjlPostscriptTestStr[] =
    " " /* escape character */
    \\
"%-12345X@PJL \\r\\n"
    \\
"@PJL ENTER LANGUAGE = POSTSCRIPT \\r\\n"
    \\
"/inch {72 mul}def\\r\\n"
    \\
"/GetFont {findfont exch scalefont setfont} bind def\\r\\n"
    \\
"/Font1 {0.5 inch /Helvetica GetFont} def\\r\\n"
    \\
"/PrintString {moveto show} bind def\\r\\n"
    \\
"(NXP host printer test) 20 700 Font1 PrintString\\r\\n"
    \\
"showpage"
    \\
" " /* escape character */
    \\
"%-12345X";

/*******************************************************************************
 * Code
 ******************************************************************************/

static void USB_HostPrinterAppBulkOutCallback(void *param, uint8_t *data, uint32_t dataLength, usb_status_t status)
{
    usb_host_printer_app_t *printerApp = (usb_host_printer_app_t *)param;

    printerApp->callbackStatus = status;
    printerApp->waitCallback = 1;
}

static void USB_HostPrinterAppBulkInCallback(void *param, uint8_t *data, uint32_t dataLength, usb_status_t status)
{
    usb_host_printer_app_t *printerApp = (usb_host_printer_app_t *)param;

    if (status == kStatus_USB_Success)
    {
        printerApp->receiveLength = dataLength;
        printerApp->runState = kUSB_HostPrinterRunDataReceived;
    }
    else
    {
        printerApp->receiveLength = 0U;
        printerApp->runState = kUSB_HostPrinterRunPrimeReceive;
    }
}

static void USB_HostPrinterAppControlCallback(void *param, uint8_t *data, uint32_t dataLength, usb_status_t status)
{
    usb_host_printer_app_t *printerApp = (usb_host_printer_app_t *)param;

    if (printerApp->runState == kUSB_HostPrinterRunPrinterTest)
    {
        printerApp->waitCallback = 1;
        printerApp->callbackStatus = status;
    }
    else
    {
        if (status == kStatus_USB_Success)
        {
            if (printerApp->runWaitState == kUSB_HostPrinterRunWaitSetInterface) /* set interface finish */
            {
                printerApp->runState = kUSB_HostPrinterRunPrinterTest;
            }
            else if (printerApp->runWaitState == kUSB_HostPrinterRunWaitGetDeviceId) /* get device id finish */
            {
                printerApp->runState = kUSB_HostPrinterRunGetDeviceIdDone;
            }
            else if (printerApp->runWaitState == kUSB_HostPrinterRunWaitGetDeviceIdAll)
            {
                printerApp->runState = kUSB_HostPrinterRunGetDeviceIdAllDone;
            }
            else
            {
            }
            printerApp->runWaitState = kUSB_HostPrinterRunIdle;
        }
        else
        {
            if (printerApp->runWaitState == kUSB_HostPrinterRunWaitGetDeviceIdAll)
            {
                printerApp->runState = kUSB_HostPrinterRunGetDeviceIdAllError;
            }
        }
    }
}

static void USB_HostPrinterPrintPortStatus(uint8_t portStatus)
{
    if (portStatus & USB_HOST_PRINTER_PORT_STATUS_PAPER_EMPTRY_MASK)
    {
        usb_echo("Paper Empty; ");
    }
    else
    {
        usb_echo("Paper Not Empty; ");
    }

    if (portStatus & USB_HOST_PRINTER_PORT_STATUS_SELECT_MASK)
    {
        usb_echo("Selected; ");
    }
    else
    {
        usb_echo("Not Selected; ");
    }

    if (portStatus & USB_HOST_PRINTER_PORT_STATUS_NOT_ERROR_MASK)
    {
        usb_echo("No Error.\\r\\n");
    }
    else
    {
        usb_echo("Error.\\r\\n");
    }
}

static inline void USB_HostControllerTaskFunction(usb_host_handle hostHandle)
{
#if ((defined USB_HOST_CONFIG_KHCI) && (USB_HOST_CONFIG_KHCI))
    USB_HostKhciTaskFunction(hostHandle);
#endif /* USB_HOST_CONFIG_KHCI */
#if ((defined USB_HOST_CONFIG_EHCI) && (USB_HOST_CONFIG_EHCI))
    USB_HostEhciTaskFunction(hostHandle);
#endif /* USB_HOST_CONFIG_EHCI */
#if ((defined USB_HOST_CONFIG_OHCI) && (USB_HOST_CONFIG_OHCI > 0U))
    USB_HostOhciTaskFunction(g_HostHandle);
#endif /* USB_HOST_CONFIG_OHCI */
#if ((defined USB_HOST_CONFIG_IP3516HS) && (USB_HOST_CONFIG_IP3516HS > 0U))
    USB_HostIp3516HsTaskFunction(g_HostHandle);
#endif /* USB_HOST_CONFIG_IP3516HS */
}

static void USB_HostPrinterTest()
{
    usb_status_t status;
    uint32_t index;

    /* Get port status */
    if (s_Printer.deviceState != kStatus_DEV_Attached)
    {
        return;
    }
    usb_echo("Get port status...");
    s_Printer.waitCallback = 0;
    status = USB_HostPrinterGetPortStatus(s_Printer.classHandle, s_Printer.printerAppBuffer,
                                          USB_HostPrinterAppControlCallback, &s_Printer);
    if (status != kStatus_USB_Success)
    {
        usb_echo("Error\\r\\n");
    }
    while (!s_Printer.waitCallback)
    {
        USB_HostControllerTaskFunction(g_HostHandle);
    }
    if (s_Printer.callbackStatus == kStatus_USB_Success)
    {
        USB_HostPrinterPrintPortStatus(s_Printer.printerAppBuffer[0]);
    }
    else
    {
        usb_echo("Fail\\r\\n");
        return;
    }

    /* printer text */
    if (s_Printer.deviceState != kStatus_DEV_Attached)
    {
        return;
    }
    usb_echo("Printer text...");
    s_Printer.waitCallback = 0;
    if (s_Printer.deviceLanguageType == kPrinter_NXPVirtual)
    {
        for (index = 0; index < sizeof(nxpVirtualPrinterTestStr); ++index)
        {
            s_Printer.printerAppBuffer[index] = nxpVirtualPrinterTestStr[index];
        }
        status = USB_HostPrinterSend(s_Printer.classHandle, s_Printer.printerAppBuffer,
                                     sizeof(nxpVirtualPrinterTestStr), USB_HostPrinterAppBulkOutCallback, &s_Printer);
    }
    else if (s_Printer.deviceLanguageType == kPrinter_PJLPostscriptor)
    {
        for (index = 0; index < sizeof(pjlPostscriptTestStr); ++index)
        {
            s_Printer.printerAppBuffer[index] = pjlPostscriptTestStr[index];
        }
        /* to fix misra error */
        s_Printer.printerAppBuffer[0] = ESCAPE;
        s_Printer.printerAppBuffer[sizeof(pjlPostscriptTestStr) - 10] = ESCAPE;
        status = USB_HostPrinterSend(s_Printer.classHandle, s_Printer.printerAppBuffer,
                                     sizeof(pjlPostscriptTestStr), USB_HostPrinterAppBulkOutCallback, &s_Printer);
    }
    else
    {
        usb_echo("No data\\r\\n");
        return;
    }
    if (status != kStatus_USB_Success)
    {
        usb_echo("Error\\r\\n");
    }
    while (!s_Printer.waitCallback)
    {
        USB_HostControllerTaskFunction(g_HostHandle);
    }
    if (s_Printer.callbackStatus == kStatus_USB_Success)
    {
        usb_echo("Success\\r\\n");
        return;
    }
    else
    {
        usb_echo("Fail\\r\\n");
    }

    /* if there is error */
    if (s_Printer.deviceState != kStatus_DEV_Attached)
    {
        return;
    }
    usb_echo("Printer soft reset...");
    s_Printer.waitCallback = 0;
    status = USB_HostPrinterSoftReset(s_Printer.classHandle, USB_HostPrinterAppControlCallback, &s_Printer);
    if (status != kStatus_USB_Success)
    {
        usb_echo("Error\\r\\n");
    }
    while (!s_Printer.waitCallback)
    {
        USB_HostControllerTaskFunction(g_HostHandle);
    }
    if (s_Printer.callbackStatus == kStatus_USB_Success)
    {
        usb_echo("Success\\r\\n");
    }
    else
    {
        usb_echo("Fail\\r\\n");
    }
}

void USB_Host${idCamelCase}$Task(void)
{
    usb_status_t status;
    uint8_t *idBuffer;
    uint32_t idLength;
    uint8_t interfaceIndex;
    uint8_t support;

    /* device state changes, process once for each state */
    if (s_Printer.deviceState != s_Printer.prevState)
    {
        s_Printer.prevState = s_Printer.deviceState;
        switch (s_Printer.deviceState)
        {
            case kStatus_DEV_Idle:
                break;

            case kStatus_DEV_Attached: /* device is attached and numeration is done */
                s_Printer.runState = kUSB_HostPrinterRunGetDeviceId;
                /* printer class initialization */
                if (USB_HostPrinterInit(s_Printer.deviceHandle, &s_Printer.classHandle) != kStatus_USB_Success)
                {
                    usb_echo("Host printer class initialization failed\\r\\n");
                }
                break;

            case kStatus_DEV_Detached: /* device is detached */
                s_Printer.deviceState = kStatus_DEV_Idle;
                s_Printer.runState = kUSB_HostPrinterRunIdle;
                /* printer class de-initialization */
                USB_HostPrinterDeinit(s_Printer.deviceHandle, s_Printer.classHandle);
                s_Printer.classHandle = NULL;
                s_Printer.deviceHandle = NULL;
                s_Printer.interfaceHandle = NULL;
                usb_echo("Printer detached\\r\\n");
                break;

            default:
                break;
        }
    }

    /* run state */
    switch (s_Printer.runState)
    {
        case kUSB_HostPrinterRunIdle:
            break;

        case kUSB_HostPrinterRunGetDeviceId: /* 1. get device id */
            s_Printer.runState = kUSB_HostPrinterRunIdle;
            if (s_Printer.deviceIdBuffer != NULL)
            {
                free(s_Printer.deviceIdBuffer);
                s_Printer.deviceIdBuffer = NULL;
            }
            s_Printer.runWaitState = kUSB_HostPrinterRunWaitGetDeviceId;
            interfaceIndex = ((usb_host_interface_t *)s_Printer.interfaceHandle)->interfaceDesc->bInterfaceNumber;
            status =
                USB_HostPrinterGetDeviceId(s_Printer.classHandle, interfaceIndex, s_Printer.selectAlternateSetting,
                                           s_Printer.printerAppBuffer, USB_HOST_PRINTER_APP_BUFFER_SIZE,
                                           USB_HostPrinterAppControlCallback, &s_Printer);
            if (status != kStatus_USB_Success)
            {
                usb_echo("Get device id error\\r\\n");
            }
            break;

        case kUSB_HostPrinterRunGetDeviceIdDone:
            idLength = s_Printer.printerAppBuffer[0];
            idLength <<= 8;
            idLength |= s_Printer.printerAppBuffer[1];

            s_Printer.runState = kUSB_HostPrinterRunIdle;
            if (idLength > USB_HOST_PRINTER_APP_BUFFER_SIZE) /* the device id is longer */
            {
                s_Printer.deviceIdBuffer = malloc(idLength + 1);
                if (s_Printer.deviceIdBuffer == NULL)
                {
                    usb_echo("Malloc error\\r\\n");
                    return;
                }
                s_Printer.runWaitState = kUSB_HostPrinterRunWaitGetDeviceIdAll;
                interfaceIndex = ((usb_host_interface_t *)s_Printer.interfaceHandle)->interfaceDesc->bInterfaceNumber;
                status = USB_HostPrinterGetDeviceId(s_Printer.classHandle, interfaceIndex,
                                                    s_Printer.selectAlternateSetting, s_Printer.deviceIdBuffer,
                                                    idLength, USB_HostPrinterAppControlCallback, &s_Printer);
                if (status != kStatus_USB_Success)
                {
                    usb_echo("Get device id error\\r\\n");
                }
            }
            else /* the device id is all */
            {
                s_Printer.runState = kUSB_HostPrinterRunParseDeviceId;
            }
            break;

        case kUSB_HostPrinterRunGetDeviceIdAllDone: /* 2. get device id done */
            s_Printer.runState = kUSB_HostPrinterRunParseDeviceId;
            break;

        case kUSB_HostPrinterRunGetDeviceIdAllError:
            s_Printer.runState = kUSB_HostPrinterRunIdle;
            free(s_Printer.deviceIdBuffer);
            s_Printer.deviceIdBuffer = NULL;
            break;

        case kUSB_HostPrinterRunParseDeviceId:
            if (s_Printer.deviceIdBuffer != NULL)
            {
                idBuffer = s_Printer.deviceIdBuffer;
            }
            else
            {
                idBuffer = s_Printer.printerAppBuffer;
            }
            idLength = idBuffer[0];
            idLength <<= 8;
            idLength |= idBuffer[1];

            idBuffer[idLength] = 0;
            usb_echo("%s\\r\\n", &idBuffer[2]);

            support = 0;
            if (strstr((char *)&idBuffer[2], DEVICE_ID_STRING_PJL))
            {
                if (strstr((char *)&idBuffer[2], DEVICE_ID_STRING_POSTSCRIPT)) /* pjl & postscriptor */
                {
                    support = 1U;
                    s_Printer.deviceLanguageType = kPrinter_PJLPostscriptor;
                }
            }
            else if (strstr((char *)&idBuffer[2], DEVICE_ID_NXP_STRING)) /* device printer demo */
            {
                support = 1U;
                s_Printer.deviceLanguageType = kPrinter_NXPVirtual;
            }
            else
            {
            }

            if (support)
            {
                s_Printer.runState = kUSB_HostPrinterRunSetInterface;
            }
            else
            {
                usb_echo("Unsupported printer language\\r\\n");
            }

            if (s_Printer.deviceIdBuffer != NULL)
            {
                free(s_Printer.deviceIdBuffer);
                s_Printer.deviceIdBuffer = NULL;
            }
            break;

        case kUSB_HostPrinterRunSetInterface: /* 3. set supported printer interface */
            s_Printer.runWaitState = kUSB_HostPrinterRunWaitSetInterface;
            s_Printer.runState = kUSB_HostPrinterRunIdle;
            if (USB_HostPrinterSetInterface(s_Printer.classHandle, s_Printer.interfaceHandle,
                                            s_Printer.selectAlternateSetting, USB_HostPrinterAppControlCallback,
                                            &s_Printer) != kStatus_USB_Success)
            {
                usb_echo("Set interface error\\r\\n");
            }
            break;

        case kUSB_HostPrinterRunPrinterTest:
            USB_HostPrinterTest();
            s_Printer.runState = kUSB_HostPrinterRunPrimeReceive;
            break;

        case kUSB_HostPrinterRunPrimeReceive:
            if (s_Printer.deviceState != kStatus_DEV_Attached)
            {
                return;
            }
            s_Printer.receiveDelay++;
            if (s_Printer.receiveDelay < (USB_HOST_PRINTER_APP_RECEIVE_TRY_DELAY * USB_HOST_PRINTER_APP_ONEMS_COUNT))
            {
                return;
            }

            s_Printer.receiveDelay = 0;
            s_Printer.runState = kUSB_HostPrinterRunIdle;
            /* receive data */
            status =
                USB_HostPrinterRecv(s_Printer.classHandle, s_Printer.printerAppBuffer,
                                    USB_HOST_PRINTER_APP_BUFFER_SIZE, USB_HostPrinterAppBulkInCallback, &s_Printer);
            if (status != kStatus_USB_Success)
            {
                usb_echo("Error\\r\\n");
            }
            break;

        case kUSB_HostPrinterRunDataReceived:
            if (s_Printer.receiveLength > 0)
            {
                s_Printer.printerAppBuffer[s_Printer.receiveLength] = 0;
                usb_echo("%s\\r\\n", s_Printer.printerAppBuffer);
            }
            s_Printer.runState = kUSB_HostPrinterRunPrimeReceive;
            break;

        default:
            break;
    }
}

usb_status_t USB_Host${idCamelCase}$Event(usb_device_handle deviceHandle,
                                     usb_host_configuration_handle configurationHandle,
                                     uint32_t eventCode,
                                       uint8_t *processedInterfaces)
{
    usb_status_t status = kStatus_USB_Success;
    usb_host_configuration_t *configuration;
    usb_host_interface_t *interface;
    uint32_t infoValue;
    usb_descriptor_interface_t *interfaceDesc;
    uint32_t endPos;
    usb_descriptor_union_t *unionDes;
    uint8_t interfaceIndex;
    uint8_t alternateIndex;
    uint8_t support;

    switch (eventCode)
    {
        case kUSB_HostEventAttach:
            /* judge whether is configurationHandle supported */
            configuration = (usb_host_configuration_t *)configurationHandle;
            for (interfaceIndex = 0; interfaceIndex < configuration->interfaceCount; ++interfaceIndex)
            {
                interface = &configuration->interfaceList[interfaceIndex];
                if (processedInterfaces[interfaceIndex])
                {
                    continue;
                }
                interfaceDesc = interface->interfaceDesc;
                if (interfaceDesc->bInterfaceClass != USB_HOST_PRINTER_CLASS_CODE)
                {
                    continue;
                }
                if (interfaceDesc->bInterfaceSubClass != USB_HOST_PRINTER_SUBCLASS_CODE)
                {
                    continue;
                }
                support = 0;
                if (interfaceDesc->bInterfaceProtocol == USB_HOST_PRINTER_PROTOCOL_BIDIRECTION)
                {
                    support = 1;
                }
                else if (interface->alternateSettingNumber != 0) /* need check the alternate setting interfaces */
                {
                    unionDes = (usb_descriptor_union_t *)(interface->interfaceExtension);
                    endPos = (uint32_t)(interface->interfaceExtension + interface->interfaceExtensionLength);
                    for (alternateIndex = 0; alternateIndex < interface->alternateSettingNumber; ++alternateIndex)
                    {
                        interfaceDesc = NULL;
                        while ((uint32_t)unionDes < endPos)
                        {
                            if (unionDes->common.bDescriptorType != USB_DESCRIPTOR_TYPE_INTERFACE)
                            {
                                unionDes = (usb_descriptor_union_t *)((uint32_t)unionDes + unionDes->common.bLength);
                            }
                            else
                            {
                                interfaceDesc = (usb_descriptor_interface_t *)(&(unionDes->common.bLength));
                                break;
                            }
                        }

                        if ((interfaceDesc != NULL) &&
                            (interfaceDesc->bInterfaceClass == USB_HOST_PRINTER_CLASS_CODE) &&
                            (interfaceDesc->bInterfaceSubClass == USB_HOST_PRINTER_SUBCLASS_CODE) &&
                            (interfaceDesc->bInterfaceProtocol == USB_HOST_PRINTER_PROTOCOL_BIDIRECTION))
                        {
                            support = 1;
                            break;
                        }
                    }
                }
                else
                {
                }

                if (support)
                {
                    if (s_Printer.deviceState == kStatus_DEV_Idle)
                    {
                        /* the interface is supported by the application */
                        s_Printer.printerAppBuffer = s_HostPrinterBuffer;
                        s_Printer.deviceHandle = deviceHandle;
                        s_Printer.interfaceHandle = interface;
                        s_Printer.configHandle = configurationHandle;
                        s_Printer.selectAlternateSetting = interfaceDesc->bAlternateSetting;
                        processedInterfaces[interfaceIndex] = 1;
                        return kStatus_USB_Success;
                    }
                }
            }
            status = kStatus_USB_NotSupported;
            break;

        case kUSB_HostEventNotSupported:
            break;

        case kUSB_HostEventEnumerationDone:
            if (s_Printer.configHandle == configurationHandle)
            {
                if ((s_Printer.deviceHandle != NULL) && (s_Printer.interfaceHandle != NULL))
                {
                    /* the device enumeration is done */
                    if (s_Printer.deviceState == kStatus_DEV_Idle)
                    {
                        s_Printer.deviceState = kStatus_DEV_Attached;

                        USB_HostHelperGetPeripheralInformation(deviceHandle, kUSB_HostGetDevicePID, &infoValue);
                        usb_echo("Printer attached:PID=0x%x", infoValue);
                        USB_HostHelperGetPeripheralInformation(deviceHandle, kUSB_HostGetDeviceVID, &infoValue);
                        usb_echo("VID=0x%x ", infoValue);
                        USB_HostHelperGetPeripheralInformation(deviceHandle, kUSB_HostGetDeviceAddress, &infoValue);
                        usb_echo("Address=%d\\r\\n", infoValue);
                    }
                    else
                    {
                        usb_echo("Not idle printer instance\\r\\n");
                        status = kStatus_USB_Error;
                    }
                }
            }
            break;

        case kUSB_HostEventDetach:
            if (s_Printer.configHandle == configurationHandle)
            {
                /* the device is detached */
                s_Printer.configHandle = NULL;
                if (s_Printer.deviceState != kStatus_DEV_Idle)
                {
                    s_Printer.deviceState = kStatus_DEV_Detached;
                }
            }
            break;

        default:
            break;
    }

    return status;
}

usb_status_t USB_Host${idCamelCase}$Init(void)
{
    s_Printer.deviceIdBuffer = NULL;
    s_Printer.selectAlternateSetting = 0;

    return kStatus_USB_Success;
}
