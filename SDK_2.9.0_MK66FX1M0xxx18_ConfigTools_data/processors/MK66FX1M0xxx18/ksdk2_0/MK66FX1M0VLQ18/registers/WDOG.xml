<?xml version="1.0"?>
<regs:peripheral xmlns:regs="http://swtools.freescale.net/XSD/registers/4.0/regsPeripheral.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://swtools.freescale.net/XSD/registers/4.0/regsPeripheral.xsd http://swtools.freescale.net/XSD/registers/4.0/regsPeripheral.xsd">
  <register offset="0" width="16" name="STCTRLH" description="Watchdog Status and Control Register High">
    <alias type="CMSIS" value="STCTRLH"/>
    <bit_field offset="0" width="1" name="WDOGEN" access="RW" reset_value="0x1" description="Enables or disables the WDOG's operation. In the disabled state, the watchdog timer is kept in the reset state, but the other exception conditions can still trigger a reset/interrupt. A change in the value of this bit must be held for more than one WDOG_CLK cycle for the WDOG to be enabled or disabled.">
      <alias type="CMSIS" value="WDOG_STCTRLH_WDOGEN(x)"/>
      <bit_field_value name="STCTRLH_WDOGEN_0b0" value="0b0" description="WDOG is disabled."/>
      <bit_field_value name="STCTRLH_WDOGEN_0b1" value="0b1" description="WDOG is enabled."/>
    </bit_field>
    <bit_field offset="1" width="1" name="CLKSRC" access="RW" reset_value="0x1" description="Selects clock source for the WDOG timer and other internal timing operations.">
      <alias type="CMSIS" value="WDOG_STCTRLH_CLKSRC(x)"/>
      <bit_field_value name="STCTRLH_CLKSRC_0b0" value="0b0" description="WDOG clock sourced from LPO ."/>
      <bit_field_value name="STCTRLH_CLKSRC_0b1" value="0b1" description="WDOG clock sourced from alternate clock source."/>
    </bit_field>
    <bit_field offset="2" width="1" name="IRQRSTEN" access="RW" reset_value="0" description="Used to enable the debug breadcrumbs feature. A change in this bit is updated immediately, as opposed to updating after WCT.">
      <alias type="CMSIS" value="WDOG_STCTRLH_IRQRSTEN(x)"/>
      <bit_field_value name="STCTRLH_IRQRSTEN_0b0" value="0b0" description="WDOG time-out generates reset only."/>
      <bit_field_value name="STCTRLH_IRQRSTEN_0b1" value="0b1" description="WDOG time-out initially generates an interrupt. After WCT, it generates a reset."/>
    </bit_field>
    <bit_field offset="3" width="1" name="WINEN" access="RW" reset_value="0" description="Enables Windowing mode.">
      <alias type="CMSIS" value="WDOG_STCTRLH_WINEN(x)"/>
      <bit_field_value name="STCTRLH_WINEN_0b0" value="0b0" description="Windowing mode is disabled."/>
      <bit_field_value name="STCTRLH_WINEN_0b1" value="0b1" description="Windowing mode is enabled."/>
    </bit_field>
    <bit_field offset="4" width="1" name="ALLOWUPDATE" access="RW" reset_value="0x1" description="Enables updates to watchdog write-once registers, after the reset-triggered initial configuration window (WCT) closes, through unlock sequence.">
      <alias type="CMSIS" value="WDOG_STCTRLH_ALLOWUPDATE(x)"/>
      <bit_field_value name="STCTRLH_ALLOWUPDATE_0b0" value="0b0" description="No further updates allowed to WDOG write-once registers."/>
      <bit_field_value name="STCTRLH_ALLOWUPDATE_0b1" value="0b1" description="WDOG write-once registers can be unlocked for updating."/>
    </bit_field>
    <bit_field offset="5" width="1" name="DBGEN" access="RW" reset_value="0" description="Enables or disables WDOG in Debug mode.">
      <alias type="CMSIS" value="WDOG_STCTRLH_DBGEN(x)"/>
      <bit_field_value name="STCTRLH_DBGEN_0b0" value="0b0" description="WDOG is disabled in CPU Debug mode."/>
      <bit_field_value name="STCTRLH_DBGEN_0b1" value="0b1" description="WDOG is enabled in CPU Debug mode."/>
    </bit_field>
    <bit_field offset="6" width="1" name="STOPEN" access="RW" reset_value="0x1" description="Enables or disables WDOG in Stop mode.">
      <alias type="CMSIS" value="WDOG_STCTRLH_STOPEN(x)"/>
      <bit_field_value name="STCTRLH_STOPEN_0b0" value="0b0" description="WDOG is disabled in CPU Stop mode."/>
      <bit_field_value name="STCTRLH_STOPEN_0b1" value="0b1" description="WDOG is enabled in CPU Stop mode."/>
    </bit_field>
    <bit_field offset="7" width="1" name="WAITEN" access="RW" reset_value="0x1" description="Enables or disables WDOG in Wait mode.">
      <alias type="CMSIS" value="WDOG_STCTRLH_WAITEN(x)"/>
      <bit_field_value name="STCTRLH_WAITEN_0b0" value="0b0" description="WDOG is disabled in CPU Wait mode."/>
      <bit_field_value name="STCTRLH_WAITEN_0b1" value="0b1" description="WDOG is enabled in CPU Wait mode."/>
    </bit_field>
    <reserved_bit_field offset="8" width="1" reset_value="0x1"/>
    <reserved_bit_field offset="9" width="1" reset_value="0"/>
    <bit_field offset="10" width="1" name="TESTWDOG" access="RW" reset_value="0" description="Puts the watchdog in the functional test mode. In this mode, the watchdog timer and the associated compare and reset generation logic is tested for correct operation. The clock for the timer is switched from the main watchdog clock to the fast clock input for watchdog functional test. The TESTSEL bit selects the test to be run.">
      <alias type="CMSIS" value="WDOG_STCTRLH_TESTWDOG(x)"/>
    </bit_field>
    <bit_field offset="11" width="1" name="TESTSEL" access="RW" reset_value="0" description="Effective only if TESTWDOG is set. Selects the test to be run on the watchdog timer.">
      <alias type="CMSIS" value="WDOG_STCTRLH_TESTSEL(x)"/>
      <bit_field_value name="STCTRLH_TESTSEL_0b0" value="0b0" description="Quick test. The timer runs in normal operation. You can load a small time-out value to do a quick test."/>
      <bit_field_value name="STCTRLH_TESTSEL_0b1" value="0b1" description="Byte test. Puts the timer in the byte test mode where individual bytes of the timer are enabled for operation and are compared for time-out against the corresponding byte of the programmed time-out value. Select the byte through BYTESEL[1:0] for testing."/>
    </bit_field>
    <bit_field offset="12" width="2" name="BYTESEL" access="RW" reset_value="0" description="This 2-bit field selects the byte to be tested when the watchdog is in the byte test mode.">
      <alias type="CMSIS" value="WDOG_STCTRLH_BYTESEL(x)"/>
      <bit_field_value name="STCTRLH_BYTESEL_0b00" value="0b00" description="Byte 0 selected"/>
      <bit_field_value name="STCTRLH_BYTESEL_0b01" value="0b01" description="Byte 1 selected"/>
      <bit_field_value name="STCTRLH_BYTESEL_0b10" value="0b10" description="Byte 2 selected"/>
      <bit_field_value name="STCTRLH_BYTESEL_0b11" value="0b11" description="Byte 3 selected"/>
    </bit_field>
    <bit_field offset="14" width="1" name="DISTESTWDOG" access="RW" reset_value="0" description="Allows the WDOG's functional test mode to be disabled permanently. After it is set, it can only be cleared by a reset. It cannot be unlocked for editing after it is set.">
      <alias type="CMSIS" value="WDOG_STCTRLH_DISTESTWDOG(x)"/>
      <bit_field_value name="STCTRLH_DISTESTWDOG_0b0" value="0b0" description="WDOG functional test mode is not disabled."/>
      <bit_field_value name="STCTRLH_DISTESTWDOG_0b1" value="0b1" description="WDOG functional test mode is disabled permanently until reset."/>
    </bit_field>
    <reserved_bit_field offset="15" width="1" reset_value="0"/>
  </register>
  <register offset="0x2" width="16" name="STCTRLL" description="Watchdog Status and Control Register Low">
    <alias type="CMSIS" value="STCTRLL"/>
    <reserved_bit_field offset="0" width="15" reset_value="0x1"/>
    <bit_field offset="15" width="1" name="INTFLG" access="RW" reset_value="0" description="Interrupt flag. It is set when an exception occurs. IRQRSTEN = 1 is a precondition to set this flag. INTFLG = 1 results in an interrupt being issued followed by a reset, WCT later. The interrupt can be cleared by writing 1 to this bit. It also gets cleared on a system reset.">
      <alias type="CMSIS" value="WDOG_STCTRLL_INTFLG(x)"/>
    </bit_field>
  </register>
  <register offset="0x4" width="16" name="TOVALH" description="Watchdog Time-out Value Register High">
    <alias type="CMSIS" value="TOVALH"/>
    <bit_field offset="0" width="16" name="TOVALHIGH" access="RW" reset_value="0x4C" description="Defines the upper 16 bits of the 32-bit time-out value for the watchdog timer. It is defined in terms of cycles of the watchdog clock.">
      <alias type="CMSIS" value="WDOG_TOVALH_TOVALHIGH(x)"/>
    </bit_field>
  </register>
  <register offset="0x6" width="16" name="TOVALL" description="Watchdog Time-out Value Register Low">
    <alias type="CMSIS" value="TOVALL"/>
    <bit_field offset="0" width="16" name="TOVALLOW" access="RW" reset_value="0x4B4C" description="Defines the lower 16 bits of the 32-bit time-out value for the watchdog timer. It is defined in terms of cycles of the watchdog clock.">
      <alias type="CMSIS" value="WDOG_TOVALL_TOVALLOW(x)"/>
    </bit_field>
  </register>
  <register offset="0x8" width="16" name="WINH" description="Watchdog Window Register High">
    <alias type="CMSIS" value="WINH"/>
    <bit_field offset="0" width="16" name="WINHIGH" access="RW" reset_value="0" description="Defines the upper 16 bits of the 32-bit window for the windowed mode of operation of the watchdog. It is defined in terms of cycles of the watchdog clock. In this mode, the watchdog can be refreshed only when the timer has reached a value greater than or equal to this window length. A refresh outside this window resets the system or if IRQRSTEN is set, it interrupts and then resets the system.">
      <alias type="CMSIS" value="WDOG_WINH_WINHIGH(x)"/>
    </bit_field>
  </register>
  <register offset="0xA" width="16" name="WINL" description="Watchdog Window Register Low">
    <alias type="CMSIS" value="WINL"/>
    <bit_field offset="0" width="16" name="WINLOW" access="RW" reset_value="0x10" description="Defines the lower 16 bits of the 32-bit window for the windowed mode of operation of the watchdog. It is defined in terms of cycles of the pre-scaled watchdog clock. In this mode, the watchdog can be refreshed only when the timer reaches a value greater than or equal to this window length value. A refresh outside of this window resets the system or if IRQRSTEN is set, it interrupts and then resets the system.">
      <alias type="CMSIS" value="WDOG_WINL_WINLOW(x)"/>
    </bit_field>
  </register>
  <register offset="0xC" width="16" name="REFRESH" description="Watchdog Refresh register">
    <alias type="CMSIS" value="REFRESH"/>
    <bit_field offset="0" width="16" name="WDOGREFRESH" access="RW" reset_value="0xB480" description="Watchdog refresh register. A sequence of 0xA602 followed by 0xB480 within 20 bus clock cycles written to this register refreshes the WDOG and prevents it from resetting the system. Writing a value other than the above mentioned sequence or if the sequence is longer than 20 bus cycles, resets the system, or if IRQRSTEN is set, it interrupts and then resets the system.">
      <alias type="CMSIS" value="WDOG_REFRESH_WDOGREFRESH(x)"/>
    </bit_field>
  </register>
  <register offset="0xE" width="16" name="UNLOCK" description="Watchdog Unlock register">
    <alias type="CMSIS" value="UNLOCK"/>
    <bit_field offset="0" width="16" name="WDOGUNLOCK" access="RW" reset_value="0xD928" description="Writing the unlock sequence values to this register to makes the watchdog write-once registers writable again. The required unlock sequence is 0xC520 followed by 0xD928 within 20 bus clock cycles. A valid unlock sequence opens a window equal in length to the WCT within which you can update the registers. Writing a value other than the above mentioned sequence or if the sequence is longer than 20 bus cycles, resets the system or if IRQRSTEN is set, it interrupts and then resets the system. The unlock sequence is effective only if ALLOWUPDATE is set.">
      <alias type="CMSIS" value="WDOG_UNLOCK_WDOGUNLOCK(x)"/>
    </bit_field>
  </register>
  <register offset="0x10" width="16" name="TMROUTH" description="Watchdog Timer Output Register High">
    <alias type="CMSIS" value="TMROUTH"/>
    <bit_field offset="0" width="16" name="TIMEROUTHIGH" access="RW" reset_value="0" description="Shows the value of the upper 16 bits of the watchdog timer.">
      <alias type="CMSIS" value="WDOG_TMROUTH_TIMEROUTHIGH(x)"/>
    </bit_field>
  </register>
  <register offset="0x12" width="16" name="TMROUTL" description="Watchdog Timer Output Register Low">
    <alias type="CMSIS" value="TMROUTL"/>
    <bit_field offset="0" width="16" name="TIMEROUTLOW" access="RW" reset_value="0" description="Shows the value of the lower 16 bits of the watchdog timer.">
      <alias type="CMSIS" value="WDOG_TMROUTL_TIMEROUTLOW(x)"/>
    </bit_field>
  </register>
  <register offset="0x14" width="16" name="RSTCNT" description="Watchdog Reset Count register">
    <alias type="CMSIS" value="RSTCNT"/>
    <bit_field offset="0" width="16" name="RSTCNT" access="RW" reset_value="0" description="Counts the number of times the watchdog resets the system. This register is reset only on a POR. Writing 1 to the bit to be cleared enables you to clear the contents of this register.">
      <alias type="CMSIS" value="WDOG_RSTCNT_RSTCNT(x)"/>
    </bit_field>
  </register>
  <register offset="0x16" width="16" name="PRESC" description="Watchdog Prescaler register">
    <alias type="CMSIS" value="PRESC"/>
    <reserved_bit_field offset="0" width="8" reset_value="0"/>
    <bit_field offset="8" width="3" name="PRESCVAL" access="RW" reset_value="0x4" description="3-bit prescaler for the watchdog clock source. A value of zero indicates no division of the input WDOG clock. The watchdog clock is divided by (PRESCVAL + 1) to provide the prescaled WDOG_CLK.">
      <alias type="CMSIS" value="WDOG_PRESC_PRESCVAL(x)"/>
    </bit_field>
    <reserved_bit_field offset="11" width="5" reset_value="0"/>
  </register>
</regs:peripheral>